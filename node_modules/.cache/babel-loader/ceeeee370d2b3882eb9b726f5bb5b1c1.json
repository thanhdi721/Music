{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\n/**\n * Sync value with state.\n * This should only used for internal which not affect outside calculation.\n * Since it's not safe for suspense.\n */\n\nexport default function useSyncState(defaultValue, controlledValue) {\n  var valueRef = React.useRef(defaultValue);\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      forceUpdate = _React$useState2[1];\n\n  var getter = function getter(useControlledValueFirst) {\n    return useControlledValueFirst && controlledValue !== undefined ? controlledValue : valueRef.current;\n  };\n\n  var setter = function setter(nextValue) {\n    valueRef.current = nextValue;\n    forceUpdate({});\n  };\n\n  return [getter, setter, getter(true)];\n}","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/rc-picker/es/hooks/useSyncState.js"],"names":["_slicedToArray","React","useSyncState","defaultValue","controlledValue","valueRef","useRef","_React$useState","useState","_React$useState2","forceUpdate","getter","useControlledValueFirst","undefined","current","setter","nextValue"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,CAAsBC,YAAtB,EAAoCC,eAApC,EAAqD;AAClE,MAAIC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAaH,YAAb,CAAf;;AACA,MAAII,eAAe,GAAGN,KAAK,CAACO,QAAN,CAAe,EAAf,CAAtB;AAAA,MACEC,gBAAgB,GAAGT,cAAc,CAACO,eAAD,EAAkB,CAAlB,CADnC;AAAA,MAEEG,WAAW,GAAGD,gBAAgB,CAAC,CAAD,CAFhC;;AAGA,MAAIE,MAAM,GAAG,SAASA,MAAT,CAAgBC,uBAAhB,EAAyC;AACpD,WAAOA,uBAAuB,IAAIR,eAAe,KAAKS,SAA/C,GAA2DT,eAA3D,GAA6EC,QAAQ,CAACS,OAA7F;AACD,GAFD;;AAGA,MAAIC,MAAM,GAAG,SAASA,MAAT,CAAgBC,SAAhB,EAA2B;AACtCX,IAAAA,QAAQ,CAACS,OAAT,GAAmBE,SAAnB;AACAN,IAAAA,WAAW,CAAC,EAAD,CAAX;AACD,GAHD;;AAIA,SAAO,CAACC,MAAD,EAASI,MAAT,EAAiBJ,MAAM,CAAC,IAAD,CAAvB,CAAP;AACD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\n\n/**\n * Sync value with state.\n * This should only used for internal which not affect outside calculation.\n * Since it's not safe for suspense.\n */\nexport default function useSyncState(defaultValue, controlledValue) {\n  var valueRef = React.useRef(defaultValue);\n  var _React$useState = React.useState({}),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    forceUpdate = _React$useState2[1];\n  var getter = function getter(useControlledValueFirst) {\n    return useControlledValueFirst && controlledValue !== undefined ? controlledValue : valueRef.current;\n  };\n  var setter = function setter(nextValue) {\n    valueRef.current = nextValue;\n    forceUpdate({});\n  };\n  return [getter, setter, getter(true)];\n}"]},"metadata":{},"sourceType":"module"}