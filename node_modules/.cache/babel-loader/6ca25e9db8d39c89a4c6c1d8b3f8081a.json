{"ast":null,"code":"export function hasAddon(props) {\n  return !!(props.addonBefore || props.addonAfter);\n}\nexport function hasPrefixSuffix(props) {\n  return !!(props.prefix || props.suffix || props.allowClear);\n} // TODO: It's better to use `Proxy` replace the `element.value`. But we still need support IE11.\n\nfunction cloneEvent(event, target, value) {\n  // A bug report filed on WebKit's Bugzilla tracker, dating back to 2009, specifically addresses the issue of cloneNode() not copying files of <input type=\"file\"> elements.\n  // As of the last update, this bug was still marked as \"NEW,\" indicating that it might not have been resolved yet​​.\n  // https://bugs.webkit.org/show_bug.cgi?id=28123\n  var currentTarget = target.cloneNode(true); // click clear icon\n\n  var newEvent = Object.create(event, {\n    target: {\n      value: currentTarget\n    },\n    currentTarget: {\n      value: currentTarget\n    }\n  }); // Fill data\n\n  currentTarget.value = value; // Fill selection. Some type like `email` not support selection\n  // https://github.com/ant-design/ant-design/issues/47833\n\n  if (typeof target.selectionStart === 'number' && typeof target.selectionEnd === 'number') {\n    currentTarget.selectionStart = target.selectionStart;\n    currentTarget.selectionEnd = target.selectionEnd;\n  }\n\n  return newEvent;\n}\n\nexport function resolveOnChange(target, e, onChange, targetValue) {\n  if (!onChange) {\n    return;\n  }\n\n  var event = e;\n\n  if (e.type === 'click') {\n    // Clone a new target for event.\n    // Avoid the following usage, the setQuery method gets the original value.\n    //\n    // const [query, setQuery] = React.useState('');\n    // <Input\n    //   allowClear\n    //   value={query}\n    //   onChange={(e)=> {\n    //     setQuery((prevStatus) => e.target.value);\n    //   }}\n    // />\n    event = cloneEvent(e, target, '');\n    onChange(event);\n    return;\n  } // Trigger by composition event, this means we need force change the input value\n  // https://github.com/ant-design/ant-design/issues/45737\n  // https://github.com/ant-design/ant-design/issues/46598\n\n\n  if (target.type !== 'file' && targetValue !== undefined) {\n    event = cloneEvent(e, target, targetValue);\n    onChange(event);\n    return;\n  }\n\n  onChange(event);\n}\nexport function triggerFocus(element, option) {\n  if (!element) return;\n  element.focus(option); // Selection content\n\n  var _ref = option || {},\n      cursor = _ref.cursor;\n\n  if (cursor) {\n    var len = element.value.length;\n\n    switch (cursor) {\n      case 'start':\n        element.setSelectionRange(0, 0);\n        break;\n\n      case 'end':\n        element.setSelectionRange(len, len);\n        break;\n\n      default:\n        element.setSelectionRange(0, len);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/rc-input/es/utils/commonUtils.js"],"names":["hasAddon","props","addonBefore","addonAfter","hasPrefixSuffix","prefix","suffix","allowClear","cloneEvent","event","target","value","currentTarget","cloneNode","newEvent","Object","create","selectionStart","selectionEnd","resolveOnChange","e","onChange","targetValue","type","undefined","triggerFocus","element","option","focus","_ref","cursor","len","length","setSelectionRange"],"mappings":"AAAA,OAAO,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AAC9B,SAAO,CAAC,EAAEA,KAAK,CAACC,WAAN,IAAqBD,KAAK,CAACE,UAA7B,CAAR;AACD;AACD,OAAO,SAASC,eAAT,CAAyBH,KAAzB,EAAgC;AACrC,SAAO,CAAC,EAAEA,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACK,MAAtB,IAAgCL,KAAK,CAACM,UAAxC,CAAR;AACD,C,CAED;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmCC,KAAnC,EAA0C;AACxC;AACA;AACA;AACA,MAAIC,aAAa,GAAGF,MAAM,CAACG,SAAP,CAAiB,IAAjB,CAApB,CAJwC,CAMxC;;AACA,MAAIC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcP,KAAd,EAAqB;AAClCC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAEC;AADD,KAD0B;AAIlCA,IAAAA,aAAa,EAAE;AACbD,MAAAA,KAAK,EAAEC;AADM;AAJmB,GAArB,CAAf,CAPwC,CAgBxC;;AACAA,EAAAA,aAAa,CAACD,KAAd,GAAsBA,KAAtB,CAjBwC,CAmBxC;AACA;;AACA,MAAI,OAAOD,MAAM,CAACO,cAAd,KAAiC,QAAjC,IAA6C,OAAOP,MAAM,CAACQ,YAAd,KAA+B,QAAhF,EAA0F;AACxFN,IAAAA,aAAa,CAACK,cAAd,GAA+BP,MAAM,CAACO,cAAtC;AACAL,IAAAA,aAAa,CAACM,YAAd,GAA6BR,MAAM,CAACQ,YAApC;AACD;;AACD,SAAOJ,QAAP;AACD;;AACD,OAAO,SAASK,eAAT,CAAyBT,MAAzB,EAAiCU,CAAjC,EAAoCC,QAApC,EAA8CC,WAA9C,EAA2D;AAChE,MAAI,CAACD,QAAL,EAAe;AACb;AACD;;AACD,MAAIZ,KAAK,GAAGW,CAAZ;;AACA,MAAIA,CAAC,CAACG,IAAF,KAAW,OAAf,EAAwB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAd,IAAAA,KAAK,GAAGD,UAAU,CAACY,CAAD,EAAIV,MAAJ,EAAY,EAAZ,CAAlB;AACAW,IAAAA,QAAQ,CAACZ,KAAD,CAAR;AACA;AACD,GArB+D,CAuBhE;AACA;AACA;;;AACA,MAAIC,MAAM,CAACa,IAAP,KAAgB,MAAhB,IAA0BD,WAAW,KAAKE,SAA9C,EAAyD;AACvDf,IAAAA,KAAK,GAAGD,UAAU,CAACY,CAAD,EAAIV,MAAJ,EAAYY,WAAZ,CAAlB;AACAD,IAAAA,QAAQ,CAACZ,KAAD,CAAR;AACA;AACD;;AACDY,EAAAA,QAAQ,CAACZ,KAAD,CAAR;AACD;AACD,OAAO,SAASgB,YAAT,CAAsBC,OAAtB,EAA+BC,MAA/B,EAAuC;AAC5C,MAAI,CAACD,OAAL,EAAc;AACdA,EAAAA,OAAO,CAACE,KAAR,CAAcD,MAAd,EAF4C,CAI5C;;AACA,MAAIE,IAAI,GAAGF,MAAM,IAAI,EAArB;AAAA,MACEG,MAAM,GAAGD,IAAI,CAACC,MADhB;;AAEA,MAAIA,MAAJ,EAAY;AACV,QAAIC,GAAG,GAAGL,OAAO,CAACf,KAAR,CAAcqB,MAAxB;;AACA,YAAQF,MAAR;AACE,WAAK,OAAL;AACEJ,QAAAA,OAAO,CAACO,iBAAR,CAA0B,CAA1B,EAA6B,CAA7B;AACA;;AACF,WAAK,KAAL;AACEP,QAAAA,OAAO,CAACO,iBAAR,CAA0BF,GAA1B,EAA+BA,GAA/B;AACA;;AACF;AACEL,QAAAA,OAAO,CAACO,iBAAR,CAA0B,CAA1B,EAA6BF,GAA7B;AARJ;AAUD;AACF","sourcesContent":["export function hasAddon(props) {\n  return !!(props.addonBefore || props.addonAfter);\n}\nexport function hasPrefixSuffix(props) {\n  return !!(props.prefix || props.suffix || props.allowClear);\n}\n\n// TODO: It's better to use `Proxy` replace the `element.value`. But we still need support IE11.\nfunction cloneEvent(event, target, value) {\n  // A bug report filed on WebKit's Bugzilla tracker, dating back to 2009, specifically addresses the issue of cloneNode() not copying files of <input type=\"file\"> elements.\n  // As of the last update, this bug was still marked as \"NEW,\" indicating that it might not have been resolved yet​​.\n  // https://bugs.webkit.org/show_bug.cgi?id=28123\n  var currentTarget = target.cloneNode(true);\n\n  // click clear icon\n  var newEvent = Object.create(event, {\n    target: {\n      value: currentTarget\n    },\n    currentTarget: {\n      value: currentTarget\n    }\n  });\n\n  // Fill data\n  currentTarget.value = value;\n\n  // Fill selection. Some type like `email` not support selection\n  // https://github.com/ant-design/ant-design/issues/47833\n  if (typeof target.selectionStart === 'number' && typeof target.selectionEnd === 'number') {\n    currentTarget.selectionStart = target.selectionStart;\n    currentTarget.selectionEnd = target.selectionEnd;\n  }\n  return newEvent;\n}\nexport function resolveOnChange(target, e, onChange, targetValue) {\n  if (!onChange) {\n    return;\n  }\n  var event = e;\n  if (e.type === 'click') {\n    // Clone a new target for event.\n    // Avoid the following usage, the setQuery method gets the original value.\n    //\n    // const [query, setQuery] = React.useState('');\n    // <Input\n    //   allowClear\n    //   value={query}\n    //   onChange={(e)=> {\n    //     setQuery((prevStatus) => e.target.value);\n    //   }}\n    // />\n\n    event = cloneEvent(e, target, '');\n    onChange(event);\n    return;\n  }\n\n  // Trigger by composition event, this means we need force change the input value\n  // https://github.com/ant-design/ant-design/issues/45737\n  // https://github.com/ant-design/ant-design/issues/46598\n  if (target.type !== 'file' && targetValue !== undefined) {\n    event = cloneEvent(e, target, targetValue);\n    onChange(event);\n    return;\n  }\n  onChange(event);\n}\nexport function triggerFocus(element, option) {\n  if (!element) return;\n  element.focus(option);\n\n  // Selection content\n  var _ref = option || {},\n    cursor = _ref.cursor;\n  if (cursor) {\n    var len = element.value.length;\n    switch (cursor) {\n      case 'start':\n        element.setSelectionRange(0, 0);\n        break;\n      case 'end':\n        element.setSelectionRange(len, len);\n        break;\n      default:\n        element.setSelectionRange(0, len);\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}