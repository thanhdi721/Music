{"ast":null,"code":"\"use client\";\n\nimport React, { useMemo } from 'react';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport Select from '../../select';\nimport { ColorFormat } from '../interface';\nimport ColorAlphaInput from './ColorAlphaInput';\nimport ColorHexInput from './ColorHexInput';\nimport ColorHsbInput from './ColorHsbInput';\nimport ColorRgbInput from './ColorRgbInput';\nconst selectOptions = [ColorFormat.hex, ColorFormat.hsb, ColorFormat.rgb].map(format => ({\n  value: format,\n  label: format.toLocaleUpperCase()\n}));\n\nconst ColorInput = props => {\n  const {\n    prefixCls,\n    format,\n    value,\n    disabledAlpha,\n    onFormatChange,\n    onChange\n  } = props;\n  const [colorFormat, setColorFormat] = useMergedState(ColorFormat.hex, {\n    value: format,\n    onChange: onFormatChange\n  });\n  const colorInputPrefixCls = `${prefixCls}-input`;\n\n  const handleFormatChange = newFormat => {\n    setColorFormat(newFormat);\n  };\n\n  const steppersNode = useMemo(() => {\n    const inputProps = {\n      value,\n      prefixCls,\n      onChange\n    };\n\n    switch (colorFormat) {\n      case ColorFormat.hsb:\n        return /*#__PURE__*/React.createElement(ColorHsbInput, Object.assign({}, inputProps));\n\n      case ColorFormat.rgb:\n        return /*#__PURE__*/React.createElement(ColorRgbInput, Object.assign({}, inputProps));\n\n      case ColorFormat.hex:\n      default:\n        return /*#__PURE__*/React.createElement(ColorHexInput, Object.assign({}, inputProps));\n    }\n  }, [colorFormat, prefixCls, value, onChange]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `${colorInputPrefixCls}-container`\n  }, /*#__PURE__*/React.createElement(Select, {\n    value: colorFormat,\n    variant: \"borderless\",\n    getPopupContainer: current => current,\n    popupMatchSelectWidth: 68,\n    placement: \"bottomRight\",\n    onChange: handleFormatChange,\n    className: `${prefixCls}-format-select`,\n    size: \"small\",\n    options: selectOptions\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: colorInputPrefixCls\n  }, steppersNode), !disabledAlpha && /*#__PURE__*/React.createElement(ColorAlphaInput, {\n    prefixCls: prefixCls,\n    value: value,\n    onChange: onChange\n  }));\n};\n\nexport default ColorInput;","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/antd/es/color-picker/components/ColorInput.js"],"names":["React","useMemo","useMergedState","Select","ColorFormat","ColorAlphaInput","ColorHexInput","ColorHsbInput","ColorRgbInput","selectOptions","hex","hsb","rgb","map","format","value","label","toLocaleUpperCase","ColorInput","props","prefixCls","disabledAlpha","onFormatChange","onChange","colorFormat","setColorFormat","colorInputPrefixCls","handleFormatChange","newFormat","steppersNode","inputProps","createElement","Object","assign","className","variant","getPopupContainer","current","popupMatchSelectWidth","placement","size","options"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport React, { useMemo } from 'react';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport Select from '../../select';\nimport { ColorFormat } from '../interface';\nimport ColorAlphaInput from './ColorAlphaInput';\nimport ColorHexInput from './ColorHexInput';\nimport ColorHsbInput from './ColorHsbInput';\nimport ColorRgbInput from './ColorRgbInput';\nconst selectOptions = [ColorFormat.hex, ColorFormat.hsb, ColorFormat.rgb].map(format => ({\n  value: format,\n  label: format.toLocaleUpperCase()\n}));\nconst ColorInput = props => {\n  const {\n    prefixCls,\n    format,\n    value,\n    disabledAlpha,\n    onFormatChange,\n    onChange\n  } = props;\n  const [colorFormat, setColorFormat] = useMergedState(ColorFormat.hex, {\n    value: format,\n    onChange: onFormatChange\n  });\n  const colorInputPrefixCls = `${prefixCls}-input`;\n  const handleFormatChange = newFormat => {\n    setColorFormat(newFormat);\n  };\n  const steppersNode = useMemo(() => {\n    const inputProps = {\n      value,\n      prefixCls,\n      onChange\n    };\n    switch (colorFormat) {\n      case ColorFormat.hsb:\n        return /*#__PURE__*/React.createElement(ColorHsbInput, Object.assign({}, inputProps));\n      case ColorFormat.rgb:\n        return /*#__PURE__*/React.createElement(ColorRgbInput, Object.assign({}, inputProps));\n      case ColorFormat.hex:\n      default:\n        return /*#__PURE__*/React.createElement(ColorHexInput, Object.assign({}, inputProps));\n    }\n  }, [colorFormat, prefixCls, value, onChange]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `${colorInputPrefixCls}-container`\n  }, /*#__PURE__*/React.createElement(Select, {\n    value: colorFormat,\n    variant: \"borderless\",\n    getPopupContainer: current => current,\n    popupMatchSelectWidth: 68,\n    placement: \"bottomRight\",\n    onChange: handleFormatChange,\n    className: `${prefixCls}-format-select`,\n    size: \"small\",\n    options: selectOptions\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: colorInputPrefixCls\n  }, steppersNode), !disabledAlpha && ( /*#__PURE__*/React.createElement(ColorAlphaInput, {\n    prefixCls: prefixCls,\n    value: value,\n    onChange: onChange\n  })));\n};\nexport default ColorInput;"]},"metadata":{},"sourceType":"module"}