{"ast":null,"code":"import defaultLocale from '../locale/en_US';\nlet runtimeLocale = Object.assign({}, defaultLocale.Modal);\nlet localeList = [];\n\nconst generateLocale = () => localeList.reduce((merged, locale) => Object.assign(Object.assign({}, merged), locale), defaultLocale.Modal);\n\nexport function changeConfirmLocale(newLocale) {\n  if (newLocale) {\n    const cloneLocale = Object.assign({}, newLocale);\n    localeList.push(cloneLocale);\n    runtimeLocale = generateLocale();\n    return () => {\n      localeList = localeList.filter(locale => locale !== cloneLocale);\n      runtimeLocale = generateLocale();\n    };\n  }\n\n  runtimeLocale = Object.assign({}, defaultLocale.Modal);\n}\nexport function getConfirmLocale() {\n  return runtimeLocale;\n}","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/antd/es/modal/locale.js"],"names":["defaultLocale","runtimeLocale","Object","assign","Modal","localeList","generateLocale","reduce","merged","locale","changeConfirmLocale","newLocale","cloneLocale","push","filter","getConfirmLocale"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,IAAIC,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,aAAa,CAACI,KAAhC,CAApB;AACA,IAAIC,UAAU,GAAG,EAAjB;;AACA,MAAMC,cAAc,GAAG,MAAMD,UAAU,CAACE,MAAX,CAAkB,CAACC,MAAD,EAASC,MAAT,KAAoBP,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBK,MAAlB,CAAd,EAAyCC,MAAzC,CAAtC,EAAwFT,aAAa,CAACI,KAAtG,CAA7B;;AACA,OAAO,SAASM,mBAAT,CAA6BC,SAA7B,EAAwC;AAC7C,MAAIA,SAAJ,EAAe;AACb,UAAMC,WAAW,GAAGV,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBQ,SAAlB,CAApB;AACAN,IAAAA,UAAU,CAACQ,IAAX,CAAgBD,WAAhB;AACAX,IAAAA,aAAa,GAAGK,cAAc,EAA9B;AACA,WAAO,MAAM;AACXD,MAAAA,UAAU,GAAGA,UAAU,CAACS,MAAX,CAAkBL,MAAM,IAAIA,MAAM,KAAKG,WAAvC,CAAb;AACAX,MAAAA,aAAa,GAAGK,cAAc,EAA9B;AACD,KAHD;AAID;;AACDL,EAAAA,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,aAAa,CAACI,KAAhC,CAAhB;AACD;AACD,OAAO,SAASW,gBAAT,GAA4B;AACjC,SAAOd,aAAP;AACD","sourcesContent":["import defaultLocale from '../locale/en_US';\nlet runtimeLocale = Object.assign({}, defaultLocale.Modal);\nlet localeList = [];\nconst generateLocale = () => localeList.reduce((merged, locale) => Object.assign(Object.assign({}, merged), locale), defaultLocale.Modal);\nexport function changeConfirmLocale(newLocale) {\n  if (newLocale) {\n    const cloneLocale = Object.assign({}, newLocale);\n    localeList.push(cloneLocale);\n    runtimeLocale = generateLocale();\n    return () => {\n      localeList = localeList.filter(locale => locale !== cloneLocale);\n      runtimeLocale = generateLocale();\n    };\n  }\n  runtimeLocale = Object.assign({}, defaultLocale.Modal);\n}\nexport function getConfirmLocale() {\n  return runtimeLocale;\n}"]},"metadata":{},"sourceType":"module"}