{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport * as React from 'react';\nimport { toPathKeys } from \"../utils/commonUtil\";\nexport default function useValues(multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues) {\n  // Fill `rawValues` with checked conduction values\n  return React.useMemo(function () {\n    var _getMissingValues = getMissingValues(rawValues),\n        _getMissingValues2 = _slicedToArray(_getMissingValues, 2),\n        existValues = _getMissingValues2[0],\n        missingValues = _getMissingValues2[1];\n\n    if (!multiple || !rawValues.length) {\n      return [existValues, [], missingValues];\n    }\n\n    var keyPathValues = toPathKeys(existValues);\n    var keyPathEntities = getPathKeyEntities();\n\n    var _conductCheck = conductCheck(keyPathValues, true, keyPathEntities),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys; // Convert key back to value cells\n\n\n    return [getValueByKeyPath(checkedKeys), getValueByKeyPath(halfCheckedKeys), missingValues];\n  }, [multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues]);\n}","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/rc-cascader/es/hooks/useValues.js"],"names":["_slicedToArray","conductCheck","React","toPathKeys","useValues","multiple","rawValues","getPathKeyEntities","getValueByKeyPath","getMissingValues","useMemo","_getMissingValues","_getMissingValues2","existValues","missingValues","length","keyPathValues","keyPathEntities","_conductCheck","checkedKeys","halfCheckedKeys"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,eAAe,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,SAA7B,EAAwCC,kBAAxC,EAA4DC,iBAA5D,EAA+EC,gBAA/E,EAAiG;AAC9G;AACA,SAAOP,KAAK,CAACQ,OAAN,CAAc,YAAY;AAC/B,QAAIC,iBAAiB,GAAGF,gBAAgB,CAACH,SAAD,CAAxC;AAAA,QACEM,kBAAkB,GAAGZ,cAAc,CAACW,iBAAD,EAAoB,CAApB,CADrC;AAAA,QAEEE,WAAW,GAAGD,kBAAkB,CAAC,CAAD,CAFlC;AAAA,QAGEE,aAAa,GAAGF,kBAAkB,CAAC,CAAD,CAHpC;;AAIA,QAAI,CAACP,QAAD,IAAa,CAACC,SAAS,CAACS,MAA5B,EAAoC;AAClC,aAAO,CAACF,WAAD,EAAc,EAAd,EAAkBC,aAAlB,CAAP;AACD;;AACD,QAAIE,aAAa,GAAGb,UAAU,CAACU,WAAD,CAA9B;AACA,QAAII,eAAe,GAAGV,kBAAkB,EAAxC;;AACA,QAAIW,aAAa,GAAGjB,YAAY,CAACe,aAAD,EAAgB,IAAhB,EAAsBC,eAAtB,CAAhC;AAAA,QACEE,WAAW,GAAGD,aAAa,CAACC,WAD9B;AAAA,QAEEC,eAAe,GAAGF,aAAa,CAACE,eAFlC,CAV+B,CAc/B;;;AACA,WAAO,CAACZ,iBAAiB,CAACW,WAAD,CAAlB,EAAiCX,iBAAiB,CAACY,eAAD,CAAlD,EAAqEN,aAArE,CAAP;AACD,GAhBM,EAgBJ,CAACT,QAAD,EAAWC,SAAX,EAAsBC,kBAAtB,EAA0CC,iBAA1C,EAA6DC,gBAA7D,CAhBI,CAAP;AAiBD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport * as React from 'react';\nimport { toPathKeys } from \"../utils/commonUtil\";\nexport default function useValues(multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues) {\n  // Fill `rawValues` with checked conduction values\n  return React.useMemo(function () {\n    var _getMissingValues = getMissingValues(rawValues),\n      _getMissingValues2 = _slicedToArray(_getMissingValues, 2),\n      existValues = _getMissingValues2[0],\n      missingValues = _getMissingValues2[1];\n    if (!multiple || !rawValues.length) {\n      return [existValues, [], missingValues];\n    }\n    var keyPathValues = toPathKeys(existValues);\n    var keyPathEntities = getPathKeyEntities();\n    var _conductCheck = conductCheck(keyPathValues, true, keyPathEntities),\n      checkedKeys = _conductCheck.checkedKeys,\n      halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n    // Convert key back to value cells\n    return [getValueByKeyPath(checkedKeys), getValueByKeyPath(halfCheckedKeys), missingValues];\n  }, [multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues]);\n}"]},"metadata":{},"sourceType":"module"}