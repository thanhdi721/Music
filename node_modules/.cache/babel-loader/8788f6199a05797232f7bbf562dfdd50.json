{"ast":null,"code":"import * as React from 'react';\nimport rcWarning, { resetWarned as rcResetWarned } from \"rc-util/es/warning\";\nexport function noop() {}\nlet deprecatedWarnList = null;\nexport function resetWarned() {\n  deprecatedWarnList = null;\n  rcResetWarned();\n} // eslint-disable-next-line import/no-mutable-exports\n\nlet warning = noop;\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = (valid, component, message) => {\n    rcWarning(valid, `[antd: ${component}] ${message}`); // StrictMode will inject console which will not throw warning in React 17.\n\n    if (process.env.NODE_ENV === 'test') {\n      resetWarned();\n    }\n  };\n}\n\nexport const WarningContext = /*#__PURE__*/React.createContext({});\n/**\n * This is a hook but we not named as `useWarning`\n * since this is only used in development.\n * We should always wrap this in `if (process.env.NODE_ENV !== 'production')` condition\n */\n\nexport const devUseWarning = process.env.NODE_ENV !== 'production' ? component => {\n  const {\n    strict\n  } = React.useContext(WarningContext);\n\n  const typeWarning = (valid, type, message) => {\n    if (!valid) {\n      if (strict === false && type === 'deprecated') {\n        const existWarning = deprecatedWarnList;\n\n        if (!deprecatedWarnList) {\n          deprecatedWarnList = {};\n        }\n\n        deprecatedWarnList[component] = deprecatedWarnList[component] || [];\n\n        if (!deprecatedWarnList[component].includes(message || '')) {\n          deprecatedWarnList[component].push(message || '');\n        } // Warning for the first time\n\n\n        if (!existWarning) {\n          // eslint-disable-next-line no-console\n          console.warn('[antd] There exists deprecated usage in your code:', deprecatedWarnList);\n        }\n      } else {\n        process.env.NODE_ENV !== \"production\" ? warning(valid, component, message) : void 0;\n      }\n    }\n  };\n\n  typeWarning.deprecated = (valid, oldProp, newProp, message) => {\n    typeWarning(valid, 'deprecated', `\\`${oldProp}\\` is deprecated. Please use \\`${newProp}\\` instead.${message ? ` ${message}` : ''}`);\n  };\n\n  return typeWarning;\n} : () => {\n  const noopWarning = () => {};\n\n  noopWarning.deprecated = noop;\n  return noopWarning;\n};\nexport default warning;","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/antd/es/_util/warning.js"],"names":["React","rcWarning","resetWarned","rcResetWarned","noop","deprecatedWarnList","warning","process","env","NODE_ENV","valid","component","message","WarningContext","createContext","devUseWarning","strict","useContext","typeWarning","type","existWarning","includes","push","console","warn","deprecated","oldProp","newProp","noopWarning"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,IAAoBC,WAAW,IAAIC,aAAnC,QAAwD,oBAAxD;AACA,OAAO,SAASC,IAAT,GAAgB,CAAE;AACzB,IAAIC,kBAAkB,GAAG,IAAzB;AACA,OAAO,SAASH,WAAT,GAAuB;AAC5BG,EAAAA,kBAAkB,GAAG,IAArB;AACAF,EAAAA,aAAa;AACd,C,CACD;;AACA,IAAIG,OAAO,GAAGF,IAAd;;AACA,IAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCH,EAAAA,OAAO,GAAG,CAACI,KAAD,EAAQC,SAAR,EAAmBC,OAAnB,KAA+B;AACvCX,IAAAA,SAAS,CAACS,KAAD,EAAS,UAASC,SAAU,KAAIC,OAAQ,EAAxC,CAAT,CADuC,CAEvC;;AACA,QAAIL,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnCP,MAAAA,WAAW;AACZ;AACF,GAND;AAOD;;AACD,OAAO,MAAMW,cAAc,GAAG,aAAab,KAAK,CAACc,aAAN,CAAoB,EAApB,CAApC;AACP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAGR,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCE,SAAS,IAAI;AAChF,QAAM;AACJK,IAAAA;AADI,MAEFhB,KAAK,CAACiB,UAAN,CAAiBJ,cAAjB,CAFJ;;AAGA,QAAMK,WAAW,GAAG,CAACR,KAAD,EAAQS,IAAR,EAAcP,OAAd,KAA0B;AAC5C,QAAI,CAACF,KAAL,EAAY;AACV,UAAIM,MAAM,KAAK,KAAX,IAAoBG,IAAI,KAAK,YAAjC,EAA+C;AAC7C,cAAMC,YAAY,GAAGf,kBAArB;;AACA,YAAI,CAACA,kBAAL,EAAyB;AACvBA,UAAAA,kBAAkB,GAAG,EAArB;AACD;;AACDA,QAAAA,kBAAkB,CAACM,SAAD,CAAlB,GAAgCN,kBAAkB,CAACM,SAAD,CAAlB,IAAiC,EAAjE;;AACA,YAAI,CAACN,kBAAkB,CAACM,SAAD,CAAlB,CAA8BU,QAA9B,CAAuCT,OAAO,IAAI,EAAlD,CAAL,EAA4D;AAC1DP,UAAAA,kBAAkB,CAACM,SAAD,CAAlB,CAA8BW,IAA9B,CAAmCV,OAAO,IAAI,EAA9C;AACD,SAR4C,CAS7C;;;AACA,YAAI,CAACQ,YAAL,EAAmB;AACjB;AACAG,UAAAA,OAAO,CAACC,IAAR,CAAa,oDAAb,EAAmEnB,kBAAnE;AACD;AACF,OAdD,MAcO;AACLE,QAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCH,OAAO,CAACI,KAAD,EAAQC,SAAR,EAAmBC,OAAnB,CAA/C,GAA6E,KAAK,CAAlF;AACD;AACF;AACF,GApBD;;AAqBAM,EAAAA,WAAW,CAACO,UAAZ,GAAyB,CAACf,KAAD,EAAQgB,OAAR,EAAiBC,OAAjB,EAA0Bf,OAA1B,KAAsC;AAC7DM,IAAAA,WAAW,CAACR,KAAD,EAAQ,YAAR,EAAuB,KAAIgB,OAAQ,kCAAiCC,OAAQ,cAAaf,OAAO,GAAI,IAAGA,OAAQ,EAAf,GAAmB,EAAG,EAAtH,CAAX;AACD,GAFD;;AAGA,SAAOM,WAAP;AACD,CA7B4B,GA6BzB,MAAM;AACR,QAAMU,WAAW,GAAG,MAAM,CAAE,CAA5B;;AACAA,EAAAA,WAAW,CAACH,UAAZ,GAAyBrB,IAAzB;AACA,SAAOwB,WAAP;AACD,CAjCM;AAkCP,eAAetB,OAAf","sourcesContent":["import * as React from 'react';\nimport rcWarning, { resetWarned as rcResetWarned } from \"rc-util/es/warning\";\nexport function noop() {}\nlet deprecatedWarnList = null;\nexport function resetWarned() {\n  deprecatedWarnList = null;\n  rcResetWarned();\n}\n// eslint-disable-next-line import/no-mutable-exports\nlet warning = noop;\nif (process.env.NODE_ENV !== 'production') {\n  warning = (valid, component, message) => {\n    rcWarning(valid, `[antd: ${component}] ${message}`);\n    // StrictMode will inject console which will not throw warning in React 17.\n    if (process.env.NODE_ENV === 'test') {\n      resetWarned();\n    }\n  };\n}\nexport const WarningContext = /*#__PURE__*/React.createContext({});\n/**\n * This is a hook but we not named as `useWarning`\n * since this is only used in development.\n * We should always wrap this in `if (process.env.NODE_ENV !== 'production')` condition\n */\nexport const devUseWarning = process.env.NODE_ENV !== 'production' ? component => {\n  const {\n    strict\n  } = React.useContext(WarningContext);\n  const typeWarning = (valid, type, message) => {\n    if (!valid) {\n      if (strict === false && type === 'deprecated') {\n        const existWarning = deprecatedWarnList;\n        if (!deprecatedWarnList) {\n          deprecatedWarnList = {};\n        }\n        deprecatedWarnList[component] = deprecatedWarnList[component] || [];\n        if (!deprecatedWarnList[component].includes(message || '')) {\n          deprecatedWarnList[component].push(message || '');\n        }\n        // Warning for the first time\n        if (!existWarning) {\n          // eslint-disable-next-line no-console\n          console.warn('[antd] There exists deprecated usage in your code:', deprecatedWarnList);\n        }\n      } else {\n        process.env.NODE_ENV !== \"production\" ? warning(valid, component, message) : void 0;\n      }\n    }\n  };\n  typeWarning.deprecated = (valid, oldProp, newProp, message) => {\n    typeWarning(valid, 'deprecated', `\\`${oldProp}\\` is deprecated. Please use \\`${newProp}\\` instead.${message ? ` ${message}` : ''}`);\n  };\n  return typeWarning;\n} : () => {\n  const noopWarning = () => {};\n  noopWarning.deprecated = noop;\n  return noopWarning;\n};\nexport default warning;"]},"metadata":{},"sourceType":"module"}