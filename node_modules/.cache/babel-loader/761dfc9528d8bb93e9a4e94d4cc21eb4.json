{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport useEvent from \"rc-util/es/hooks/useEvent\";\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport { useMemo, useState } from 'react';\nimport { isInViewPort } from \"../util\";\nexport default function useTarget(target, open, gap, scrollIntoViewOptions) {\n  // ========================= Target =========================\n  // We trade `undefined` as not get target by function yet.\n  // `null` as empty target.\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      targetElement = _useState2[0],\n      setTargetElement = _useState2[1];\n\n  useLayoutEffect(function () {\n    var nextElement = typeof target === 'function' ? target() : target;\n    setTargetElement(nextElement || null);\n  }); // ========================= Align ==========================\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      posInfo = _useState4[0],\n      setPosInfo = _useState4[1];\n\n  var updatePos = useEvent(function () {\n    if (targetElement) {\n      // Exist target element. We should scroll and get target position\n      if (!isInViewPort(targetElement) && open) {\n        targetElement.scrollIntoView(scrollIntoViewOptions);\n      }\n\n      var _targetElement$getBou = targetElement.getBoundingClientRect(),\n          left = _targetElement$getBou.left,\n          top = _targetElement$getBou.top,\n          width = _targetElement$getBou.width,\n          height = _targetElement$getBou.height;\n\n      var nextPosInfo = {\n        left: left,\n        top: top,\n        width: width,\n        height: height,\n        radius: 0\n      };\n      setPosInfo(function (origin) {\n        if (JSON.stringify(origin) !== JSON.stringify(nextPosInfo)) {\n          return nextPosInfo;\n        }\n\n        return origin;\n      });\n    } else {\n      // Not exist target which means we just show in center\n      setPosInfo(null);\n    }\n  });\n\n  var getGapOffset = function getGapOffset(index) {\n    var _ref;\n\n    return (_ref = Array.isArray(gap === null || gap === void 0 ? void 0 : gap.offset) ? gap === null || gap === void 0 ? void 0 : gap.offset[index] : gap === null || gap === void 0 ? void 0 : gap.offset) !== null && _ref !== void 0 ? _ref : 6;\n  };\n\n  useLayoutEffect(function () {\n    updatePos(); // update when window resize\n\n    window.addEventListener('resize', updatePos);\n    return function () {\n      window.removeEventListener('resize', updatePos);\n    };\n  }, [targetElement, open, updatePos]); // ======================== PosInfo =========================\n\n  var mergedPosInfo = useMemo(function () {\n    if (!posInfo) {\n      return posInfo;\n    }\n\n    var gapOffsetX = getGapOffset(0);\n    var gapOffsetY = getGapOffset(1);\n    var gapRadius = (gap === null || gap === void 0 ? void 0 : gap.radius) || 2;\n    return {\n      left: posInfo.left - gapOffsetX,\n      top: posInfo.top - gapOffsetY,\n      width: posInfo.width + gapOffsetX * 2,\n      height: posInfo.height + gapOffsetY * 2,\n      radius: gapRadius\n    };\n  }, [posInfo, gap]);\n  return [mergedPosInfo, targetElement];\n}","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/@rc-component/tour/es/hooks/useTarget.js"],"names":["_slicedToArray","useEvent","useLayoutEffect","useMemo","useState","isInViewPort","useTarget","target","open","gap","scrollIntoViewOptions","_useState","undefined","_useState2","targetElement","setTargetElement","nextElement","_useState3","_useState4","posInfo","setPosInfo","updatePos","scrollIntoView","_targetElement$getBou","getBoundingClientRect","left","top","width","height","nextPosInfo","radius","origin","JSON","stringify","getGapOffset","index","_ref","Array","isArray","offset","window","addEventListener","removeEventListener","mergedPosInfo","gapOffsetX","gapOffsetY","gapRadius"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport useEvent from \"rc-util/es/hooks/useEvent\";\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport { useMemo, useState } from 'react';\nimport { isInViewPort } from \"../util\";\nexport default function useTarget(target, open, gap, scrollIntoViewOptions) {\n  // ========================= Target =========================\n  // We trade `undefined` as not get target by function yet.\n  // `null` as empty target.\n  var _useState = useState(undefined),\n    _useState2 = _slicedToArray(_useState, 2),\n    targetElement = _useState2[0],\n    setTargetElement = _useState2[1];\n  useLayoutEffect(function () {\n    var nextElement = typeof target === 'function' ? target() : target;\n    setTargetElement(nextElement || null);\n  });\n\n  // ========================= Align ==========================\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    posInfo = _useState4[0],\n    setPosInfo = _useState4[1];\n  var updatePos = useEvent(function () {\n    if (targetElement) {\n      // Exist target element. We should scroll and get target position\n      if (!isInViewPort(targetElement) && open) {\n        targetElement.scrollIntoView(scrollIntoViewOptions);\n      }\n      var _targetElement$getBou = targetElement.getBoundingClientRect(),\n        left = _targetElement$getBou.left,\n        top = _targetElement$getBou.top,\n        width = _targetElement$getBou.width,\n        height = _targetElement$getBou.height;\n      var nextPosInfo = {\n        left: left,\n        top: top,\n        width: width,\n        height: height,\n        radius: 0\n      };\n      setPosInfo(function (origin) {\n        if (JSON.stringify(origin) !== JSON.stringify(nextPosInfo)) {\n          return nextPosInfo;\n        }\n        return origin;\n      });\n    } else {\n      // Not exist target which means we just show in center\n      setPosInfo(null);\n    }\n  });\n  var getGapOffset = function getGapOffset(index) {\n    var _ref;\n    return (_ref = Array.isArray(gap === null || gap === void 0 ? void 0 : gap.offset) ? gap === null || gap === void 0 ? void 0 : gap.offset[index] : gap === null || gap === void 0 ? void 0 : gap.offset) !== null && _ref !== void 0 ? _ref : 6;\n  };\n  useLayoutEffect(function () {\n    updatePos();\n    // update when window resize\n    window.addEventListener('resize', updatePos);\n    return function () {\n      window.removeEventListener('resize', updatePos);\n    };\n  }, [targetElement, open, updatePos]);\n\n  // ======================== PosInfo =========================\n  var mergedPosInfo = useMemo(function () {\n    if (!posInfo) {\n      return posInfo;\n    }\n    var gapOffsetX = getGapOffset(0);\n    var gapOffsetY = getGapOffset(1);\n    var gapRadius = (gap === null || gap === void 0 ? void 0 : gap.radius) || 2;\n    return {\n      left: posInfo.left - gapOffsetX,\n      top: posInfo.top - gapOffsetY,\n      width: posInfo.width + gapOffsetX * 2,\n      height: posInfo.height + gapOffsetY * 2,\n      radius: gapRadius\n    };\n  }, [posInfo, gap]);\n  return [mergedPosInfo, targetElement];\n}"]},"metadata":{},"sourceType":"module"}