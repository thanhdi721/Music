{"ast":null,"code":"var _jsxFileName = \"D:\\\\WED\\\\SpotifyProject-master\\\\src\\\\components\\\\DetailSong.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [allMusic, setAllMusic] = useState([]); // Đảm bảo allMusic đã được định nghĩa trước đó\n\n  useEffect(() => {\n    // Khai báo các biến và trạng thái bạn cần theo dõi ở đây\n    const wrapper = document.querySelector(\".wrapper\");\n    const mainAudio = wrapper.querySelector(\"#main-audio\"); // Xử lý sự kiện load, giống như componentDidMount\n\n    window.addEventListener(\"load\", () => {\n      loadMusic(musicIndex);\n      playingSong();\n    }); // Xử lý sự kiện khi bài hát kết thúc\n\n    mainAudio.addEventListener(\"ended\", () => {\n      let getText = repeatBtn.innerText;\n\n      switch (getText) {\n        case \"repeat\":\n          nextMusic();\n          break;\n\n        case \"repeat_one\":\n          mainAudio.currentTime = 0;\n          loadMusic(musicIndex);\n          playMusic();\n          break;\n\n        case \"shuffle\":\n          let randIndex = Math.floor(Math.random() * allMusic.length + 1);\n\n          do {\n            randIndex = Math.floor(Math.random() * allMusic.length + 1);\n          } while (musicIndex == randIndex);\n\n          musicIndex = randIndex;\n          loadMusic(musicIndex);\n          playMusic();\n          playingSong();\n          break;\n      }\n    }); // Hàm play hoặc pause\n\n    const togglePlayPause = () => {\n      const isMusicPlay = wrapper.classList.contains(\"paused\");\n      isMusicPlay ? pauseMusic() : playMusic();\n      playingSong();\n    }; // Hàm prev bài hát\n\n\n    const prevMusic = () => {\n      musicIndex--;\n      musicIndex < 1 ? musicIndex = allMusic.length : musicIndex = musicIndex;\n      loadMusic(musicIndex);\n      playMusic();\n      playingSong();\n    }; // Hàm next bài hát\n\n\n    const nextMusic = () => {\n      musicIndex++;\n      musicIndex > allMusic.length ? musicIndex = 1 : musicIndex = musicIndex;\n      loadMusic(musicIndex);\n      playMusic();\n      playingSong();\n    }; // Hàm cập nhật thanh tiến độ theo thời gian hiện tại của bài hát\n\n\n    mainAudio.addEventListener(\"timeupdate\", e => {\n      const currentTime = e.target.currentTime;\n      const duration = e.target.duration;\n      let progressWidth = currentTime / duration * 100;\n      progressBar.style.width = `${progressWidth}%`;\n      let musicCurrentTime = wrapper.querySelector(\".current-time\"),\n          musicDuartion = wrapper.querySelector(\".max-duration\");\n      mainAudio.addEventListener(\"loadeddata\", () => {\n        let mainAdDuration = mainAudio.duration;\n        let totalMin = Math.floor(mainAdDuration / 60);\n        let totalSec = Math.floor(mainAdDuration % 60);\n\n        if (totalSec < 10) {\n          totalSec = `0${totalSec}`;\n        }\n\n        musicDuartion.innerText = `${totalMin}:${totalSec}`;\n      });\n      let currentMin = Math.floor(currentTime / 60);\n      let currentSec = Math.floor(currentTime % 60);\n\n      if (currentSec < 10) {\n        currentSec = `0${currentSec}`;\n      }\n\n      musicCurrentTime.innerText = `${currentMin}:${currentSec}`;\n    }); // Cập nhật thời gian hiện tại khi click vào thanh tiến độ\n\n    progressArea.addEventListener(\"click\", e => {\n      let progressWidth = progressArea.clientWidth;\n      let clickedOffsetX = e.offsetX;\n      let songDuration = mainAudio.duration;\n      mainAudio.currentTime = clickedOffsetX / progressWidth * songDuration;\n      playMusic();\n      playingSong();\n    }); // Thay đổi icon repeat khi click\n\n    repeatBtn.addEventListener(\"click\", () => {\n      let getText = repeatBtn.innerText;\n\n      switch (getText) {\n        case \"repeat\":\n          repeatBtn.innerText = \"repeat_one\";\n          repeatBtn.setAttribute(\"title\", \"Song looped\");\n          break;\n\n        case \"repeat_one\":\n          repeatBtn.innerText = \"shuffle\";\n          repeatBtn.setAttribute(\"title\", \"Playback shuffled\");\n          break;\n\n        case \"shuffle\":\n          repeatBtn.innerText = \"repeat\";\n          repeatBtn.setAttribute(\"title\", \"Playlist looped\");\n          break;\n      }\n    }); // Xử lý sự kiện click trên icon music để hiển thị danh sách bài hát\n\n    moreMusicBtn.addEventListener(\"click\", () => {\n      musicList.classList.toggle(\"show\");\n    }); // Xử lý sự kiện click để đóng danh sách bài hát\n\n    closemoreMusic.addEventListener(\"click\", () => {\n      moreMusicBtn.click();\n    }); // Tạo các thẻ li tương ứng với mỗi bài hát\n\n    const ulTag = wrapper.querySelector(\"ul\");\n\n    for (let i = 0; i < allMusic.length; i++) {\n      let liTag = `<li li-index=\"${i + 1}\">\n                    <div class=\"row\">\n                      <span>${allMusic[i].name}</span>\n                      <p>${allMusic[i].artist}</p>\n                    </div>\n                    <span id=\"${allMusic[i].src}\" class=\"audio-duration\">3:40</span>\n                    <audio class=\"${allMusic[i].src}\" src=\"songs/${allMusic[i].src}.mp3\"></audio>\n                  </li>`;\n      ulTag.insertAdjacentHTML(\"beforeend\", liTag);\n      let liAudioDuartionTag = ulTag.querySelector(`#${allMusic[i].src}`);\n      let liAudioTag = ulTag.querySelector(`.${allMusic[i].src}`);\n      liAudioTag.addEventListener(\"loadeddata\", () => {\n        let duration = liAudioTag.duration;\n        let totalMin = Math.floor(duration / 60);\n        let totalSec = Math.floor(duration % 60);\n\n        if (totalSec < 10) {\n          totalSec = `0${totalSec}`;\n        }\n\n        liAudioDuartionTag.innerText = `${totalMin}:${totalSec}`;\n        liAudioDuartionTag.setAttribute(\"t-duration\", `${totalMin}:${totalSec}`);\n      });\n    }\n  }, [allMusic]); // Sử dụng mảng phụ thuộc để chỉ thực thi lại hiệu ứng khi allMusic thay đổi\n  // Hàm chơi nhạc\n\n  const playMusic = () => {\n    wrapper.classList.add(\"paused\");\n    playPauseBtn.querySelector(\"i\").innerText = \"pause\";\n    mainAudio.play();\n  }; // Hàm tạm dừng nhạc\n\n\n  const pauseMusic = () => {\n    wrapper.classList.remove(\"paused\");\n    playPauseBtn.querySelector(\"i\").innerText = \"play_arrow\";\n    mainAudio.pause();\n  }; // Hàm tải bài hát\n\n\n  const loadMusic = indexNumb => {\n    musicName.innerText = allMusic[indexNumb - 1].name;\n    musicArtist.innerText = allMusic[indexNumb - 1].artist;\n    musicImg.src = `images/${allMusic[indexNumb - 1].src}.jpg`;\n    mainAudio.src = `songs/${allMusic[indexNumb - 1].src}.mp3`;\n  }; // Hàm hiển thị bài hát đang phát\n\n\n  const playingSong = () => {\n    const allLiTag = document.querySelectorAll(\".wrapper ul li\");\n\n    for (let j = 0; j < allLiTag.length; j++) {\n      let audioTag = allLiTag[j].querySelector(\".audio-duration\");\n\n      if (allLiTag[j].classList.contains(\"playing\")) {\n        allLiTag[j].classList.remove(\"playing\");\n        let adDuration = audioTag.getAttribute(\"t-duration\");\n        audioTag.innerText = adDuration;\n      }\n\n      if (allLiTag[j].getAttribute(\"li-index\") == musicIndex) {\n        allLiTag[j].classList.add(\"playing\");\n        audioTag.innerText = \"Playing\";\n      }\n\n      allLiTag[j].setAttribute(\"onclick\", \"clicked(this)\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"rQh0VuqlJEavggC3YwV9MMQCaME=\");\n\n_c = App;\nexport default App;\n\n/*#__PURE__*/\n_jsxDEV(\"div\", {\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        span: 6,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"w-[60px] rounded-full\",\n          src: song.links.images[1].url,\n          alt: \"avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        span: 18,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-neutral-400 text-2xl\",\n          children: song.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-xl text-white\",\n          children: song.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"img-area\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: song.links.images[0].url,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Playing, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 7\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 209,\n  columnNumber: 3\n}, this);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/src/components/DetailSong.js"],"names":["React","useState","useEffect","App","allMusic","setAllMusic","wrapper","document","querySelector","mainAudio","window","addEventListener","loadMusic","musicIndex","playingSong","getText","repeatBtn","innerText","nextMusic","currentTime","playMusic","randIndex","Math","floor","random","length","togglePlayPause","isMusicPlay","classList","contains","pauseMusic","prevMusic","e","target","duration","progressWidth","progressBar","style","width","musicCurrentTime","musicDuartion","mainAdDuration","totalMin","totalSec","currentMin","currentSec","progressArea","clientWidth","clickedOffsetX","offsetX","songDuration","setAttribute","moreMusicBtn","musicList","toggle","closemoreMusic","click","ulTag","i","liTag","name","artist","src","insertAdjacentHTML","liAudioDuartionTag","liAudioTag","add","playPauseBtn","play","remove","pause","indexNumb","musicName","musicArtist","musicImg","allLiTag","querySelectorAll","j","audioTag","adDuration","getAttribute","song","links","images","url","author"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [allMusic, setAllMusic] = useState([]); // Đảm bảo allMusic đã được định nghĩa trước đó\n\n  useEffect(() => {\n    // Khai báo các biến và trạng thái bạn cần theo dõi ở đây\n    const wrapper = document.querySelector(\".wrapper\");\n    const mainAudio = wrapper.querySelector(\"#main-audio\");\n\n    // Xử lý sự kiện load, giống như componentDidMount\n    window.addEventListener(\"load\", () => {\n      loadMusic(musicIndex);\n      playingSong();\n    });\n\n    // Xử lý sự kiện khi bài hát kết thúc\n    mainAudio.addEventListener(\"ended\", () => {\n      let getText = repeatBtn.innerText;\n      switch (getText) {\n        case \"repeat\":\n          nextMusic();\n          break;\n        case \"repeat_one\":\n          mainAudio.currentTime = 0;\n          loadMusic(musicIndex);\n          playMusic();\n          break;\n        case \"shuffle\":\n          let randIndex = Math.floor(Math.random() * allMusic.length + 1);\n          do {\n            randIndex = Math.floor(Math.random() * allMusic.length + 1);\n          } while (musicIndex == randIndex);\n          musicIndex = randIndex;\n          loadMusic(musicIndex);\n          playMusic();\n          playingSong();\n          break;\n      }\n    });\n\n    // Hàm play hoặc pause\n    const togglePlayPause = () => {\n      const isMusicPlay = wrapper.classList.contains(\"paused\");\n      isMusicPlay ? pauseMusic() : playMusic();\n      playingSong();\n    };\n\n    // Hàm prev bài hát\n    const prevMusic = () => {\n      musicIndex--;\n      musicIndex < 1 ? (musicIndex = allMusic.length) : (musicIndex = musicIndex);\n      loadMusic(musicIndex);\n      playMusic();\n      playingSong();\n    };\n\n    // Hàm next bài hát\n    const nextMusic = () => {\n      musicIndex++;\n      musicIndex > allMusic.length ? (musicIndex = 1) : (musicIndex = musicIndex);\n      loadMusic(musicIndex);\n      playMusic();\n      playingSong();\n    };\n\n    // Hàm cập nhật thanh tiến độ theo thời gian hiện tại của bài hát\n    mainAudio.addEventListener(\"timeupdate\", (e) => {\n      const currentTime = e.target.currentTime;\n      const duration = e.target.duration;\n      let progressWidth = (currentTime / duration) * 100;\n      progressBar.style.width = `${progressWidth}%`;\n\n      let musicCurrentTime = wrapper.querySelector(\".current-time\"),\n        musicDuartion = wrapper.querySelector(\".max-duration\");\n      mainAudio.addEventListener(\"loadeddata\", () => {\n        let mainAdDuration = mainAudio.duration;\n        let totalMin = Math.floor(mainAdDuration / 60);\n        let totalSec = Math.floor(mainAdDuration % 60);\n        if (totalSec < 10) {\n          totalSec = `0${totalSec}`;\n        }\n        musicDuartion.innerText = `${totalMin}:${totalSec}`;\n      });\n      let currentMin = Math.floor(currentTime / 60);\n      let currentSec = Math.floor(currentTime % 60);\n      if (currentSec < 10) {\n        currentSec = `0${currentSec}`;\n      }\n      musicCurrentTime.innerText = `${currentMin}:${currentSec}`;\n    });\n\n    // Cập nhật thời gian hiện tại khi click vào thanh tiến độ\n    progressArea.addEventListener(\"click\", (e) => {\n      let progressWidth = progressArea.clientWidth;\n      let clickedOffsetX = e.offsetX;\n      let songDuration = mainAudio.duration;\n      mainAudio.currentTime = (clickedOffsetX / progressWidth) * songDuration;\n      playMusic();\n      playingSong();\n    });\n\n    // Thay đổi icon repeat khi click\n    repeatBtn.addEventListener(\"click\", () => {\n      let getText = repeatBtn.innerText;\n      switch (getText) {\n        case \"repeat\":\n          repeatBtn.innerText = \"repeat_one\";\n          repeatBtn.setAttribute(\"title\", \"Song looped\");\n          break;\n        case \"repeat_one\":\n          repeatBtn.innerText = \"shuffle\";\n          repeatBtn.setAttribute(\"title\", \"Playback shuffled\");\n          break;\n        case \"shuffle\":\n          repeatBtn.innerText = \"repeat\";\n          repeatBtn.setAttribute(\"title\", \"Playlist looped\");\n          break;\n      }\n    });\n\n    // Xử lý sự kiện click trên icon music để hiển thị danh sách bài hát\n    moreMusicBtn.addEventListener(\"click\", () => {\n      musicList.classList.toggle(\"show\");\n    });\n\n    // Xử lý sự kiện click để đóng danh sách bài hát\n    closemoreMusic.addEventListener(\"click\", () => {\n      moreMusicBtn.click();\n    });\n\n    // Tạo các thẻ li tương ứng với mỗi bài hát\n    const ulTag = wrapper.querySelector(\"ul\");\n    for (let i = 0; i < allMusic.length; i++) {\n      let liTag = `<li li-index=\"${i + 1}\">\n                    <div class=\"row\">\n                      <span>${allMusic[i].name}</span>\n                      <p>${allMusic[i].artist}</p>\n                    </div>\n                    <span id=\"${allMusic[i].src}\" class=\"audio-duration\">3:40</span>\n                    <audio class=\"${allMusic[i].src}\" src=\"songs/${allMusic[i].src}.mp3\"></audio>\n                  </li>`;\n      ulTag.insertAdjacentHTML(\"beforeend\", liTag);\n\n      let liAudioDuartionTag = ulTag.querySelector(`#${allMusic[i].src}`);\n      let liAudioTag = ulTag.querySelector(`.${allMusic[i].src}`);\n      liAudioTag.addEventListener(\"loadeddata\", () => {\n        let duration = liAudioTag.duration;\n        let totalMin = Math.floor(duration / 60);\n        let totalSec = Math.floor(duration % 60);\n        if (totalSec < 10) {\n          totalSec = `0${totalSec}`;\n        }\n        liAudioDuartionTag.innerText = `${totalMin}:${totalSec}`;\n        liAudioDuartionTag.setAttribute(\"t-duration\", `${totalMin}:${totalSec}`);\n      });\n    }\n  }, [allMusic]); // Sử dụng mảng phụ thuộc để chỉ thực thi lại hiệu ứng khi allMusic thay đổi\n\n  // Hàm chơi nhạc\n  const playMusic = () => {\n    wrapper.classList.add(\"paused\");\n    playPauseBtn.querySelector(\"i\").innerText = \"pause\";\n    mainAudio.play();\n  };\n\n  // Hàm tạm dừng nhạc\n  const pauseMusic = () => {\n    wrapper.classList.remove(\"paused\");\n    playPauseBtn.querySelector(\"i\").innerText = \"play_arrow\";\n    mainAudio.pause();\n  };\n\n  // Hàm tải bài hát\n  const loadMusic = (indexNumb) => {\n    musicName.innerText = allMusic[indexNumb - 1].name;\n    musicArtist.innerText = allMusic[indexNumb - 1].artist;\n    musicImg.src = `images/${allMusic[indexNumb - 1].src}.jpg`;\n    mainAudio.src = `songs/${allMusic[indexNumb - 1].src}.mp3`;\n  };\n\n  // Hàm hiển thị bài hát đang phát\n  const playingSong = () => {\n    const allLiTag = document.querySelectorAll(\".wrapper ul li\");\n    for (let j = 0; j < allLiTag.length; j++) {\n      let audioTag = allLiTag[j].querySelector(\".audio-duration\");\n      if (allLiTag[j].classList.contains(\"playing\")) {\n        allLiTag[j].classList.remove(\"playing\");\n        let adDuration = audioTag.getAttribute(\"t-duration\");\n        audioTag.innerText = adDuration;\n      }\n      if (allLiTag[j].getAttribute(\"li-index\") == musicIndex) {\n        allLiTag[j].classList.add(\"playing\");\n        audioTag.innerText = \"Playing\";\n      }\n      allLiTag[j].setAttribute(\"onclick\", \"clicked(this)\");\n    }\n  };\n\n  return (\n    <div>\n      {/* Your JSX here */}\n    </div>\n  );\n}\n\nexport default App;\n\n  <div>\n      <div class=\"wrapper\">\n        <Row>\n          <Col span={6}>\n            <img\n              className=\"w-[60px] rounded-full\"\n              src={song.links.images[1].url}\n              alt=\"avatar\"\n            />\n          </Col>\n          <Col span={18}>\n            <h2 className=\"text-neutral-400 text-2xl\">{song.name}</h2>\n            <span className=\"text-xl text-white\">{song.author}</span>\n          </Col>\n        </Row>\n\n        <div class=\"img-area\">\n          <img src={song.links.images[0].url} alt=\"\" />\n        </div>\n        <Playing />\n      </div>\n    </div>"]},"metadata":{},"sourceType":"module"}