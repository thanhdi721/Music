{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport { useEvent, useMergedState } from 'rc-util';\nimport * as React from 'react';\nimport CascaderContext from \"./context\";\nimport useMissingValues from \"./hooks/useMissingValues\";\nimport useOptions from \"./hooks/useOptions\";\nimport useSelect from \"./hooks/useSelect\";\nimport useValues from \"./hooks/useValues\";\nimport RawOptionList from \"./OptionList/List\";\nimport { fillFieldNames, toRawValues } from \"./utils/commonUtil\";\nimport { toPathOptions } from \"./utils/treeUtil\";\n\nfunction noop() {}\n\nexport default function Panel(props) {\n  var _classNames;\n\n  var _ref = props,\n      _ref$prefixCls = _ref.prefixCls,\n      prefixCls = _ref$prefixCls === void 0 ? 'rc-cascader' : _ref$prefixCls,\n      style = _ref.style,\n      className = _ref.className,\n      options = _ref.options,\n      checkable = _ref.checkable,\n      defaultValue = _ref.defaultValue,\n      value = _ref.value,\n      fieldNames = _ref.fieldNames,\n      changeOnSelect = _ref.changeOnSelect,\n      onChange = _ref.onChange,\n      showCheckedStrategy = _ref.showCheckedStrategy,\n      loadData = _ref.loadData,\n      expandTrigger = _ref.expandTrigger,\n      _ref$expandIcon = _ref.expandIcon,\n      expandIcon = _ref$expandIcon === void 0 ? '>' : _ref$expandIcon,\n      loadingIcon = _ref.loadingIcon,\n      direction = _ref.direction,\n      _ref$notFoundContent = _ref.notFoundContent,\n      notFoundContent = _ref$notFoundContent === void 0 ? 'Not Found' : _ref$notFoundContent; // ======================== Multiple ========================\n\n  var multiple = !!checkable; // ========================= Values =========================\n\n  var _useMergedState = useMergedState(defaultValue, {\n    value: value,\n    postState: toRawValues\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      rawValues = _useMergedState2[0],\n      setRawValues = _useMergedState2[1]; // ========================= FieldNames =========================\n\n\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]\n  /* eslint-enable react-hooks/exhaustive-deps */\n  ); // =========================== Option ===========================\n\n  var _useOptions = useOptions(mergedFieldNames, options),\n      _useOptions2 = _slicedToArray(_useOptions, 3),\n      mergedOptions = _useOptions2[0],\n      getPathKeyEntities = _useOptions2[1],\n      getValueByKeyPath = _useOptions2[2]; // ========================= Values =========================\n\n\n  var getMissingValues = useMissingValues(mergedOptions, mergedFieldNames); // Fill `rawValues` with checked conduction values\n\n  var _useValues = useValues(multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues),\n      _useValues2 = _slicedToArray(_useValues, 3),\n      checkedValues = _useValues2[0],\n      halfCheckedValues = _useValues2[1],\n      missingCheckedValues = _useValues2[2]; // =========================== Change ===========================\n\n\n  var triggerChange = useEvent(function (nextValues) {\n    setRawValues(nextValues); // Save perf if no need trigger event\n\n    if (onChange) {\n      var nextRawValues = toRawValues(nextValues);\n      var valueOptions = nextRawValues.map(function (valueCells) {\n        return toPathOptions(valueCells, mergedOptions, mergedFieldNames).map(function (valueOpt) {\n          return valueOpt.option;\n        });\n      });\n      var triggerValues = multiple ? nextRawValues : nextRawValues[0];\n      var triggerOptions = multiple ? valueOptions : valueOptions[0];\n      onChange(triggerValues, triggerOptions);\n    }\n  }); // =========================== Select ===========================\n\n  var handleSelection = useSelect(multiple, triggerChange, checkedValues, halfCheckedValues, missingCheckedValues, getPathKeyEntities, getValueByKeyPath, showCheckedStrategy);\n  var onInternalSelect = useEvent(function (valuePath) {\n    handleSelection(valuePath);\n  }); // ======================== Context =========================\n\n  var cascaderContext = React.useMemo(function () {\n    return {\n      options: mergedOptions,\n      fieldNames: mergedFieldNames,\n      values: checkedValues,\n      halfValues: halfCheckedValues,\n      changeOnSelect: changeOnSelect,\n      onSelect: onInternalSelect,\n      checkable: checkable,\n      searchOptions: [],\n      dropdownPrefixCls: null,\n      loadData: loadData,\n      expandTrigger: expandTrigger,\n      expandIcon: expandIcon,\n      loadingIcon: loadingIcon,\n      dropdownMenuColumnStyle: null\n    };\n  }, [mergedOptions, mergedFieldNames, checkedValues, halfCheckedValues, changeOnSelect, onInternalSelect, checkable, loadData, expandTrigger, expandIcon, loadingIcon]); // ========================= Render =========================\n\n  var panelPrefixCls = \"\".concat(prefixCls, \"-panel\");\n  var isEmpty = !mergedOptions.length;\n  return /*#__PURE__*/React.createElement(CascaderContext.Provider, {\n    value: cascaderContext\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(panelPrefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(panelPrefixCls, \"-rtl\"), direction === 'rtl'), _defineProperty(_classNames, \"\".concat(panelPrefixCls, \"-empty\"), isEmpty), _classNames), className),\n    style: style\n  }, isEmpty ? notFoundContent : /*#__PURE__*/React.createElement(RawOptionList, {\n    prefixCls: prefixCls,\n    searchValue: null,\n    multiple: multiple,\n    toggleOpen: noop,\n    open: true,\n    direction: direction\n  })));\n}","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/rc-cascader/es/Panel.js"],"names":["_defineProperty","_slicedToArray","classNames","useEvent","useMergedState","React","CascaderContext","useMissingValues","useOptions","useSelect","useValues","RawOptionList","fillFieldNames","toRawValues","toPathOptions","noop","Panel","props","_classNames","_ref","_ref$prefixCls","prefixCls","style","className","options","checkable","defaultValue","value","fieldNames","changeOnSelect","onChange","showCheckedStrategy","loadData","expandTrigger","_ref$expandIcon","expandIcon","loadingIcon","direction","_ref$notFoundContent","notFoundContent","multiple","_useMergedState","postState","_useMergedState2","rawValues","setRawValues","mergedFieldNames","useMemo","JSON","stringify","_useOptions","_useOptions2","mergedOptions","getPathKeyEntities","getValueByKeyPath","getMissingValues","_useValues","_useValues2","checkedValues","halfCheckedValues","missingCheckedValues","triggerChange","nextValues","nextRawValues","valueOptions","map","valueCells","valueOpt","option","triggerValues","triggerOptions","handleSelection","onInternalSelect","valuePath","cascaderContext","values","halfValues","onSelect","searchOptions","dropdownPrefixCls","dropdownMenuColumnStyle","panelPrefixCls","concat","isEmpty","length","createElement","Provider","searchValue","toggleOpen","open"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport { useEvent, useMergedState } from 'rc-util';\nimport * as React from 'react';\nimport CascaderContext from \"./context\";\nimport useMissingValues from \"./hooks/useMissingValues\";\nimport useOptions from \"./hooks/useOptions\";\nimport useSelect from \"./hooks/useSelect\";\nimport useValues from \"./hooks/useValues\";\nimport RawOptionList from \"./OptionList/List\";\nimport { fillFieldNames, toRawValues } from \"./utils/commonUtil\";\nimport { toPathOptions } from \"./utils/treeUtil\";\nfunction noop() {}\nexport default function Panel(props) {\n  var _classNames;\n  var _ref = props,\n    _ref$prefixCls = _ref.prefixCls,\n    prefixCls = _ref$prefixCls === void 0 ? 'rc-cascader' : _ref$prefixCls,\n    style = _ref.style,\n    className = _ref.className,\n    options = _ref.options,\n    checkable = _ref.checkable,\n    defaultValue = _ref.defaultValue,\n    value = _ref.value,\n    fieldNames = _ref.fieldNames,\n    changeOnSelect = _ref.changeOnSelect,\n    onChange = _ref.onChange,\n    showCheckedStrategy = _ref.showCheckedStrategy,\n    loadData = _ref.loadData,\n    expandTrigger = _ref.expandTrigger,\n    _ref$expandIcon = _ref.expandIcon,\n    expandIcon = _ref$expandIcon === void 0 ? '>' : _ref$expandIcon,\n    loadingIcon = _ref.loadingIcon,\n    direction = _ref.direction,\n    _ref$notFoundContent = _ref.notFoundContent,\n    notFoundContent = _ref$notFoundContent === void 0 ? 'Not Found' : _ref$notFoundContent;\n\n  // ======================== Multiple ========================\n  var multiple = !!checkable;\n\n  // ========================= Values =========================\n  var _useMergedState = useMergedState(defaultValue, {\n      value: value,\n      postState: toRawValues\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    rawValues = _useMergedState2[0],\n    setRawValues = _useMergedState2[1];\n\n  // ========================= FieldNames =========================\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  }, /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]\n  /* eslint-enable react-hooks/exhaustive-deps */);\n\n  // =========================== Option ===========================\n  var _useOptions = useOptions(mergedFieldNames, options),\n    _useOptions2 = _slicedToArray(_useOptions, 3),\n    mergedOptions = _useOptions2[0],\n    getPathKeyEntities = _useOptions2[1],\n    getValueByKeyPath = _useOptions2[2];\n\n  // ========================= Values =========================\n  var getMissingValues = useMissingValues(mergedOptions, mergedFieldNames);\n\n  // Fill `rawValues` with checked conduction values\n  var _useValues = useValues(multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues),\n    _useValues2 = _slicedToArray(_useValues, 3),\n    checkedValues = _useValues2[0],\n    halfCheckedValues = _useValues2[1],\n    missingCheckedValues = _useValues2[2];\n\n  // =========================== Change ===========================\n  var triggerChange = useEvent(function (nextValues) {\n    setRawValues(nextValues);\n\n    // Save perf if no need trigger event\n    if (onChange) {\n      var nextRawValues = toRawValues(nextValues);\n      var valueOptions = nextRawValues.map(function (valueCells) {\n        return toPathOptions(valueCells, mergedOptions, mergedFieldNames).map(function (valueOpt) {\n          return valueOpt.option;\n        });\n      });\n      var triggerValues = multiple ? nextRawValues : nextRawValues[0];\n      var triggerOptions = multiple ? valueOptions : valueOptions[0];\n      onChange(triggerValues, triggerOptions);\n    }\n  });\n\n  // =========================== Select ===========================\n  var handleSelection = useSelect(multiple, triggerChange, checkedValues, halfCheckedValues, missingCheckedValues, getPathKeyEntities, getValueByKeyPath, showCheckedStrategy);\n  var onInternalSelect = useEvent(function (valuePath) {\n    handleSelection(valuePath);\n  });\n\n  // ======================== Context =========================\n  var cascaderContext = React.useMemo(function () {\n    return {\n      options: mergedOptions,\n      fieldNames: mergedFieldNames,\n      values: checkedValues,\n      halfValues: halfCheckedValues,\n      changeOnSelect: changeOnSelect,\n      onSelect: onInternalSelect,\n      checkable: checkable,\n      searchOptions: [],\n      dropdownPrefixCls: null,\n      loadData: loadData,\n      expandTrigger: expandTrigger,\n      expandIcon: expandIcon,\n      loadingIcon: loadingIcon,\n      dropdownMenuColumnStyle: null\n    };\n  }, [mergedOptions, mergedFieldNames, checkedValues, halfCheckedValues, changeOnSelect, onInternalSelect, checkable, loadData, expandTrigger, expandIcon, loadingIcon]);\n\n  // ========================= Render =========================\n  var panelPrefixCls = \"\".concat(prefixCls, \"-panel\");\n  var isEmpty = !mergedOptions.length;\n  return /*#__PURE__*/React.createElement(CascaderContext.Provider, {\n    value: cascaderContext\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(panelPrefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(panelPrefixCls, \"-rtl\"), direction === 'rtl'), _defineProperty(_classNames, \"\".concat(panelPrefixCls, \"-empty\"), isEmpty), _classNames), className),\n    style: style\n  }, isEmpty ? notFoundContent : /*#__PURE__*/React.createElement(RawOptionList, {\n    prefixCls: prefixCls,\n    searchValue: null,\n    multiple: multiple,\n    toggleOpen: noop,\n    open: true,\n    direction: direction\n  })));\n}"]},"metadata":{},"sourceType":"module"}