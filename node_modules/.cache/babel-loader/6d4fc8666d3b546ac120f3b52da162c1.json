{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport getValue from \"rc-util/es/utils/get\";\nimport setValue from \"rc-util/es/utils/set\";\nimport { toArray } from \"./typeUtil\";\nexport { getValue, setValue };\n/**\n * Convert name to internal supported format.\n * This function should keep since we still thinking if need support like `a.b.c` format.\n * 'a' => ['a']\n * 123 => [123]\n * ['a', 123] => ['a', 123]\n */\n\nexport function getNamePath(path) {\n  return toArray(path);\n}\nexport function cloneByNamePathList(store, namePathList) {\n  var newStore = {};\n  namePathList.forEach(function (namePath) {\n    var value = getValue(store, namePath);\n    newStore = setValue(newStore, namePath, value);\n  });\n  return newStore;\n}\n/**\n * Check if `namePathList` includes `namePath`.\n * @param namePathList A list of `InternalNamePath[]`\n * @param namePath Compare `InternalNamePath`\n * @param partialMatch True will make `[a, b]` match `[a, b, c]`\n */\n\nexport function containsNamePath(namePathList, namePath) {\n  var partialMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return namePathList && namePathList.some(function (path) {\n    return matchNamePath(namePath, path, partialMatch);\n  });\n}\n/**\n * Check if `namePath` is super set or equal of `subNamePath`.\n * @param namePath A list of `InternalNamePath[]`\n * @param subNamePath Compare `InternalNamePath`\n * @param partialMatch True will make `[a, b]` match `[a, b, c]`\n */\n\nexport function matchNamePath(namePath, subNamePath) {\n  var partialMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!namePath || !subNamePath) {\n    return false;\n  }\n\n  if (!partialMatch && namePath.length !== subNamePath.length) {\n    return false;\n  }\n\n  return subNamePath.every(function (nameUnit, i) {\n    return namePath[i] === nameUnit;\n  });\n} // Like `shallowEqual`, but we not check the data which may cause re-render\n\nexport function isSimilar(source, target) {\n  if (source === target) {\n    return true;\n  }\n\n  if (!source && target || source && !target) {\n    return false;\n  }\n\n  if (!source || !target || _typeof(source) !== 'object' || _typeof(target) !== 'object') {\n    return false;\n  }\n\n  var sourceKeys = Object.keys(source);\n  var targetKeys = Object.keys(target);\n  var keys = new Set([].concat(sourceKeys, targetKeys));\n  return _toConsumableArray(keys).every(function (key) {\n    var sourceValue = source[key];\n    var targetValue = target[key];\n\n    if (typeof sourceValue === 'function' && typeof targetValue === 'function') {\n      return true;\n    }\n\n    return sourceValue === targetValue;\n  });\n}\nexport function defaultGetValueFromEvent(valuePropName) {\n  var event = arguments.length <= 1 ? undefined : arguments[1];\n\n  if (event && event.target && _typeof(event.target) === 'object' && valuePropName in event.target) {\n    return event.target[valuePropName];\n  }\n\n  return event;\n}\n/**\n * Moves an array item from one position in an array to another.\n *\n * Note: This is a pure function so a new array will be returned, instead\n * of altering the array argument.\n *\n * @param array         Array in which to move an item.         (required)\n * @param moveIndex     The index of the item to move.          (required)\n * @param toIndex       The index to move item at moveIndex to. (required)\n */\n\nexport function move(array, moveIndex, toIndex) {\n  var length = array.length;\n\n  if (moveIndex < 0 || moveIndex >= length || toIndex < 0 || toIndex >= length) {\n    return array;\n  }\n\n  var item = array[moveIndex];\n  var diff = moveIndex - toIndex;\n\n  if (diff > 0) {\n    // move left\n    return [].concat(_toConsumableArray(array.slice(0, toIndex)), [item], _toConsumableArray(array.slice(toIndex, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, length)));\n  }\n\n  if (diff < 0) {\n    // move right\n    return [].concat(_toConsumableArray(array.slice(0, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, toIndex + 1)), [item], _toConsumableArray(array.slice(toIndex + 1, length)));\n  }\n\n  return array;\n}","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/rc-field-form/es/utils/valueUtil.js"],"names":["_toConsumableArray","_typeof","getValue","setValue","toArray","getNamePath","path","cloneByNamePathList","store","namePathList","newStore","forEach","namePath","value","containsNamePath","partialMatch","arguments","length","undefined","some","matchNamePath","subNamePath","every","nameUnit","i","isSimilar","source","target","sourceKeys","Object","keys","targetKeys","Set","concat","key","sourceValue","targetValue","defaultGetValueFromEvent","valuePropName","event","move","array","moveIndex","toIndex","item","diff","slice"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport getValue from \"rc-util/es/utils/get\";\nimport setValue from \"rc-util/es/utils/set\";\nimport { toArray } from \"./typeUtil\";\nexport { getValue, setValue };\n\n/**\n * Convert name to internal supported format.\n * This function should keep since we still thinking if need support like `a.b.c` format.\n * 'a' => ['a']\n * 123 => [123]\n * ['a', 123] => ['a', 123]\n */\nexport function getNamePath(path) {\n  return toArray(path);\n}\nexport function cloneByNamePathList(store, namePathList) {\n  var newStore = {};\n  namePathList.forEach(function (namePath) {\n    var value = getValue(store, namePath);\n    newStore = setValue(newStore, namePath, value);\n  });\n  return newStore;\n}\n\n/**\n * Check if `namePathList` includes `namePath`.\n * @param namePathList A list of `InternalNamePath[]`\n * @param namePath Compare `InternalNamePath`\n * @param partialMatch True will make `[a, b]` match `[a, b, c]`\n */\nexport function containsNamePath(namePathList, namePath) {\n  var partialMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return namePathList && namePathList.some(function (path) {\n    return matchNamePath(namePath, path, partialMatch);\n  });\n}\n\n/**\n * Check if `namePath` is super set or equal of `subNamePath`.\n * @param namePath A list of `InternalNamePath[]`\n * @param subNamePath Compare `InternalNamePath`\n * @param partialMatch True will make `[a, b]` match `[a, b, c]`\n */\nexport function matchNamePath(namePath, subNamePath) {\n  var partialMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!namePath || !subNamePath) {\n    return false;\n  }\n  if (!partialMatch && namePath.length !== subNamePath.length) {\n    return false;\n  }\n  return subNamePath.every(function (nameUnit, i) {\n    return namePath[i] === nameUnit;\n  });\n}\n\n// Like `shallowEqual`, but we not check the data which may cause re-render\n\nexport function isSimilar(source, target) {\n  if (source === target) {\n    return true;\n  }\n  if (!source && target || source && !target) {\n    return false;\n  }\n  if (!source || !target || _typeof(source) !== 'object' || _typeof(target) !== 'object') {\n    return false;\n  }\n  var sourceKeys = Object.keys(source);\n  var targetKeys = Object.keys(target);\n  var keys = new Set([].concat(sourceKeys, targetKeys));\n  return _toConsumableArray(keys).every(function (key) {\n    var sourceValue = source[key];\n    var targetValue = target[key];\n    if (typeof sourceValue === 'function' && typeof targetValue === 'function') {\n      return true;\n    }\n    return sourceValue === targetValue;\n  });\n}\nexport function defaultGetValueFromEvent(valuePropName) {\n  var event = arguments.length <= 1 ? undefined : arguments[1];\n  if (event && event.target && _typeof(event.target) === 'object' && valuePropName in event.target) {\n    return event.target[valuePropName];\n  }\n  return event;\n}\n\n/**\n * Moves an array item from one position in an array to another.\n *\n * Note: This is a pure function so a new array will be returned, instead\n * of altering the array argument.\n *\n * @param array         Array in which to move an item.         (required)\n * @param moveIndex     The index of the item to move.          (required)\n * @param toIndex       The index to move item at moveIndex to. (required)\n */\nexport function move(array, moveIndex, toIndex) {\n  var length = array.length;\n  if (moveIndex < 0 || moveIndex >= length || toIndex < 0 || toIndex >= length) {\n    return array;\n  }\n  var item = array[moveIndex];\n  var diff = moveIndex - toIndex;\n  if (diff > 0) {\n    // move left\n    return [].concat(_toConsumableArray(array.slice(0, toIndex)), [item], _toConsumableArray(array.slice(toIndex, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, length)));\n  }\n  if (diff < 0) {\n    // move right\n    return [].concat(_toConsumableArray(array.slice(0, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, toIndex + 1)), [item], _toConsumableArray(array.slice(toIndex + 1, length)));\n  }\n  return array;\n}"]},"metadata":{},"sourceType":"module"}