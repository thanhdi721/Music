{"ast":null,"code":"import { useContext } from 'react';\nimport { VariantContext } from '../context';\nexport const Variants = ['outlined', 'borderless', 'filled'];\n/**\n * Compatible for legacy `bordered` prop.\n */\n\nconst useVariant = function (variant) {\n  let legacyBordered = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  const ctxVariant = useContext(VariantContext);\n  let mergedVariant;\n\n  if (typeof variant !== 'undefined') {\n    mergedVariant = variant;\n  } else if (legacyBordered === false) {\n    mergedVariant = 'borderless';\n  } else {\n    mergedVariant = ctxVariant !== null && ctxVariant !== void 0 ? ctxVariant : 'outlined';\n  }\n\n  const enableVariantCls = Variants.includes(mergedVariant);\n  return [mergedVariant, enableVariantCls];\n};\n\nexport default useVariant;","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/antd/es/form/hooks/useVariants.js"],"names":["useContext","VariantContext","Variants","useVariant","variant","legacyBordered","arguments","length","undefined","ctxVariant","mergedVariant","enableVariantCls","includes"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,OAAO,MAAMC,QAAQ,GAAG,CAAC,UAAD,EAAa,YAAb,EAA2B,QAA3B,CAAjB;AACP;AACA;AACA;;AACA,MAAMC,UAAU,GAAG,UAAUC,OAAV,EAAmB;AACpC,MAAIC,cAAc,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEE,SAAzF;AACA,QAAMC,UAAU,GAAGT,UAAU,CAACC,cAAD,CAA7B;AACA,MAAIS,aAAJ;;AACA,MAAI,OAAON,OAAP,KAAmB,WAAvB,EAAoC;AAClCM,IAAAA,aAAa,GAAGN,OAAhB;AACD,GAFD,MAEO,IAAIC,cAAc,KAAK,KAAvB,EAA8B;AACnCK,IAAAA,aAAa,GAAG,YAAhB;AACD,GAFM,MAEA;AACLA,IAAAA,aAAa,GAAGD,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+CA,UAA/C,GAA4D,UAA5E;AACD;;AACD,QAAME,gBAAgB,GAAGT,QAAQ,CAACU,QAAT,CAAkBF,aAAlB,CAAzB;AACA,SAAO,CAACA,aAAD,EAAgBC,gBAAhB,CAAP;AACD,CAbD;;AAcA,eAAeR,UAAf","sourcesContent":["import { useContext } from 'react';\nimport { VariantContext } from '../context';\nexport const Variants = ['outlined', 'borderless', 'filled'];\n/**\n * Compatible for legacy `bordered` prop.\n */\nconst useVariant = function (variant) {\n  let legacyBordered = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  const ctxVariant = useContext(VariantContext);\n  let mergedVariant;\n  if (typeof variant !== 'undefined') {\n    mergedVariant = variant;\n  } else if (legacyBordered === false) {\n    mergedVariant = 'borderless';\n  } else {\n    mergedVariant = ctxVariant !== null && ctxVariant !== void 0 ? ctxVariant : 'outlined';\n  }\n  const enableVariantCls = Variants.includes(mergedVariant);\n  return [mergedVariant, enableVariantCls];\n};\nexport default useVariant;"]},"metadata":{},"sourceType":"module"}