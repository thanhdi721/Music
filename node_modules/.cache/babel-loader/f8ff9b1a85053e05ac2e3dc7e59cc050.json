{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { isE, isEmpty, num2str, trimNumber, validateNumber } from \"./numberUtil\";\n\nvar BigIntDecimal = /*#__PURE__*/function () {\n  /** BigInt will convert `0009` to `9`. We need record the len of decimal */\n  function BigIntDecimal(value) {\n    _classCallCheck(this, BigIntDecimal);\n\n    _defineProperty(this, \"origin\", '');\n\n    _defineProperty(this, \"negative\", void 0);\n\n    _defineProperty(this, \"integer\", void 0);\n\n    _defineProperty(this, \"decimal\", void 0);\n\n    _defineProperty(this, \"decimalLen\", void 0);\n\n    _defineProperty(this, \"empty\", void 0);\n\n    _defineProperty(this, \"nan\", void 0);\n\n    if (isEmpty(value)) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value); // Act like Number convert\n\n    if (value === '-' || Number.isNaN(value)) {\n      this.nan = true;\n      return;\n    }\n\n    var mergedValue = value; // We need convert back to Number since it require `toFixed` to handle this\n\n    if (isE(mergedValue)) {\n      mergedValue = Number(mergedValue);\n    }\n\n    mergedValue = typeof mergedValue === 'string' ? mergedValue : num2str(mergedValue);\n\n    if (validateNumber(mergedValue)) {\n      var trimRet = trimNumber(mergedValue);\n      this.negative = trimRet.negative;\n      var numbers = trimRet.trimStr.split('.');\n      this.integer = BigInt(numbers[0]);\n      var decimalStr = numbers[1] || '0';\n      this.decimal = BigInt(decimalStr);\n      this.decimalLen = decimalStr.length;\n    } else {\n      this.nan = true;\n    }\n  }\n\n  _createClass(BigIntDecimal, [{\n    key: \"getMark\",\n    value: function getMark() {\n      return this.negative ? '-' : '';\n    }\n  }, {\n    key: \"getIntegerStr\",\n    value: function getIntegerStr() {\n      return this.integer.toString();\n    }\n    /**\n     * @private get decimal string\n     */\n\n  }, {\n    key: \"getDecimalStr\",\n    value: function getDecimalStr() {\n      return this.decimal.toString().padStart(this.decimalLen, '0');\n    }\n    /**\n     * @private Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000\n     * This is used for add function only.\n     */\n\n  }, {\n    key: \"alignDecimal\",\n    value: function alignDecimal(decimalLength) {\n      var str = \"\".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, '0'));\n      return BigInt(str);\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      var clone = new BigIntDecimal(this.toString());\n      clone.negative = !clone.negative;\n      return clone;\n    }\n  }, {\n    key: \"cal\",\n    value: function cal(offset, calculator, calDecimalLen) {\n      var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);\n      var myAlignedDecimal = this.alignDecimal(maxDecimalLength);\n      var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);\n      var valueStr = calculator(myAlignedDecimal, offsetAlignedDecimal).toString();\n      var nextDecimalLength = calDecimalLen(maxDecimalLength); // We need fill string length back to `maxDecimalLength` to avoid parser failed\n\n      var _trimNumber = trimNumber(valueStr),\n          negativeStr = _trimNumber.negativeStr,\n          trimStr = _trimNumber.trimStr;\n\n      var hydrateValueStr = \"\".concat(negativeStr).concat(trimStr.padStart(nextDecimalLength + 1, '0'));\n      return new BigIntDecimal(\"\".concat(hydrateValueStr.slice(0, -nextDecimalLength), \".\").concat(hydrateValueStr.slice(-nextDecimalLength)));\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new BigIntDecimal(value);\n      }\n\n      var offset = new BigIntDecimal(value);\n\n      if (offset.isInvalidate()) {\n        return this;\n      }\n\n      return this.cal(offset, function (num1, num2) {\n        return num1 + num2;\n      }, function (len) {\n        return len;\n      });\n    }\n  }, {\n    key: \"multi\",\n    value: function multi(value) {\n      var target = new BigIntDecimal(value);\n\n      if (this.isInvalidate() || target.isInvalidate()) {\n        return new BigIntDecimal(NaN);\n      }\n\n      return this.cal(target, function (num1, num2) {\n        return num1 * num2;\n      }, function (len) {\n        return len * 2;\n      });\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return this.nan;\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      if (this.isNaN()) {\n        return NaN;\n      }\n\n      return Number(this.toString());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return '';\n      }\n\n      return trimNumber(\"\".concat(this.getMark()).concat(this.getIntegerStr(), \".\").concat(this.getDecimalStr())).fullStr;\n    }\n  }]);\n\n  return BigIntDecimal;\n}();\n\nexport { BigIntDecimal as default };","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/@rc-component/mini-decimal/es/BigIntDecimal.js"],"names":["_classCallCheck","_createClass","_defineProperty","isE","isEmpty","num2str","trimNumber","validateNumber","BigIntDecimal","value","empty","origin","String","Number","isNaN","nan","mergedValue","trimRet","negative","numbers","trimStr","split","integer","BigInt","decimalStr","decimal","decimalLen","length","key","getMark","getIntegerStr","toString","getDecimalStr","padStart","alignDecimal","decimalLength","str","concat","padEnd","negate","clone","cal","offset","calculator","calDecimalLen","maxDecimalLength","Math","max","myAlignedDecimal","offsetAlignedDecimal","valueStr","nextDecimalLength","_trimNumber","negativeStr","hydrateValueStr","slice","add","isInvalidate","num1","num2","len","multi","target","NaN","equals","lessEquals","toNumber","safe","arguments","undefined","fullStr","default"],"mappings":"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","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { isE, isEmpty, num2str, trimNumber, validateNumber } from \"./numberUtil\";\nvar BigIntDecimal = /*#__PURE__*/function () {\n  /** BigInt will convert `0009` to `9`. We need record the len of decimal */\n\n  function BigIntDecimal(value) {\n    _classCallCheck(this, BigIntDecimal);\n    _defineProperty(this, \"origin\", '');\n    _defineProperty(this, \"negative\", void 0);\n    _defineProperty(this, \"integer\", void 0);\n    _defineProperty(this, \"decimal\", void 0);\n    _defineProperty(this, \"decimalLen\", void 0);\n    _defineProperty(this, \"empty\", void 0);\n    _defineProperty(this, \"nan\", void 0);\n    if (isEmpty(value)) {\n      this.empty = true;\n      return;\n    }\n    this.origin = String(value);\n\n    // Act like Number convert\n    if (value === '-' || Number.isNaN(value)) {\n      this.nan = true;\n      return;\n    }\n    var mergedValue = value;\n\n    // We need convert back to Number since it require `toFixed` to handle this\n    if (isE(mergedValue)) {\n      mergedValue = Number(mergedValue);\n    }\n    mergedValue = typeof mergedValue === 'string' ? mergedValue : num2str(mergedValue);\n    if (validateNumber(mergedValue)) {\n      var trimRet = trimNumber(mergedValue);\n      this.negative = trimRet.negative;\n      var numbers = trimRet.trimStr.split('.');\n      this.integer = BigInt(numbers[0]);\n      var decimalStr = numbers[1] || '0';\n      this.decimal = BigInt(decimalStr);\n      this.decimalLen = decimalStr.length;\n    } else {\n      this.nan = true;\n    }\n  }\n  _createClass(BigIntDecimal, [{\n    key: \"getMark\",\n    value: function getMark() {\n      return this.negative ? '-' : '';\n    }\n  }, {\n    key: \"getIntegerStr\",\n    value: function getIntegerStr() {\n      return this.integer.toString();\n    }\n\n    /**\n     * @private get decimal string\n     */\n  }, {\n    key: \"getDecimalStr\",\n    value: function getDecimalStr() {\n      return this.decimal.toString().padStart(this.decimalLen, '0');\n    }\n\n    /**\n     * @private Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000\n     * This is used for add function only.\n     */\n  }, {\n    key: \"alignDecimal\",\n    value: function alignDecimal(decimalLength) {\n      var str = \"\".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, '0'));\n      return BigInt(str);\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      var clone = new BigIntDecimal(this.toString());\n      clone.negative = !clone.negative;\n      return clone;\n    }\n  }, {\n    key: \"cal\",\n    value: function cal(offset, calculator, calDecimalLen) {\n      var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);\n      var myAlignedDecimal = this.alignDecimal(maxDecimalLength);\n      var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);\n      var valueStr = calculator(myAlignedDecimal, offsetAlignedDecimal).toString();\n      var nextDecimalLength = calDecimalLen(maxDecimalLength);\n\n      // We need fill string length back to `maxDecimalLength` to avoid parser failed\n      var _trimNumber = trimNumber(valueStr),\n        negativeStr = _trimNumber.negativeStr,\n        trimStr = _trimNumber.trimStr;\n      var hydrateValueStr = \"\".concat(negativeStr).concat(trimStr.padStart(nextDecimalLength + 1, '0'));\n      return new BigIntDecimal(\"\".concat(hydrateValueStr.slice(0, -nextDecimalLength), \".\").concat(hydrateValueStr.slice(-nextDecimalLength)));\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new BigIntDecimal(value);\n      }\n      var offset = new BigIntDecimal(value);\n      if (offset.isInvalidate()) {\n        return this;\n      }\n      return this.cal(offset, function (num1, num2) {\n        return num1 + num2;\n      }, function (len) {\n        return len;\n      });\n    }\n  }, {\n    key: \"multi\",\n    value: function multi(value) {\n      var target = new BigIntDecimal(value);\n      if (this.isInvalidate() || target.isInvalidate()) {\n        return new BigIntDecimal(NaN);\n      }\n      return this.cal(target, function (num1, num2) {\n        return num1 * num2;\n      }, function (len) {\n        return len * 2;\n      });\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return this.nan;\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      if (this.isNaN()) {\n        return NaN;\n      }\n      return Number(this.toString());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (!safe) {\n        return this.origin;\n      }\n      if (this.isInvalidate()) {\n        return '';\n      }\n      return trimNumber(\"\".concat(this.getMark()).concat(this.getIntegerStr(), \".\").concat(this.getDecimalStr())).fullStr;\n    }\n  }]);\n  return BigIntDecimal;\n}();\nexport { BigIntDecimal as default };"]},"metadata":{},"sourceType":"module"}