{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { useEvent, useMergedState } from 'rc-util';\nimport * as React from 'react';\nimport useSyncState from \"../../hooks/useSyncState\";\nimport { formatValue, isSame, isSameTimestamp } from \"../../utils/dateUtil\";\nimport { fillIndex } from \"../../utils/miscUtil\";\nimport useLockEffect from \"./useLockEffect\";\nvar EMPTY_VALUE = []; // Submit Logic:\n// * âœ… Value:\n//    * merged value using controlled value, if not, use stateValue\n//    * When merged value change, [1] resync calendar value and submit value\n// * âœ… Calender Value:\n//    * ðŸ’» When user typing is validate, change the calendar value\n//    * ðŸŒ… When user click on the panel, change the calendar value\n// * Submit Value:\n//    * ðŸ’» When user blur the input, flush calendar value to submit value\n//    * ðŸŒ… When user click on the panel is no needConfirm, flush calendar value to submit value\n//    * ðŸŒ… When user click on the panel is needConfirm and click OK, flush calendar value to submit value\n// * Blur logic & close logic:\n//    * âœ… For value, always try flush submit\n//    * âœ… If `needConfirm`, reset as [1]\n//    * Else (`!needConfirm`)\n//      * If has another index field, active another index\n// * âœ… Flush submit:\n//    * If all the start & end field is confirmed or all blur or panel closed\n//    * Update `needSubmit` mark to true\n//    * trigger onChange by `needSubmit` and update stateValue\n\nfunction useUtil(generateConfig, locale, formatList) {\n  var getDateTexts = function getDateTexts(dates) {\n    return dates.map(function (date) {\n      return formatValue(date, {\n        generateConfig: generateConfig,\n        locale: locale,\n        format: formatList[0]\n      });\n    });\n  };\n\n  var isSameDates = function isSameDates(source, target) {\n    var maxLen = Math.max(source.length, target.length);\n    var diffIndex = -1;\n\n    for (var i = 0; i < maxLen; i += 1) {\n      var prev = source[i] || null;\n      var next = target[i] || null;\n\n      if (prev !== next && !isSameTimestamp(generateConfig, prev, next)) {\n        diffIndex = i;\n        break;\n      }\n    }\n\n    return [diffIndex < 0, diffIndex !== 0];\n  };\n\n  return [getDateTexts, isSameDates];\n}\n\nfunction orderDates(dates, generateConfig) {\n  return _toConsumableArray(dates).sort(function (a, b) {\n    return generateConfig.isAfter(a, b) ? 1 : -1;\n  });\n}\n/**\n * Used for internal value management.\n * It should always use `mergedValue` in render logic\n */\n\n\nexport function useCalendarValue(mergedValue) {\n  var _useSyncState = useSyncState(mergedValue),\n      _useSyncState2 = _slicedToArray(_useSyncState, 2),\n      calendarValue = _useSyncState2[0],\n      setCalendarValue = _useSyncState2[1];\n  /** Sync calendarValue & submitValue back with value */\n\n\n  var syncWithValue = useEvent(function () {\n    setCalendarValue(mergedValue);\n  });\n  React.useEffect(function () {\n    syncWithValue();\n  }, [mergedValue]);\n  return [calendarValue, setCalendarValue];\n}\n/**\n * Control the internal `value` align with prop `value` and provide a temp `calendarValue` for ui.\n * `calendarValue` will be reset when blur & focus & open.\n */\n\nexport function useInnerValue(generateConfig, locale, formatList,\n/** Used for RangePicker. `true` means [DateType, DateType] or will be DateType[] */\nrangeValue,\n/**\n * Trigger order when trigger calendar value change.\n * This should only used in SinglePicker with `multiple` mode.\n * So when `rangeValue` is `true`, order will be ignored.\n */\norder, defaultValue, value, onCalendarChange, onOk) {\n  // This is the root value which will sync with controlled or uncontrolled value\n  var _useMergedState = useMergedState(defaultValue, {\n    value: value\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      innerValue = _useMergedState2[0],\n      setInnerValue = _useMergedState2[1];\n\n  var mergedValue = innerValue || EMPTY_VALUE; // ========================= Inner Values =========================\n\n  var _useCalendarValue = useCalendarValue(mergedValue),\n      _useCalendarValue2 = _slicedToArray(_useCalendarValue, 2),\n      calendarValue = _useCalendarValue2[0],\n      setCalendarValue = _useCalendarValue2[1]; // ============================ Change ============================\n\n\n  var _useUtil = useUtil(generateConfig, locale, formatList),\n      _useUtil2 = _slicedToArray(_useUtil, 2),\n      getDateTexts = _useUtil2[0],\n      isSameDates = _useUtil2[1];\n\n  var triggerCalendarChange = useEvent(function (nextCalendarValues) {\n    var clone = _toConsumableArray(nextCalendarValues);\n\n    if (rangeValue) {\n      for (var i = 0; i < 2; i += 1) {\n        clone[i] = clone[i] || null;\n      }\n    } else if (order) {\n      clone = orderDates(clone.filter(function (date) {\n        return date;\n      }), generateConfig);\n    } // Update merged value\n\n\n    var _isSameDates = isSameDates(calendarValue(), clone),\n        _isSameDates2 = _slicedToArray(_isSameDates, 2),\n        isSameMergedDates = _isSameDates2[0],\n        isSameStart = _isSameDates2[1];\n\n    if (!isSameMergedDates) {\n      setCalendarValue(clone); // Trigger calendar change event\n\n      if (onCalendarChange) {\n        var cellTexts = getDateTexts(clone);\n        onCalendarChange(clone, cellTexts, {\n          range: isSameStart ? 'end' : 'start'\n        });\n      }\n    }\n  });\n\n  var triggerOk = function triggerOk() {\n    if (onOk) {\n      onOk(calendarValue());\n    }\n  };\n\n  return [mergedValue, setInnerValue, calendarValue, triggerCalendarChange, triggerOk];\n}\nexport default function useRangeValue(info, mergedValue, setInnerValue, getCalendarValue, triggerCalendarChange, disabled, formatList, focused, open, isInvalidateDate) {\n  var generateConfig = info.generateConfig,\n      locale = info.locale,\n      picker = info.picker,\n      onChange = info.onChange,\n      allowEmpty = info.allowEmpty,\n      order = info.order;\n  var orderOnChange = disabled.some(function (d) {\n    return d;\n  }) ? false : order; // ============================= Util =============================\n\n  var _useUtil3 = useUtil(generateConfig, locale, formatList),\n      _useUtil4 = _slicedToArray(_useUtil3, 2),\n      getDateTexts = _useUtil4[0],\n      isSameDates = _useUtil4[1]; // ============================ Values ============================\n  // Used for trigger `onChange` event.\n  // Record current value which is wait for submit.\n\n\n  var _useSyncState3 = useSyncState(mergedValue),\n      _useSyncState4 = _slicedToArray(_useSyncState3, 2),\n      submitValue = _useSyncState4[0],\n      setSubmitValue = _useSyncState4[1];\n  /** Sync calendarValue & submitValue back with value */\n\n\n  var syncWithValue = useEvent(function () {\n    setSubmitValue(mergedValue);\n  });\n  React.useEffect(function () {\n    syncWithValue();\n  }, [mergedValue]); // ============================ Submit ============================\n\n  var triggerSubmit = useEvent(function (nextValue) {\n    var isNullValue = nextValue === null;\n\n    var clone = _toConsumableArray(nextValue || submitValue()); // Fill null value\n\n\n    if (isNullValue) {\n      var maxLen = Math.max(disabled.length, clone.length);\n\n      for (var i = 0; i < maxLen; i += 1) {\n        if (!disabled[i]) {\n          clone[i] = null;\n        }\n      }\n    } // Only when exist value to sort\n\n\n    if (orderOnChange && clone[0] && clone[1]) {\n      clone = orderDates(clone, generateConfig);\n    } // Sync `calendarValue`\n\n\n    triggerCalendarChange(clone); // ========= Validate check =========\n\n    var _clone = clone,\n        _clone2 = _slicedToArray(_clone, 2),\n        start = _clone2[0],\n        end = _clone2[1]; // >>> Empty\n\n\n    var startEmpty = !start;\n    var endEmpty = !end;\n    var validateEmptyDateRange = allowEmpty ? // Validate empty start\n    (!startEmpty || allowEmpty[0]) && ( // Validate empty end\n    !endEmpty || allowEmpty[1]) : true; // >>> Order\n\n    var validateOrder = !order || startEmpty || endEmpty || isSame(generateConfig, locale, start, end, picker) || generateConfig.isAfter(end, start); // >>> Invalid\n\n    var validateDates = // Validate start\n    (!start || !isInvalidateDate(start, {\n      activeIndex: 0\n    })) && ( // Validate end\n    !end || !isInvalidateDate(end, {\n      from: start,\n      activeIndex: 1\n    })); // >>> Result\n\n    var allPassed = // Null value is from clear button\n    isNullValue || // Normal check\n    validateEmptyDateRange && validateOrder && validateDates;\n\n    if (allPassed) {\n      // Sync value with submit value\n      setInnerValue(clone);\n\n      var _isSameDates3 = isSameDates(clone, mergedValue),\n          _isSameDates4 = _slicedToArray(_isSameDates3, 1),\n          isSameMergedDates = _isSameDates4[0]; // Trigger `onChange` if needed\n\n\n      if (onChange && !isSameMergedDates) {\n        onChange( // Return null directly if all date are empty\n        isNullValue && clone.every(function (val) {\n          return !val;\n        }) ? null : clone, getDateTexts(clone));\n      }\n    }\n\n    return allPassed;\n  }); // ========================= Flush Submit =========================\n\n  var flushSubmit = useEvent(function (index, needTriggerChange) {\n    var nextSubmitValue = fillIndex(submitValue(), index, getCalendarValue()[index]);\n    setSubmitValue(nextSubmitValue);\n\n    if (needTriggerChange) {\n      triggerSubmit();\n    }\n  }); // ============================ Effect ============================\n  // All finished action trigger after 2 frames\n\n  var interactiveFinished = !focused && !open;\n  useLockEffect(!interactiveFinished, function () {\n    if (interactiveFinished) {\n      // Always try to trigger submit first\n      triggerSubmit(); // Trigger calendar change since this is a effect reset\n      // https://github.com/ant-design/ant-design/issues/22351\n\n      triggerCalendarChange(mergedValue); // Sync with value anyway\n\n      syncWithValue();\n    }\n  }, 2); // ============================ Return ============================\n\n  return [flushSubmit, triggerSubmit];\n}","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/rc-picker/es/PickerInput/hooks/useRangeValue.js"],"names":["_slicedToArray","_toConsumableArray","useEvent","useMergedState","React","useSyncState","formatValue","isSame","isSameTimestamp","fillIndex","useLockEffect","EMPTY_VALUE","useUtil","generateConfig","locale","formatList","getDateTexts","dates","map","date","format","isSameDates","source","target","maxLen","Math","max","length","diffIndex","i","prev","next","orderDates","sort","a","b","isAfter","useCalendarValue","mergedValue","_useSyncState","_useSyncState2","calendarValue","setCalendarValue","syncWithValue","useEffect","useInnerValue","rangeValue","order","defaultValue","value","onCalendarChange","onOk","_useMergedState","_useMergedState2","innerValue","setInnerValue","_useCalendarValue","_useCalendarValue2","_useUtil","_useUtil2","triggerCalendarChange","nextCalendarValues","clone","filter","_isSameDates","_isSameDates2","isSameMergedDates","isSameStart","cellTexts","range","triggerOk","useRangeValue","info","getCalendarValue","disabled","focused","open","isInvalidateDate","picker","onChange","allowEmpty","orderOnChange","some","d","_useUtil3","_useUtil4","_useSyncState3","_useSyncState4","submitValue","setSubmitValue","triggerSubmit","nextValue","isNullValue","_clone","_clone2","start","end","startEmpty","endEmpty","validateEmptyDateRange","validateOrder","validateDates","activeIndex","from","allPassed","_isSameDates3","_isSameDates4","every","val","flushSubmit","index","needTriggerChange","nextSubmitValue","interactiveFinished"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { useEvent, useMergedState } from 'rc-util';\nimport * as React from 'react';\nimport useSyncState from \"../../hooks/useSyncState\";\nimport { formatValue, isSame, isSameTimestamp } from \"../../utils/dateUtil\";\nimport { fillIndex } from \"../../utils/miscUtil\";\nimport useLockEffect from \"./useLockEffect\";\nvar EMPTY_VALUE = [];\n\n// Submit Logic:\n// * âœ… Value:\n//    * merged value using controlled value, if not, use stateValue\n//    * When merged value change, [1] resync calendar value and submit value\n// * âœ… Calender Value:\n//    * ðŸ’» When user typing is validate, change the calendar value\n//    * ðŸŒ… When user click on the panel, change the calendar value\n// * Submit Value:\n//    * ðŸ’» When user blur the input, flush calendar value to submit value\n//    * ðŸŒ… When user click on the panel is no needConfirm, flush calendar value to submit value\n//    * ðŸŒ… When user click on the panel is needConfirm and click OK, flush calendar value to submit value\n// * Blur logic & close logic:\n//    * âœ… For value, always try flush submit\n//    * âœ… If `needConfirm`, reset as [1]\n//    * Else (`!needConfirm`)\n//      * If has another index field, active another index\n// * âœ… Flush submit:\n//    * If all the start & end field is confirmed or all blur or panel closed\n//    * Update `needSubmit` mark to true\n//    * trigger onChange by `needSubmit` and update stateValue\n\nfunction useUtil(generateConfig, locale, formatList) {\n  var getDateTexts = function getDateTexts(dates) {\n    return dates.map(function (date) {\n      return formatValue(date, {\n        generateConfig: generateConfig,\n        locale: locale,\n        format: formatList[0]\n      });\n    });\n  };\n  var isSameDates = function isSameDates(source, target) {\n    var maxLen = Math.max(source.length, target.length);\n    var diffIndex = -1;\n    for (var i = 0; i < maxLen; i += 1) {\n      var prev = source[i] || null;\n      var next = target[i] || null;\n      if (prev !== next && !isSameTimestamp(generateConfig, prev, next)) {\n        diffIndex = i;\n        break;\n      }\n    }\n    return [diffIndex < 0, diffIndex !== 0];\n  };\n  return [getDateTexts, isSameDates];\n}\nfunction orderDates(dates, generateConfig) {\n  return _toConsumableArray(dates).sort(function (a, b) {\n    return generateConfig.isAfter(a, b) ? 1 : -1;\n  });\n}\n\n/**\n * Used for internal value management.\n * It should always use `mergedValue` in render logic\n */\nexport function useCalendarValue(mergedValue) {\n  var _useSyncState = useSyncState(mergedValue),\n    _useSyncState2 = _slicedToArray(_useSyncState, 2),\n    calendarValue = _useSyncState2[0],\n    setCalendarValue = _useSyncState2[1];\n\n  /** Sync calendarValue & submitValue back with value */\n  var syncWithValue = useEvent(function () {\n    setCalendarValue(mergedValue);\n  });\n  React.useEffect(function () {\n    syncWithValue();\n  }, [mergedValue]);\n  return [calendarValue, setCalendarValue];\n}\n\n/**\n * Control the internal `value` align with prop `value` and provide a temp `calendarValue` for ui.\n * `calendarValue` will be reset when blur & focus & open.\n */\nexport function useInnerValue(generateConfig, locale, formatList, /** Used for RangePicker. `true` means [DateType, DateType] or will be DateType[] */\nrangeValue,\n/**\n * Trigger order when trigger calendar value change.\n * This should only used in SinglePicker with `multiple` mode.\n * So when `rangeValue` is `true`, order will be ignored.\n */\norder, defaultValue, value, onCalendarChange, onOk) {\n  // This is the root value which will sync with controlled or uncontrolled value\n  var _useMergedState = useMergedState(defaultValue, {\n      value: value\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    innerValue = _useMergedState2[0],\n    setInnerValue = _useMergedState2[1];\n  var mergedValue = innerValue || EMPTY_VALUE;\n\n  // ========================= Inner Values =========================\n  var _useCalendarValue = useCalendarValue(mergedValue),\n    _useCalendarValue2 = _slicedToArray(_useCalendarValue, 2),\n    calendarValue = _useCalendarValue2[0],\n    setCalendarValue = _useCalendarValue2[1];\n\n  // ============================ Change ============================\n  var _useUtil = useUtil(generateConfig, locale, formatList),\n    _useUtil2 = _slicedToArray(_useUtil, 2),\n    getDateTexts = _useUtil2[0],\n    isSameDates = _useUtil2[1];\n  var triggerCalendarChange = useEvent(function (nextCalendarValues) {\n    var clone = _toConsumableArray(nextCalendarValues);\n    if (rangeValue) {\n      for (var i = 0; i < 2; i += 1) {\n        clone[i] = clone[i] || null;\n      }\n    } else if (order) {\n      clone = orderDates(clone.filter(function (date) {\n        return date;\n      }), generateConfig);\n    }\n\n    // Update merged value\n    var _isSameDates = isSameDates(calendarValue(), clone),\n      _isSameDates2 = _slicedToArray(_isSameDates, 2),\n      isSameMergedDates = _isSameDates2[0],\n      isSameStart = _isSameDates2[1];\n    if (!isSameMergedDates) {\n      setCalendarValue(clone);\n\n      // Trigger calendar change event\n      if (onCalendarChange) {\n        var cellTexts = getDateTexts(clone);\n        onCalendarChange(clone, cellTexts, {\n          range: isSameStart ? 'end' : 'start'\n        });\n      }\n    }\n  });\n  var triggerOk = function triggerOk() {\n    if (onOk) {\n      onOk(calendarValue());\n    }\n  };\n  return [mergedValue, setInnerValue, calendarValue, triggerCalendarChange, triggerOk];\n}\nexport default function useRangeValue(info, mergedValue, setInnerValue, getCalendarValue, triggerCalendarChange, disabled, formatList, focused, open, isInvalidateDate) {\n  var generateConfig = info.generateConfig,\n    locale = info.locale,\n    picker = info.picker,\n    onChange = info.onChange,\n    allowEmpty = info.allowEmpty,\n    order = info.order;\n  var orderOnChange = disabled.some(function (d) {\n    return d;\n  }) ? false : order;\n\n  // ============================= Util =============================\n  var _useUtil3 = useUtil(generateConfig, locale, formatList),\n    _useUtil4 = _slicedToArray(_useUtil3, 2),\n    getDateTexts = _useUtil4[0],\n    isSameDates = _useUtil4[1];\n\n  // ============================ Values ============================\n  // Used for trigger `onChange` event.\n  // Record current value which is wait for submit.\n  var _useSyncState3 = useSyncState(mergedValue),\n    _useSyncState4 = _slicedToArray(_useSyncState3, 2),\n    submitValue = _useSyncState4[0],\n    setSubmitValue = _useSyncState4[1];\n\n  /** Sync calendarValue & submitValue back with value */\n  var syncWithValue = useEvent(function () {\n    setSubmitValue(mergedValue);\n  });\n  React.useEffect(function () {\n    syncWithValue();\n  }, [mergedValue]);\n\n  // ============================ Submit ============================\n  var triggerSubmit = useEvent(function (nextValue) {\n    var isNullValue = nextValue === null;\n    var clone = _toConsumableArray(nextValue || submitValue());\n\n    // Fill null value\n    if (isNullValue) {\n      var maxLen = Math.max(disabled.length, clone.length);\n      for (var i = 0; i < maxLen; i += 1) {\n        if (!disabled[i]) {\n          clone[i] = null;\n        }\n      }\n    }\n\n    // Only when exist value to sort\n    if (orderOnChange && clone[0] && clone[1]) {\n      clone = orderDates(clone, generateConfig);\n    }\n\n    // Sync `calendarValue`\n    triggerCalendarChange(clone);\n\n    // ========= Validate check =========\n    var _clone = clone,\n      _clone2 = _slicedToArray(_clone, 2),\n      start = _clone2[0],\n      end = _clone2[1];\n\n    // >>> Empty\n    var startEmpty = !start;\n    var endEmpty = !end;\n    var validateEmptyDateRange = allowEmpty ?\n    // Validate empty start\n    (!startEmpty || allowEmpty[0]) && (\n    // Validate empty end\n    !endEmpty || allowEmpty[1]) : true;\n\n    // >>> Order\n    var validateOrder = !order || startEmpty || endEmpty || isSame(generateConfig, locale, start, end, picker) || generateConfig.isAfter(end, start);\n\n    // >>> Invalid\n    var validateDates =\n    // Validate start\n    (!start || !isInvalidateDate(start, {\n      activeIndex: 0\n    })) && (\n    // Validate end\n    !end || !isInvalidateDate(end, {\n      from: start,\n      activeIndex: 1\n    }));\n\n    // >>> Result\n    var allPassed =\n    // Null value is from clear button\n    isNullValue ||\n    // Normal check\n    validateEmptyDateRange && validateOrder && validateDates;\n    if (allPassed) {\n      // Sync value with submit value\n      setInnerValue(clone);\n      var _isSameDates3 = isSameDates(clone, mergedValue),\n        _isSameDates4 = _slicedToArray(_isSameDates3, 1),\n        isSameMergedDates = _isSameDates4[0];\n\n      // Trigger `onChange` if needed\n      if (onChange && !isSameMergedDates) {\n        onChange(\n        // Return null directly if all date are empty\n        isNullValue && clone.every(function (val) {\n          return !val;\n        }) ? null : clone, getDateTexts(clone));\n      }\n    }\n    return allPassed;\n  });\n\n  // ========================= Flush Submit =========================\n  var flushSubmit = useEvent(function (index, needTriggerChange) {\n    var nextSubmitValue = fillIndex(submitValue(), index, getCalendarValue()[index]);\n    setSubmitValue(nextSubmitValue);\n    if (needTriggerChange) {\n      triggerSubmit();\n    }\n  });\n\n  // ============================ Effect ============================\n  // All finished action trigger after 2 frames\n  var interactiveFinished = !focused && !open;\n  useLockEffect(!interactiveFinished, function () {\n    if (interactiveFinished) {\n      // Always try to trigger submit first\n      triggerSubmit();\n\n      // Trigger calendar change since this is a effect reset\n      // https://github.com/ant-design/ant-design/issues/22351\n      triggerCalendarChange(mergedValue);\n\n      // Sync with value anyway\n      syncWithValue();\n    }\n  }, 2);\n\n  // ============================ Return ============================\n  return [flushSubmit, triggerSubmit];\n}"]},"metadata":{},"sourceType":"module"}