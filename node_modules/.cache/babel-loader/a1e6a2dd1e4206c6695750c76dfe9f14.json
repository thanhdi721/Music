{"ast":null,"code":"import { supportBigInt } from \"./supportUtil\";\nexport function isEmpty(value) {\n  return !value && value !== 0 && !Number.isNaN(value) || !String(value).trim();\n}\n/**\n * Format string number to readable number\n */\n\nexport function trimNumber(numStr) {\n  var str = numStr.trim();\n  var negative = str.startsWith('-');\n\n  if (negative) {\n    str = str.slice(1);\n  }\n\n  str = str // Remove decimal 0. `1.000` => `1.`, `1.100` => `1.1`\n  .replace(/(\\.\\d*[^0])0*$/, '$1') // Remove useless decimal. `1.` => `1`\n  .replace(/\\.0*$/, '') // Remove integer 0. `0001` => `1`, 000.1' => `.1`\n  .replace(/^0+/, '');\n\n  if (str.startsWith('.')) {\n    str = \"0\".concat(str);\n  }\n\n  var trimStr = str || '0';\n  var splitNumber = trimStr.split('.');\n  var integerStr = splitNumber[0] || '0';\n  var decimalStr = splitNumber[1] || '0';\n\n  if (integerStr === '0' && decimalStr === '0') {\n    negative = false;\n  }\n\n  var negativeStr = negative ? '-' : '';\n  return {\n    negative: negative,\n    negativeStr: negativeStr,\n    trimStr: trimStr,\n    integerStr: integerStr,\n    decimalStr: decimalStr,\n    fullStr: \"\".concat(negativeStr).concat(trimStr)\n  };\n}\nexport function isE(number) {\n  var str = String(number);\n  return !Number.isNaN(Number(str)) && str.includes('e');\n}\n/**\n * [Legacy] Convert 1e-9 to 0.000000001.\n * This may lose some precision if user really want 1e-9.\n */\n\nexport function getNumberPrecision(number) {\n  var numStr = String(number);\n\n  if (isE(number)) {\n    var precision = Number(numStr.slice(numStr.indexOf('e-') + 2));\n    var decimalMatch = numStr.match(/\\.(\\d+)/);\n\n    if (decimalMatch !== null && decimalMatch !== void 0 && decimalMatch[1]) {\n      precision += decimalMatch[1].length;\n    }\n\n    return precision;\n  }\n\n  return numStr.includes('.') && validateNumber(numStr) ? numStr.length - numStr.indexOf('.') - 1 : 0;\n}\n/**\n * Convert number (includes scientific notation) to -xxx.yyy format\n */\n\nexport function num2str(number) {\n  var numStr = String(number);\n\n  if (isE(number)) {\n    if (number > Number.MAX_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MAX_SAFE_INTEGER);\n    }\n\n    if (number < Number.MIN_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MIN_SAFE_INTEGER);\n    }\n\n    numStr = number.toFixed(getNumberPrecision(numStr));\n  }\n\n  return trimNumber(numStr).fullStr;\n}\nexport function validateNumber(num) {\n  if (typeof num === 'number') {\n    return !Number.isNaN(num);\n  } // Empty\n\n\n  if (!num) {\n    return false;\n  }\n\n  return (// Normal type: 11.28\n    /^\\s*-?\\d+(\\.\\d+)?\\s*$/.test(num) || // Pre-number: 1.\n    /^\\s*-?\\d+\\.\\s*$/.test(num) || // Post-number: .1\n    /^\\s*-?\\.\\d+\\s*$/.test(num)\n  );\n}","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/@rc-component/mini-decimal/es/numberUtil.js"],"names":["supportBigInt","isEmpty","value","Number","isNaN","String","trim","trimNumber","numStr","str","negative","startsWith","slice","replace","concat","trimStr","splitNumber","split","integerStr","decimalStr","negativeStr","fullStr","isE","number","includes","getNumberPrecision","precision","indexOf","decimalMatch","match","length","validateNumber","num2str","MAX_SAFE_INTEGER","BigInt","toString","MIN_SAFE_INTEGER","toFixed","num","test"],"mappings":"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","sourcesContent":["import { supportBigInt } from \"./supportUtil\";\nexport function isEmpty(value) {\n  return !value && value !== 0 && !Number.isNaN(value) || !String(value).trim();\n}\n\n/**\n * Format string number to readable number\n */\nexport function trimNumber(numStr) {\n  var str = numStr.trim();\n  var negative = str.startsWith('-');\n  if (negative) {\n    str = str.slice(1);\n  }\n  str = str\n  // Remove decimal 0. `1.000` => `1.`, `1.100` => `1.1`\n  .replace(/(\\.\\d*[^0])0*$/, '$1')\n  // Remove useless decimal. `1.` => `1`\n  .replace(/\\.0*$/, '')\n  // Remove integer 0. `0001` => `1`, 000.1' => `.1`\n  .replace(/^0+/, '');\n  if (str.startsWith('.')) {\n    str = \"0\".concat(str);\n  }\n  var trimStr = str || '0';\n  var splitNumber = trimStr.split('.');\n  var integerStr = splitNumber[0] || '0';\n  var decimalStr = splitNumber[1] || '0';\n  if (integerStr === '0' && decimalStr === '0') {\n    negative = false;\n  }\n  var negativeStr = negative ? '-' : '';\n  return {\n    negative: negative,\n    negativeStr: negativeStr,\n    trimStr: trimStr,\n    integerStr: integerStr,\n    decimalStr: decimalStr,\n    fullStr: \"\".concat(negativeStr).concat(trimStr)\n  };\n}\nexport function isE(number) {\n  var str = String(number);\n  return !Number.isNaN(Number(str)) && str.includes('e');\n}\n\n/**\n * [Legacy] Convert 1e-9 to 0.000000001.\n * This may lose some precision if user really want 1e-9.\n */\nexport function getNumberPrecision(number) {\n  var numStr = String(number);\n  if (isE(number)) {\n    var precision = Number(numStr.slice(numStr.indexOf('e-') + 2));\n    var decimalMatch = numStr.match(/\\.(\\d+)/);\n    if (decimalMatch !== null && decimalMatch !== void 0 && decimalMatch[1]) {\n      precision += decimalMatch[1].length;\n    }\n    return precision;\n  }\n  return numStr.includes('.') && validateNumber(numStr) ? numStr.length - numStr.indexOf('.') - 1 : 0;\n}\n\n/**\n * Convert number (includes scientific notation) to -xxx.yyy format\n */\nexport function num2str(number) {\n  var numStr = String(number);\n  if (isE(number)) {\n    if (number > Number.MAX_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MAX_SAFE_INTEGER);\n    }\n    if (number < Number.MIN_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MIN_SAFE_INTEGER);\n    }\n    numStr = number.toFixed(getNumberPrecision(numStr));\n  }\n  return trimNumber(numStr).fullStr;\n}\nexport function validateNumber(num) {\n  if (typeof num === 'number') {\n    return !Number.isNaN(num);\n  }\n\n  // Empty\n  if (!num) {\n    return false;\n  }\n  return (\n    // Normal type: 11.28\n    /^\\s*-?\\d+(\\.\\d+)?\\s*$/.test(num) ||\n    // Pre-number: 1.\n    /^\\s*-?\\d+\\.\\s*$/.test(num) ||\n    // Post-number: .1\n    /^\\s*-?\\.\\d+\\s*$/.test(num)\n  );\n}"]},"metadata":{},"sourceType":"module"}