{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { warning } from 'rc-util';\nimport * as React from 'react';\nimport useLocale from \"../../hooks/useLocale\";\nimport { fillShowTimeConfig, getTimeProps } from \"../../hooks/useTimeConfig\";\nimport { toArray } from \"../../utils/miscUtil\";\nimport { fillClearIcon } from \"../Selector/hooks/useClearIcon\";\nimport useDisabledBoundary from \"./useDisabledBoundary\";\nimport { useFieldFormat } from \"./useFieldFormat\";\nimport useInputReadOnly from \"./useInputReadOnly\";\nimport useInvalidate from \"./useInvalidate\";\n\nfunction useList(value) {\n  var fillMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var values = React.useMemo(function () {\n    var list = value ? toArray(value) : value;\n\n    if (fillMode && list) {\n      list[1] = list[1] || list[0];\n    }\n\n    return list;\n  }, [value, fillMode]);\n  return values;\n}\n/**\n * Align the outer props with unique typed and fill undefined props.\n * This is shared with both RangePicker and Picker. This will do:\n * - Convert `value` & `defaultValue` to array\n * - handle the legacy props fill like `clearIcon` + `allowClear` = `clearIcon`\n */\n\n\nexport default function useFilledProps(props, updater) {\n  var generateConfig = props.generateConfig,\n      locale = props.locale,\n      _props$picker = props.picker,\n      picker = _props$picker === void 0 ? 'date' : _props$picker,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-picker' : _props$prefixCls,\n      _props$styles = props.styles,\n      styles = _props$styles === void 0 ? {} : _props$styles,\n      _props$classNames = props.classNames,\n      classNames = _props$classNames === void 0 ? {} : _props$classNames,\n      _props$order = props.order,\n      order = _props$order === void 0 ? true : _props$order,\n      _props$components = props.components,\n      components = _props$components === void 0 ? {} : _props$components,\n      inputRender = props.inputRender,\n      allowClear = props.allowClear,\n      clearIcon = props.clearIcon,\n      needConfirm = props.needConfirm,\n      multiple = props.multiple,\n      format = props.format,\n      inputReadOnly = props.inputReadOnly,\n      disabledDate = props.disabledDate,\n      minDate = props.minDate,\n      maxDate = props.maxDate,\n      showTime = props.showTime,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      pickerValue = props.pickerValue,\n      defaultPickerValue = props.defaultPickerValue;\n  var values = useList(value);\n  var defaultValues = useList(defaultValue);\n  var pickerValues = useList(pickerValue);\n  var defaultPickerValues = useList(defaultPickerValue); // ======================== Picker ========================\n\n  /** Almost same as `picker`, but add `datetime` for `date` with `showTime` */\n\n  var internalPicker = picker === 'date' && showTime ? 'datetime' : picker;\n  /** The picker is `datetime` or `time` */\n\n  var multipleInteractivePicker = internalPicker === 'time' || internalPicker === 'datetime';\n  var complexPicker = multipleInteractivePicker || multiple;\n  var mergedNeedConfirm = needConfirm !== null && needConfirm !== void 0 ? needConfirm : multipleInteractivePicker; // ========================== Time ==========================\n  // Auto `format` need to check `showTime.showXXX` first.\n  // And then merge the `locale` into `mergedShowTime`.\n\n  var _getTimeProps = getTimeProps(props),\n      _getTimeProps2 = _slicedToArray(_getTimeProps, 4),\n      timeProps = _getTimeProps2[0],\n      localeTimeProps = _getTimeProps2[1],\n      showTimeFormat = _getTimeProps2[2],\n      propFormat = _getTimeProps2[3]; // ======================= Locales ========================\n\n\n  var mergedLocale = useLocale(locale, localeTimeProps);\n  var mergedShowTime = React.useMemo(function () {\n    return fillShowTimeConfig(internalPicker, showTimeFormat, propFormat, timeProps, mergedLocale);\n  }, [internalPicker, showTimeFormat, propFormat, timeProps, mergedLocale]); // ======================= Warning ========================\n\n  if (process.env.NODE_ENV !== 'production' && picker === 'time') {\n    if (['disabledHours', 'disabledMinutes', 'disabledSeconds'].some(function (key) {\n      return props[key];\n    })) {\n      warning(false, \"'disabledHours', 'disabledMinutes', 'disabledSeconds' will be removed in the next major version, please use 'disabledTime' instead.\");\n    }\n  } // ======================== Props =========================\n\n\n  var filledProps = React.useMemo(function () {\n    return _objectSpread(_objectSpread({}, props), {}, {\n      prefixCls: prefixCls,\n      locale: mergedLocale,\n      picker: picker,\n      styles: styles,\n      classNames: classNames,\n      order: order,\n      components: _objectSpread({\n        input: inputRender\n      }, components),\n      clearIcon: fillClearIcon(prefixCls, allowClear, clearIcon),\n      showTime: mergedShowTime,\n      value: values,\n      defaultValue: defaultValues,\n      pickerValue: pickerValues,\n      defaultPickerValue: defaultPickerValues\n    }, updater === null || updater === void 0 ? void 0 : updater());\n  }, [props]); // ======================== Format ========================\n\n  var _useFieldFormat = useFieldFormat(internalPicker, mergedLocale, format),\n      _useFieldFormat2 = _slicedToArray(_useFieldFormat, 2),\n      formatList = _useFieldFormat2[0],\n      maskFormat = _useFieldFormat2[1]; // ======================= ReadOnly =======================\n\n\n  var mergedInputReadOnly = useInputReadOnly(formatList, inputReadOnly, multiple); // ======================= Boundary =======================\n\n  var disabledBoundaryDate = useDisabledBoundary(generateConfig, locale, disabledDate, minDate, maxDate); // ====================== Invalidate ======================\n\n  var isInvalidateDate = useInvalidate(generateConfig, picker, disabledDate, mergedShowTime); // ======================== Merged ========================\n\n  var mergedProps = React.useMemo(function () {\n    return _objectSpread(_objectSpread({}, filledProps), {}, {\n      needConfirm: mergedNeedConfirm,\n      inputReadOnly: mergedInputReadOnly,\n      disabledDate: disabledBoundaryDate\n    });\n  }, [filledProps, mergedNeedConfirm, mergedInputReadOnly, disabledBoundaryDate]);\n  return [mergedProps, internalPicker, complexPicker, formatList, maskFormat, isInvalidateDate];\n}","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/rc-picker/es/PickerInput/hooks/useFilledProps.js"],"names":["_objectSpread","_slicedToArray","warning","React","useLocale","fillShowTimeConfig","getTimeProps","toArray","fillClearIcon","useDisabledBoundary","useFieldFormat","useInputReadOnly","useInvalidate","useList","value","fillMode","arguments","length","undefined","values","useMemo","list","useFilledProps","props","updater","generateConfig","locale","_props$picker","picker","_props$prefixCls","prefixCls","_props$styles","styles","_props$classNames","classNames","_props$order","order","_props$components","components","inputRender","allowClear","clearIcon","needConfirm","multiple","format","inputReadOnly","disabledDate","minDate","maxDate","showTime","defaultValue","pickerValue","defaultPickerValue","defaultValues","pickerValues","defaultPickerValues","internalPicker","multipleInteractivePicker","complexPicker","mergedNeedConfirm","_getTimeProps","_getTimeProps2","timeProps","localeTimeProps","showTimeFormat","propFormat","mergedLocale","mergedShowTime","process","env","NODE_ENV","some","key","filledProps","input","_useFieldFormat","_useFieldFormat2","formatList","maskFormat","mergedInputReadOnly","disabledBoundaryDate","isInvalidateDate","mergedProps"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { warning } from 'rc-util';\nimport * as React from 'react';\nimport useLocale from \"../../hooks/useLocale\";\nimport { fillShowTimeConfig, getTimeProps } from \"../../hooks/useTimeConfig\";\nimport { toArray } from \"../../utils/miscUtil\";\nimport { fillClearIcon } from \"../Selector/hooks/useClearIcon\";\nimport useDisabledBoundary from \"./useDisabledBoundary\";\nimport { useFieldFormat } from \"./useFieldFormat\";\nimport useInputReadOnly from \"./useInputReadOnly\";\nimport useInvalidate from \"./useInvalidate\";\nfunction useList(value) {\n  var fillMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var values = React.useMemo(function () {\n    var list = value ? toArray(value) : value;\n    if (fillMode && list) {\n      list[1] = list[1] || list[0];\n    }\n    return list;\n  }, [value, fillMode]);\n  return values;\n}\n\n/**\n * Align the outer props with unique typed and fill undefined props.\n * This is shared with both RangePicker and Picker. This will do:\n * - Convert `value` & `defaultValue` to array\n * - handle the legacy props fill like `clearIcon` + `allowClear` = `clearIcon`\n */\nexport default function useFilledProps(props, updater) {\n  var generateConfig = props.generateConfig,\n    locale = props.locale,\n    _props$picker = props.picker,\n    picker = _props$picker === void 0 ? 'date' : _props$picker,\n    _props$prefixCls = props.prefixCls,\n    prefixCls = _props$prefixCls === void 0 ? 'rc-picker' : _props$prefixCls,\n    _props$styles = props.styles,\n    styles = _props$styles === void 0 ? {} : _props$styles,\n    _props$classNames = props.classNames,\n    classNames = _props$classNames === void 0 ? {} : _props$classNames,\n    _props$order = props.order,\n    order = _props$order === void 0 ? true : _props$order,\n    _props$components = props.components,\n    components = _props$components === void 0 ? {} : _props$components,\n    inputRender = props.inputRender,\n    allowClear = props.allowClear,\n    clearIcon = props.clearIcon,\n    needConfirm = props.needConfirm,\n    multiple = props.multiple,\n    format = props.format,\n    inputReadOnly = props.inputReadOnly,\n    disabledDate = props.disabledDate,\n    minDate = props.minDate,\n    maxDate = props.maxDate,\n    showTime = props.showTime,\n    value = props.value,\n    defaultValue = props.defaultValue,\n    pickerValue = props.pickerValue,\n    defaultPickerValue = props.defaultPickerValue;\n  var values = useList(value);\n  var defaultValues = useList(defaultValue);\n  var pickerValues = useList(pickerValue);\n  var defaultPickerValues = useList(defaultPickerValue);\n\n  // ======================== Picker ========================\n  /** Almost same as `picker`, but add `datetime` for `date` with `showTime` */\n  var internalPicker = picker === 'date' && showTime ? 'datetime' : picker;\n\n  /** The picker is `datetime` or `time` */\n  var multipleInteractivePicker = internalPicker === 'time' || internalPicker === 'datetime';\n  var complexPicker = multipleInteractivePicker || multiple;\n  var mergedNeedConfirm = needConfirm !== null && needConfirm !== void 0 ? needConfirm : multipleInteractivePicker;\n\n  // ========================== Time ==========================\n  // Auto `format` need to check `showTime.showXXX` first.\n  // And then merge the `locale` into `mergedShowTime`.\n  var _getTimeProps = getTimeProps(props),\n    _getTimeProps2 = _slicedToArray(_getTimeProps, 4),\n    timeProps = _getTimeProps2[0],\n    localeTimeProps = _getTimeProps2[1],\n    showTimeFormat = _getTimeProps2[2],\n    propFormat = _getTimeProps2[3];\n\n  // ======================= Locales ========================\n  var mergedLocale = useLocale(locale, localeTimeProps);\n  var mergedShowTime = React.useMemo(function () {\n    return fillShowTimeConfig(internalPicker, showTimeFormat, propFormat, timeProps, mergedLocale);\n  }, [internalPicker, showTimeFormat, propFormat, timeProps, mergedLocale]);\n\n  // ======================= Warning ========================\n  if (process.env.NODE_ENV !== 'production' && picker === 'time') {\n    if (['disabledHours', 'disabledMinutes', 'disabledSeconds'].some(function (key) {\n      return props[key];\n    })) {\n      warning(false, \"'disabledHours', 'disabledMinutes', 'disabledSeconds' will be removed in the next major version, please use 'disabledTime' instead.\");\n    }\n  }\n\n  // ======================== Props =========================\n  var filledProps = React.useMemo(function () {\n    return _objectSpread(_objectSpread({}, props), {}, {\n      prefixCls: prefixCls,\n      locale: mergedLocale,\n      picker: picker,\n      styles: styles,\n      classNames: classNames,\n      order: order,\n      components: _objectSpread({\n        input: inputRender\n      }, components),\n      clearIcon: fillClearIcon(prefixCls, allowClear, clearIcon),\n      showTime: mergedShowTime,\n      value: values,\n      defaultValue: defaultValues,\n      pickerValue: pickerValues,\n      defaultPickerValue: defaultPickerValues\n    }, updater === null || updater === void 0 ? void 0 : updater());\n  }, [props]);\n\n  // ======================== Format ========================\n  var _useFieldFormat = useFieldFormat(internalPicker, mergedLocale, format),\n    _useFieldFormat2 = _slicedToArray(_useFieldFormat, 2),\n    formatList = _useFieldFormat2[0],\n    maskFormat = _useFieldFormat2[1];\n\n  // ======================= ReadOnly =======================\n  var mergedInputReadOnly = useInputReadOnly(formatList, inputReadOnly, multiple);\n\n  // ======================= Boundary =======================\n  var disabledBoundaryDate = useDisabledBoundary(generateConfig, locale, disabledDate, minDate, maxDate);\n\n  // ====================== Invalidate ======================\n  var isInvalidateDate = useInvalidate(generateConfig, picker, disabledDate, mergedShowTime);\n\n  // ======================== Merged ========================\n  var mergedProps = React.useMemo(function () {\n    return _objectSpread(_objectSpread({}, filledProps), {}, {\n      needConfirm: mergedNeedConfirm,\n      inputReadOnly: mergedInputReadOnly,\n      disabledDate: disabledBoundaryDate\n    });\n  }, [filledProps, mergedNeedConfirm, mergedInputReadOnly, disabledBoundaryDate]);\n  return [mergedProps, internalPicker, complexPicker, formatList, maskFormat, isInvalidateDate];\n}"]},"metadata":{},"sourceType":"module"}