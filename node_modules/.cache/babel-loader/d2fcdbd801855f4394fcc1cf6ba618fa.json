{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { fillIndex } from \"../../utils/miscUtil\";\nimport * as React from 'react';\n/**\n * Used to control each fields invalidate status\n */\n\nexport default function useFieldsInvalidate(calendarValue, isInvalidateDate) {\n  var allowEmpty = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  var _React$useState = React.useState([false, false]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      fieldsInvalidates = _React$useState2[0],\n      setFieldsInvalidates = _React$useState2[1];\n\n  var onSelectorInvalid = function onSelectorInvalid(invalid, index) {\n    setFieldsInvalidates(function (ori) {\n      return fillIndex(ori, index, invalid);\n    });\n  };\n  /**\n   * For the Selector Input to mark as `aria-disabled`\n   */\n\n\n  var submitInvalidates = React.useMemo(function () {\n    return fieldsInvalidates.map(function (invalid, index) {\n      // If typing invalidate\n      if (invalid) {\n        return true;\n      }\n\n      var current = calendarValue[index]; // Not check if all empty\n\n      if (!current) {\n        return false;\n      } // Not allow empty\n\n\n      if (!allowEmpty[index] && !current) {\n        return true;\n      } // Invalidate\n\n\n      if (current && isInvalidateDate(current, {\n        activeIndex: index\n      })) {\n        return true;\n      }\n\n      return false;\n    });\n  }, [calendarValue, fieldsInvalidates, isInvalidateDate, allowEmpty]);\n  return [submitInvalidates, onSelectorInvalid];\n}","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/rc-picker/es/PickerInput/hooks/useFieldsInvalidate.js"],"names":["_slicedToArray","fillIndex","React","useFieldsInvalidate","calendarValue","isInvalidateDate","allowEmpty","arguments","length","undefined","_React$useState","useState","_React$useState2","fieldsInvalidates","setFieldsInvalidates","onSelectorInvalid","invalid","index","ori","submitInvalidates","useMemo","map","current","activeIndex"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA;AACA;AACA;;AACA,eAAe,SAASC,mBAAT,CAA6BC,aAA7B,EAA4CC,gBAA5C,EAA8D;AAC3E,MAAIC,UAAU,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAArF;;AACA,MAAIG,eAAe,GAAGR,KAAK,CAACS,QAAN,CAAe,CAAC,KAAD,EAAQ,KAAR,CAAf,CAAtB;AAAA,MACEC,gBAAgB,GAAGZ,cAAc,CAACU,eAAD,EAAkB,CAAlB,CADnC;AAAA,MAEEG,iBAAiB,GAAGD,gBAAgB,CAAC,CAAD,CAFtC;AAAA,MAGEE,oBAAoB,GAAGF,gBAAgB,CAAC,CAAD,CAHzC;;AAIA,MAAIG,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,OAA3B,EAAoCC,KAApC,EAA2C;AACjEH,IAAAA,oBAAoB,CAAC,UAAUI,GAAV,EAAe;AAClC,aAAOjB,SAAS,CAACiB,GAAD,EAAMD,KAAN,EAAaD,OAAb,CAAhB;AACD,KAFmB,CAApB;AAGD,GAJD;AAMA;AACF;AACA;;;AACE,MAAIG,iBAAiB,GAAGjB,KAAK,CAACkB,OAAN,CAAc,YAAY;AAChD,WAAOP,iBAAiB,CAACQ,GAAlB,CAAsB,UAAUL,OAAV,EAAmBC,KAAnB,EAA0B;AACrD;AACA,UAAID,OAAJ,EAAa;AACX,eAAO,IAAP;AACD;;AACD,UAAIM,OAAO,GAAGlB,aAAa,CAACa,KAAD,CAA3B,CALqD,CAOrD;;AACA,UAAI,CAACK,OAAL,EAAc;AACZ,eAAO,KAAP;AACD,OAVoD,CAYrD;;;AACA,UAAI,CAAChB,UAAU,CAACW,KAAD,CAAX,IAAsB,CAACK,OAA3B,EAAoC;AAClC,eAAO,IAAP;AACD,OAfoD,CAiBrD;;;AACA,UAAIA,OAAO,IAAIjB,gBAAgB,CAACiB,OAAD,EAAU;AACvCC,QAAAA,WAAW,EAAEN;AAD0B,OAAV,CAA/B,EAEI;AACF,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD,KAxBM,CAAP;AAyBD,GA1BuB,EA0BrB,CAACb,aAAD,EAAgBS,iBAAhB,EAAmCR,gBAAnC,EAAqDC,UAArD,CA1BqB,CAAxB;AA2BA,SAAO,CAACa,iBAAD,EAAoBJ,iBAApB,CAAP;AACD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { fillIndex } from \"../../utils/miscUtil\";\nimport * as React from 'react';\n/**\n * Used to control each fields invalidate status\n */\nexport default function useFieldsInvalidate(calendarValue, isInvalidateDate) {\n  var allowEmpty = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var _React$useState = React.useState([false, false]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    fieldsInvalidates = _React$useState2[0],\n    setFieldsInvalidates = _React$useState2[1];\n  var onSelectorInvalid = function onSelectorInvalid(invalid, index) {\n    setFieldsInvalidates(function (ori) {\n      return fillIndex(ori, index, invalid);\n    });\n  };\n\n  /**\n   * For the Selector Input to mark as `aria-disabled`\n   */\n  var submitInvalidates = React.useMemo(function () {\n    return fieldsInvalidates.map(function (invalid, index) {\n      // If typing invalidate\n      if (invalid) {\n        return true;\n      }\n      var current = calendarValue[index];\n\n      // Not check if all empty\n      if (!current) {\n        return false;\n      }\n\n      // Not allow empty\n      if (!allowEmpty[index] && !current) {\n        return true;\n      }\n\n      // Invalidate\n      if (current && isInvalidateDate(current, {\n        activeIndex: index\n      })) {\n        return true;\n      }\n      return false;\n    });\n  }, [calendarValue, fieldsInvalidates, isInvalidateDate, allowEmpty]);\n  return [submitInvalidates, onSelectorInvalid];\n}"]},"metadata":{},"sourceType":"module"}