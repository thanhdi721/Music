{"ast":null,"code":"\"use client\";\n\nimport React, { useContext } from 'react';\nimport { render } from \"rc-util/es/React/render\";\nimport { AppConfigContext } from '../app/context';\nimport ConfigProvider, { ConfigContext, globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nlet notification = null;\n\nlet act = callback => callback();\n\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\n\nfunction getGlobalContext() {\n  const {\n    getContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  } = defaultGlobalConfig;\n  const mergedContainer = (getContainer === null || getContainer === void 0 ? void 0 : getContainer()) || document.body;\n  return {\n    getContainer: () => mergedContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  };\n}\n\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    notificationConfig,\n    sync\n  } = props;\n  const {\n    getPrefixCls\n  } = useContext(ConfigContext);\n  const prefixCls = defaultGlobalConfig.prefixCls || getPrefixCls('notification');\n  const appConfig = useContext(AppConfigContext);\n  const [api, holder] = useInternalNotification(Object.assign(Object.assign(Object.assign({}, notificationConfig), {\n    prefixCls\n  }), appConfig.notification));\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return holder;\n});\nconst GlobalHolderWrapper = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const [notificationConfig, setNotificationConfig] = React.useState(getGlobalContext);\n\n  const sync = () => {\n    setNotificationConfig(getGlobalContext);\n  };\n\n  React.useEffect(sync, []);\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const theme = global.getTheme();\n  const dom = /*#__PURE__*/React.createElement(GlobalHolder, {\n    ref: ref,\n    sync: sync,\n    notificationConfig: notificationConfig\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, global.holderRender ? global.holderRender(dom) : dom);\n});\n\nfunction flushNotice() {\n  if (!notification) {\n    const holderFragment = document.createDocumentFragment();\n    const newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification; // Delay render to avoid sync issue\n\n    act(() => {\n      render( /*#__PURE__*/React.createElement(GlobalHolderWrapper, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          Promise.resolve().then(() => {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  } // Notification not ready\n\n\n  if (!notification.instance) {\n    return;\n  } // >>> Execute task\n\n\n  taskQueue.forEach(task => {\n    // eslint-disable-next-line default-case\n    switch (task.type) {\n      case 'open':\n        {\n          act(() => {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n\n      case 'destroy':\n        act(() => {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  }); // Clean up\n\n  taskQueue = [];\n} // ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\n\n\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config); // Trigger sync for it\n\n  act(() => {\n    var _a;\n\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\n\nfunction open(config) {\n  const global = globalConfig();\n\n  if (process.env.NODE_ENV !== 'production' && !global.holderRender) {\n    warnContext('notification');\n  }\n\n  taskQueue.push({\n    type: 'open',\n    config\n  });\n  flushNotice();\n}\n\nconst destroy = key => {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n};\n\nconst methods = ['success', 'info', 'warning', 'error'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setNotificationGlobalConfig,\n  useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = config => open(Object.assign(Object.assign({}, config), {\n    type\n  }));\n}); // ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\n\nconst noop = () => {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\n\n\nexport let actWrapper = noop;\n\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\n\n\nexport let actDestroy = noop;\n\nif (process.env.NODE_ENV === 'test') {\n  actDestroy = () => {\n    notification = null;\n  };\n}\n\nexport default staticMethods;","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/antd/es/notification/index.js"],"names":["React","useContext","render","AppConfigContext","ConfigProvider","ConfigContext","globalConfig","warnContext","PurePanel","useNotification","useInternalNotification","notification","act","callback","taskQueue","defaultGlobalConfig","getGlobalContext","getContainer","rtl","maxCount","top","bottom","mergedContainer","document","body","GlobalHolder","forwardRef","props","ref","notificationConfig","sync","getPrefixCls","prefixCls","appConfig","api","holder","Object","assign","useEffect","useImperativeHandle","instance","keys","forEach","method","apply","arguments","GlobalHolderWrapper","_","setNotificationConfig","useState","global","rootPrefixCls","getRootPrefixCls","rootIconPrefixCls","getIconPrefixCls","theme","getTheme","dom","createElement","iconPrefixCls","holderRender","flushNotice","holderFragment","createDocumentFragment","newNotification","fragment","node","Promise","resolve","then","task","type","open","config","destroy","key","setNotificationGlobalConfig","_a","call","process","env","NODE_ENV","push","methods","baseStaticMethods","_InternalPanelDoNotUseOrYouWillBeFired","staticMethods","noop","actWrapper","wrapper","actDestroy"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport React, { useContext } from 'react';\nimport { render } from \"rc-util/es/React/render\";\nimport { AppConfigContext } from '../app/context';\nimport ConfigProvider, { ConfigContext, globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nlet notification = null;\nlet act = callback => callback();\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\nfunction getGlobalContext() {\n  const {\n    getContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  } = defaultGlobalConfig;\n  const mergedContainer = (getContainer === null || getContainer === void 0 ? void 0 : getContainer()) || document.body;\n  return {\n    getContainer: () => mergedContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  };\n}\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    notificationConfig,\n    sync\n  } = props;\n  const {\n    getPrefixCls\n  } = useContext(ConfigContext);\n  const prefixCls = defaultGlobalConfig.prefixCls || getPrefixCls('notification');\n  const appConfig = useContext(AppConfigContext);\n  const [api, holder] = useInternalNotification(Object.assign(Object.assign(Object.assign({}, notificationConfig), {\n    prefixCls\n  }), appConfig.notification));\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return holder;\n});\nconst GlobalHolderWrapper = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const [notificationConfig, setNotificationConfig] = React.useState(getGlobalContext);\n  const sync = () => {\n    setNotificationConfig(getGlobalContext);\n  };\n  React.useEffect(sync, []);\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const theme = global.getTheme();\n  const dom = /*#__PURE__*/React.createElement(GlobalHolder, {\n    ref: ref,\n    sync: sync,\n    notificationConfig: notificationConfig\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, global.holderRender ? global.holderRender(dom) : dom);\n});\nfunction flushNotice() {\n  if (!notification) {\n    const holderFragment = document.createDocumentFragment();\n    const newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification;\n    // Delay render to avoid sync issue\n    act(() => {\n      render( /*#__PURE__*/React.createElement(GlobalHolderWrapper, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          Promise.resolve().then(() => {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  }\n  // Notification not ready\n  if (!notification.instance) {\n    return;\n  }\n  // >>> Execute task\n  taskQueue.forEach(task => {\n    // eslint-disable-next-line default-case\n    switch (task.type) {\n      case 'open':\n        {\n          act(() => {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n      case 'destroy':\n        act(() => {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  });\n  // Clean up\n  taskQueue = [];\n}\n// ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\n  // Trigger sync for it\n  act(() => {\n    var _a;\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\nfunction open(config) {\n  const global = globalConfig();\n  if (process.env.NODE_ENV !== 'production' && !global.holderRender) {\n    warnContext('notification');\n  }\n  taskQueue.push({\n    type: 'open',\n    config\n  });\n  flushNotice();\n}\nconst destroy = key => {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n};\nconst methods = ['success', 'info', 'warning', 'error'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setNotificationGlobalConfig,\n  useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = config => open(Object.assign(Object.assign({}, config), {\n    type\n  }));\n});\n// ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\nconst noop = () => {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actWrapper = noop;\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actDestroy = noop;\nif (process.env.NODE_ENV === 'test') {\n  actDestroy = () => {\n    notification = null;\n  };\n}\nexport default staticMethods;"]},"metadata":{},"sourceType":"module"}