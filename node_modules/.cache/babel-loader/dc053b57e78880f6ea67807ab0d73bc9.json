{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport Cell from \"../Cell\";\nimport { responseImmutable } from \"../context/TableContext\";\nimport devRenderTimes from \"../hooks/useRenderTimes\";\nimport useRowInfo from \"../hooks/useRowInfo\";\nimport ExpandedRow from \"./ExpandedRow\"; // ==================================================================================\n// ==                                 getCellProps                                 ==\n// ==================================================================================\n\nexport function getCellProps(rowInfo, column, colIndex, indent, index) {\n  var record = rowInfo.record,\n      prefixCls = rowInfo.prefixCls,\n      columnsKey = rowInfo.columnsKey,\n      fixedInfoList = rowInfo.fixedInfoList,\n      expandIconColumnIndex = rowInfo.expandIconColumnIndex,\n      nestExpandable = rowInfo.nestExpandable,\n      indentSize = rowInfo.indentSize,\n      expandIcon = rowInfo.expandIcon,\n      expanded = rowInfo.expanded,\n      hasNestChildren = rowInfo.hasNestChildren,\n      onTriggerExpand = rowInfo.onTriggerExpand;\n  var key = columnsKey[colIndex];\n  var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n  var appendCellNode;\n\n  if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n    appendCellNode = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        paddingLeft: \"\".concat(indentSize * indent, \"px\")\n      },\n      className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n    }), expandIcon({\n      prefixCls: prefixCls,\n      expanded: expanded,\n      expandable: hasNestChildren,\n      record: record,\n      onExpand: onTriggerExpand\n    }));\n  }\n\n  var additionalCellProps;\n\n  if (column.onCell) {\n    additionalCellProps = column.onCell(record, index);\n  }\n\n  return {\n    key: key,\n    fixedInfo: fixedInfo,\n    appendCellNode: appendCellNode,\n    additionalCellProps: additionalCellProps || {}\n  };\n} // ==================================================================================\n// ==                                 getCellProps                                 ==\n// ==================================================================================\n\nfunction BodyRow(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    devRenderTimes(props);\n  }\n\n  var className = props.className,\n      style = props.style,\n      record = props.record,\n      index = props.index,\n      renderIndex = props.renderIndex,\n      rowKey = props.rowKey,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      scopeCellComponent = props.scopeCellComponent;\n  var rowInfo = useRowInfo(record, rowKey, index, indent);\n  var prefixCls = rowInfo.prefixCls,\n      flattenColumns = rowInfo.flattenColumns,\n      expandedRowClassName = rowInfo.expandedRowClassName,\n      expandedRowRender = rowInfo.expandedRowRender,\n      rowProps = rowInfo.rowProps,\n      expanded = rowInfo.expanded,\n      rowSupportExpand = rowInfo.rowSupportExpand; // Force render expand row if expanded before\n\n  var expandedRef = React.useRef(false);\n  expandedRef.current || (expandedRef.current = expanded);\n\n  if (process.env.NODE_ENV !== 'production') {\n    devRenderTimes(props);\n  } // 若没有 expandedRowRender 参数, 将使用 baseRowNode 渲染 Children\n  // 此时如果 level > 1 则说明是 expandedRow, 一样需要附加 computedExpandedRowClassName\n\n\n  var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent); // ======================== Base tr row ========================\n\n  var baseRowNode = /*#__PURE__*/React.createElement(RowComponent, _extends({}, rowProps, {\n    \"data-row-key\": rowKey,\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), rowProps === null || rowProps === void 0 ? void 0 : rowProps.className, indent >= 1 ? computedExpandedRowClassName : ''),\n    style: _objectSpread(_objectSpread({}, style), rowProps === null || rowProps === void 0 ? void 0 : rowProps.style)\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n\n    var _getCellProps = getCellProps(rowInfo, column, colIndex, indent, index),\n        key = _getCellProps.key,\n        fixedInfo = _getCellProps.fixedInfo,\n        appendCellNode = _getCellProps.appendCellNode,\n        additionalCellProps = _getCellProps.additionalCellProps;\n\n    return /*#__PURE__*/React.createElement(Cell, _extends({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      scope: column.rowScope,\n      component: column.rowScope ? scopeCellComponent : cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      renderIndex: renderIndex,\n      dataIndex: dataIndex,\n      render: render,\n      shouldCellUpdate: column.shouldCellUpdate\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandedRef.current || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    expandRowNode = /*#__PURE__*/React.createElement(ExpandedRow, {\n      expanded: expanded,\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      component: RowComponent,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length,\n      isEmpty: false\n    }, expandContent);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, baseRowNode, expandRowNode);\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  BodyRow.displayName = 'BodyRow';\n}\n\nexport default responseImmutable(BodyRow);","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/rc-table/es/Body/BodyRow.js"],"names":["_extends","_objectSpread","classNames","React","Cell","responseImmutable","devRenderTimes","useRowInfo","ExpandedRow","getCellProps","rowInfo","column","colIndex","indent","index","record","prefixCls","columnsKey","fixedInfoList","expandIconColumnIndex","nestExpandable","indentSize","expandIcon","expanded","hasNestChildren","onTriggerExpand","key","fixedInfo","appendCellNode","createElement","Fragment","style","paddingLeft","concat","className","expandable","onExpand","additionalCellProps","onCell","BodyRow","props","process","env","NODE_ENV","renderIndex","rowKey","_props$indent","RowComponent","rowComponent","cellComponent","scopeCellComponent","flattenColumns","expandedRowClassName","expandedRowRender","rowProps","rowSupportExpand","expandedRef","useRef","current","computedExpandedRowClassName","baseRowNode","map","render","dataIndex","columnClassName","_getCellProps","ellipsis","align","scope","rowScope","component","shouldCellUpdate","appendNode","additionalProps","expandRowNode","expandContent","colSpan","length","isEmpty","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport Cell from \"../Cell\";\nimport { responseImmutable } from \"../context/TableContext\";\nimport devRenderTimes from \"../hooks/useRenderTimes\";\nimport useRowInfo from \"../hooks/useRowInfo\";\nimport ExpandedRow from \"./ExpandedRow\";\n// ==================================================================================\n// ==                                 getCellProps                                 ==\n// ==================================================================================\nexport function getCellProps(rowInfo, column, colIndex, indent, index) {\n  var record = rowInfo.record,\n    prefixCls = rowInfo.prefixCls,\n    columnsKey = rowInfo.columnsKey,\n    fixedInfoList = rowInfo.fixedInfoList,\n    expandIconColumnIndex = rowInfo.expandIconColumnIndex,\n    nestExpandable = rowInfo.nestExpandable,\n    indentSize = rowInfo.indentSize,\n    expandIcon = rowInfo.expandIcon,\n    expanded = rowInfo.expanded,\n    hasNestChildren = rowInfo.hasNestChildren,\n    onTriggerExpand = rowInfo.onTriggerExpand;\n  var key = columnsKey[colIndex];\n  var fixedInfo = fixedInfoList[colIndex];\n\n  // ============= Used for nest expandable =============\n  var appendCellNode;\n  if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n    appendCellNode = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        paddingLeft: \"\".concat(indentSize * indent, \"px\")\n      },\n      className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n    }), expandIcon({\n      prefixCls: prefixCls,\n      expanded: expanded,\n      expandable: hasNestChildren,\n      record: record,\n      onExpand: onTriggerExpand\n    }));\n  }\n  var additionalCellProps;\n  if (column.onCell) {\n    additionalCellProps = column.onCell(record, index);\n  }\n  return {\n    key: key,\n    fixedInfo: fixedInfo,\n    appendCellNode: appendCellNode,\n    additionalCellProps: additionalCellProps || {}\n  };\n}\n\n// ==================================================================================\n// ==                                 getCellProps                                 ==\n// ==================================================================================\nfunction BodyRow(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    devRenderTimes(props);\n  }\n  var className = props.className,\n    style = props.style,\n    record = props.record,\n    index = props.index,\n    renderIndex = props.renderIndex,\n    rowKey = props.rowKey,\n    _props$indent = props.indent,\n    indent = _props$indent === void 0 ? 0 : _props$indent,\n    RowComponent = props.rowComponent,\n    cellComponent = props.cellComponent,\n    scopeCellComponent = props.scopeCellComponent;\n  var rowInfo = useRowInfo(record, rowKey, index, indent);\n  var prefixCls = rowInfo.prefixCls,\n    flattenColumns = rowInfo.flattenColumns,\n    expandedRowClassName = rowInfo.expandedRowClassName,\n    expandedRowRender = rowInfo.expandedRowRender,\n    rowProps = rowInfo.rowProps,\n    expanded = rowInfo.expanded,\n    rowSupportExpand = rowInfo.rowSupportExpand;\n\n  // Force render expand row if expanded before\n  var expandedRef = React.useRef(false);\n  expandedRef.current || (expandedRef.current = expanded);\n  if (process.env.NODE_ENV !== 'production') {\n    devRenderTimes(props);\n  }\n\n  // 若没有 expandedRowRender 参数, 将使用 baseRowNode 渲染 Children\n  // 此时如果 level > 1 则说明是 expandedRow, 一样需要附加 computedExpandedRowClassName\n  var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n\n  // ======================== Base tr row ========================\n  var baseRowNode = /*#__PURE__*/React.createElement(RowComponent, _extends({}, rowProps, {\n    \"data-row-key\": rowKey,\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), rowProps === null || rowProps === void 0 ? void 0 : rowProps.className, indent >= 1 ? computedExpandedRowClassName : ''),\n    style: _objectSpread(_objectSpread({}, style), rowProps === null || rowProps === void 0 ? void 0 : rowProps.style)\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n      dataIndex = column.dataIndex,\n      columnClassName = column.className;\n    var _getCellProps = getCellProps(rowInfo, column, colIndex, indent, index),\n      key = _getCellProps.key,\n      fixedInfo = _getCellProps.fixedInfo,\n      appendCellNode = _getCellProps.appendCellNode,\n      additionalCellProps = _getCellProps.additionalCellProps;\n    return /*#__PURE__*/React.createElement(Cell, _extends({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      scope: column.rowScope,\n      component: column.rowScope ? scopeCellComponent : cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      renderIndex: renderIndex,\n      dataIndex: dataIndex,\n      render: render,\n      shouldCellUpdate: column.shouldCellUpdate\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  }));\n\n  // ======================== Expand Row =========================\n  var expandRowNode;\n  if (rowSupportExpand && (expandedRef.current || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    expandRowNode = /*#__PURE__*/React.createElement(ExpandedRow, {\n      expanded: expanded,\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      component: RowComponent,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length,\n      isEmpty: false\n    }, expandContent);\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, baseRowNode, expandRowNode);\n}\nif (process.env.NODE_ENV !== 'production') {\n  BodyRow.displayName = 'BodyRow';\n}\nexport default responseImmutable(BodyRow);"]},"metadata":{},"sourceType":"module"}