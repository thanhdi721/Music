{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { fillFieldNames } from \"rc-tree/es/utils/treeUtil\";\nvar Record;\n\n(function (Record) {\n  Record[Record[\"None\"] = 0] = \"None\";\n  Record[Record[\"Start\"] = 1] = \"Start\";\n  Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {}));\n\nfunction traverseNodesKey(treeData, callback, fieldNames) {\n  const {\n    key: fieldKey,\n    children: fieldChildren\n  } = fieldNames;\n\n  function processNode(dataNode) {\n    const key = dataNode[fieldKey];\n    const children = dataNode[fieldChildren];\n\n    if (callback(key, dataNode) !== false) {\n      traverseNodesKey(children || [], callback, fieldNames);\n    }\n  }\n\n  treeData.forEach(processNode);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\n\n\nexport function calcRangeKeys(_ref) {\n  let {\n    treeData,\n    expandedKeys,\n    startKey,\n    endKey,\n    fieldNames\n  } = _ref;\n  const keys = [];\n  let record = Record.None;\n\n  if (startKey && startKey === endKey) {\n    return [startKey];\n  }\n\n  if (!startKey || !endKey) {\n    return [];\n  }\n\n  function matchKey(key) {\n    return key === startKey || key === endKey;\n  }\n\n  traverseNodesKey(treeData, key => {\n    if (record === Record.End) {\n      return false;\n    }\n\n    if (matchKey(key)) {\n      // Match test\n      keys.push(key);\n\n      if (record === Record.None) {\n        record = Record.Start;\n      } else if (record === Record.Start) {\n        record = Record.End;\n        return false;\n      }\n    } else if (record === Record.Start) {\n      // Append selection\n      keys.push(key);\n    }\n\n    return expandedKeys.includes(key);\n  }, fillFieldNames(fieldNames));\n  return keys;\n}\nexport function convertDirectoryKeysToNodes(treeData, keys, fieldNames) {\n  const restKeys = _toConsumableArray(keys);\n\n  const nodes = [];\n  traverseNodesKey(treeData, (key, node) => {\n    const index = restKeys.indexOf(key);\n\n    if (index !== -1) {\n      nodes.push(node);\n      restKeys.splice(index, 1);\n    }\n\n    return !!restKeys.length;\n  }, fillFieldNames(fieldNames));\n  return nodes;\n}","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/antd/es/tree/utils/dictUtil.js"],"names":["_toConsumableArray","fillFieldNames","Record","traverseNodesKey","treeData","callback","fieldNames","key","fieldKey","children","fieldChildren","processNode","dataNode","forEach","calcRangeKeys","_ref","expandedKeys","startKey","endKey","keys","record","None","matchKey","End","push","Start","includes","convertDirectoryKeysToNodes","restKeys","nodes","node","index","indexOf","splice","length"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { fillFieldNames } from \"rc-tree/es/utils/treeUtil\";\nvar Record;\n(function (Record) {\n  Record[Record[\"None\"] = 0] = \"None\";\n  Record[Record[\"Start\"] = 1] = \"Start\";\n  Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {}));\nfunction traverseNodesKey(treeData, callback, fieldNames) {\n  const {\n    key: fieldKey,\n    children: fieldChildren\n  } = fieldNames;\n  function processNode(dataNode) {\n    const key = dataNode[fieldKey];\n    const children = dataNode[fieldChildren];\n    if (callback(key, dataNode) !== false) {\n      traverseNodesKey(children || [], callback, fieldNames);\n    }\n  }\n  treeData.forEach(processNode);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\nexport function calcRangeKeys(_ref) {\n  let {\n    treeData,\n    expandedKeys,\n    startKey,\n    endKey,\n    fieldNames\n  } = _ref;\n  const keys = [];\n  let record = Record.None;\n  if (startKey && startKey === endKey) {\n    return [startKey];\n  }\n  if (!startKey || !endKey) {\n    return [];\n  }\n  function matchKey(key) {\n    return key === startKey || key === endKey;\n  }\n  traverseNodesKey(treeData, key => {\n    if (record === Record.End) {\n      return false;\n    }\n    if (matchKey(key)) {\n      // Match test\n      keys.push(key);\n      if (record === Record.None) {\n        record = Record.Start;\n      } else if (record === Record.Start) {\n        record = Record.End;\n        return false;\n      }\n    } else if (record === Record.Start) {\n      // Append selection\n      keys.push(key);\n    }\n    return expandedKeys.includes(key);\n  }, fillFieldNames(fieldNames));\n  return keys;\n}\nexport function convertDirectoryKeysToNodes(treeData, keys, fieldNames) {\n  const restKeys = _toConsumableArray(keys);\n  const nodes = [];\n  traverseNodesKey(treeData, (key, node) => {\n    const index = restKeys.indexOf(key);\n    if (index !== -1) {\n      nodes.push(node);\n      restKeys.splice(index, 1);\n    }\n    return !!restKeys.length;\n  }, fillFieldNames(fieldNames));\n  return nodes;\n}"]},"metadata":{},"sourceType":"module"}