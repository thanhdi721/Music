{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { warning } from 'rc-util';\nimport * as React from 'react';\nexport default function useCellRender(cellRender, dateRender, monthCellRender, range) {\n  // ========================= Warn =========================\n  if (process.env.NODE_ENV !== 'production') {\n    warning(!dateRender, \"'dateRender' is deprecated. Please use 'cellRender' instead.\");\n    warning(!monthCellRender, \"'monthCellRender' is deprecated. Please use 'cellRender' instead.\");\n  } // ======================== Render ========================\n  // Merged render\n\n\n  var mergedCellRender = React.useMemo(function () {\n    if (cellRender) {\n      return cellRender;\n    }\n\n    return function (current, info) {\n      var date = current;\n\n      if (dateRender && info.type === 'date') {\n        return dateRender(date, info.today);\n      }\n\n      if (monthCellRender && info.type === 'month') {\n        return monthCellRender(date, info.locale);\n      }\n\n      return info.originNode;\n    };\n  }, [cellRender, monthCellRender, dateRender]); // Cell render\n\n  var onInternalCellRender = React.useCallback(function (date, info) {\n    return mergedCellRender(date, _objectSpread(_objectSpread({}, info), {}, {\n      range: range\n    }));\n  }, [mergedCellRender, range]);\n  return onInternalCellRender;\n}","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/rc-picker/es/PickerInput/hooks/useCellRender.js"],"names":["_objectSpread","warning","React","useCellRender","cellRender","dateRender","monthCellRender","range","process","env","NODE_ENV","mergedCellRender","useMemo","current","info","date","type","today","locale","originNode","onInternalCellRender","useCallback"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,0CAA1B;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,eAAe,SAASC,aAAT,CAAuBC,UAAvB,EAAmCC,UAAnC,EAA+CC,eAA/C,EAAgEC,KAAhE,EAAuE;AACpF;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCT,IAAAA,OAAO,CAAC,CAACI,UAAF,EAAc,8DAAd,CAAP;AACAJ,IAAAA,OAAO,CAAC,CAACK,eAAF,EAAmB,mEAAnB,CAAP;AACD,GALmF,CAOpF;AACA;;;AACA,MAAIK,gBAAgB,GAAGT,KAAK,CAACU,OAAN,CAAc,YAAY;AAC/C,QAAIR,UAAJ,EAAgB;AACd,aAAOA,UAAP;AACD;;AACD,WAAO,UAAUS,OAAV,EAAmBC,IAAnB,EAAyB;AAC9B,UAAIC,IAAI,GAAGF,OAAX;;AACA,UAAIR,UAAU,IAAIS,IAAI,CAACE,IAAL,KAAc,MAAhC,EAAwC;AACtC,eAAOX,UAAU,CAACU,IAAD,EAAOD,IAAI,CAACG,KAAZ,CAAjB;AACD;;AACD,UAAIX,eAAe,IAAIQ,IAAI,CAACE,IAAL,KAAc,OAArC,EAA8C;AAC5C,eAAOV,eAAe,CAACS,IAAD,EAAOD,IAAI,CAACI,MAAZ,CAAtB;AACD;;AACD,aAAOJ,IAAI,CAACK,UAAZ;AACD,KATD;AAUD,GAdsB,EAcpB,CAACf,UAAD,EAAaE,eAAb,EAA8BD,UAA9B,CAdoB,CAAvB,CAToF,CAyBpF;;AACA,MAAIe,oBAAoB,GAAGlB,KAAK,CAACmB,WAAN,CAAkB,UAAUN,IAAV,EAAgBD,IAAhB,EAAsB;AACjE,WAAOH,gBAAgB,CAACI,IAAD,EAAOf,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKc,IAAL,CAAd,EAA0B,EAA1B,EAA8B;AACvEP,MAAAA,KAAK,EAAEA;AADgE,KAA9B,CAApB,CAAvB;AAGD,GAJ0B,EAIxB,CAACI,gBAAD,EAAmBJ,KAAnB,CAJwB,CAA3B;AAKA,SAAOa,oBAAP;AACD","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { warning } from 'rc-util';\nimport * as React from 'react';\nexport default function useCellRender(cellRender, dateRender, monthCellRender, range) {\n  // ========================= Warn =========================\n  if (process.env.NODE_ENV !== 'production') {\n    warning(!dateRender, \"'dateRender' is deprecated. Please use 'cellRender' instead.\");\n    warning(!monthCellRender, \"'monthCellRender' is deprecated. Please use 'cellRender' instead.\");\n  }\n\n  // ======================== Render ========================\n  // Merged render\n  var mergedCellRender = React.useMemo(function () {\n    if (cellRender) {\n      return cellRender;\n    }\n    return function (current, info) {\n      var date = current;\n      if (dateRender && info.type === 'date') {\n        return dateRender(date, info.today);\n      }\n      if (monthCellRender && info.type === 'month') {\n        return monthCellRender(date, info.locale);\n      }\n      return info.originNode;\n    };\n  }, [cellRender, monthCellRender, dateRender]);\n\n  // Cell render\n  var onInternalCellRender = React.useCallback(function (date, info) {\n    return mergedCellRender(date, _objectSpread(_objectSpread({}, info), {}, {\n      range: range\n    }));\n  }, [mergedCellRender, range]);\n  return onInternalCellRender;\n}"]},"metadata":{},"sourceType":"module"}