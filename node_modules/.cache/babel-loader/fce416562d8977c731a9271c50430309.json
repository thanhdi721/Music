{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { genFocusOutline, resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal'; // ============================== Styles ==============================\n\nexport const genCheckboxStyle = token => {\n  const {\n    checkboxCls\n  } = token;\n  const wrapperCls = `${checkboxCls}-wrapper`;\n  return [// ===================== Basic =====================\n  {\n    // Group\n    [`${checkboxCls}-group`]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-flex',\n      flexWrap: 'wrap',\n      columnGap: token.marginXS,\n      // Group > Grid\n      [`> ${token.antCls}-row`]: {\n        flex: 1\n      }\n    }),\n    // Wrapper\n    [wrapperCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-flex',\n      alignItems: 'baseline',\n      cursor: 'pointer',\n      // Fix checkbox & radio in flex align #30260\n      '&:after': {\n        display: 'inline-block',\n        width: 0,\n        overflow: 'hidden',\n        content: \"'\\\\a0'\"\n      },\n      // Checkbox near checkbox\n      [`& + ${wrapperCls}`]: {\n        marginInlineStart: 0\n      },\n      [`&${wrapperCls}-in-form-item`]: {\n        'input[type=\"checkbox\"]': {\n          width: 14,\n          // FIXME: magic\n          height: 14 // FIXME: magic\n\n        }\n      }\n    }),\n    // Wrapper > Checkbox\n    [checkboxCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      whiteSpace: 'nowrap',\n      lineHeight: 1,\n      cursor: 'pointer',\n      borderRadius: token.borderRadiusSM,\n      // To make alignment right when `controlHeight` is changed\n      // Ref: https://github.com/ant-design/ant-design/issues/41564\n      alignSelf: 'center',\n      // Wrapper > Checkbox > input\n      [`${checkboxCls}-input`]: {\n        position: 'absolute',\n        // Since baseline align will get additional space offset,\n        // we need to move input to top to make it align with text.\n        // Ref: https://github.com/ant-design/ant-design/issues/38926#issuecomment-1486137799\n        inset: 0,\n        zIndex: 1,\n        cursor: 'pointer',\n        opacity: 0,\n        margin: 0,\n        [`&:focus-visible + ${checkboxCls}-inner`]: Object.assign({}, genFocusOutline(token))\n      },\n      // Wrapper > Checkbox > inner\n      [`${checkboxCls}-inner`]: {\n        boxSizing: 'border-box',\n        display: 'block',\n        width: token.checkboxSize,\n        height: token.checkboxSize,\n        direction: 'ltr',\n        backgroundColor: token.colorBgContainer,\n        border: `${unit(token.lineWidth)} ${token.lineType} ${token.colorBorder}`,\n        borderRadius: token.borderRadiusSM,\n        borderCollapse: 'separate',\n        transition: `all ${token.motionDurationSlow}`,\n        '&:after': {\n          boxSizing: 'border-box',\n          position: 'absolute',\n          top: '50%',\n          insetInlineStart: '25%',\n          display: 'table',\n          width: token.calc(token.checkboxSize).div(14).mul(5).equal(),\n          height: token.calc(token.checkboxSize).div(14).mul(8).equal(),\n          border: `${unit(token.lineWidthBold)} solid ${token.colorWhite}`,\n          borderTop: 0,\n          borderInlineStart: 0,\n          transform: 'rotate(45deg) scale(0) translate(-50%,-50%)',\n          opacity: 0,\n          content: '\"\"',\n          transition: `all ${token.motionDurationFast} ${token.motionEaseInBack}, opacity ${token.motionDurationFast}`\n        }\n      },\n      // Wrapper > Checkbox + Text\n      '& + span': {\n        paddingInlineStart: token.paddingXS,\n        paddingInlineEnd: token.paddingXS\n      }\n    })\n  }, // ===================== Hover =====================\n  {\n    // Wrapper & Wrapper > Checkbox\n    [`\n        ${wrapperCls}:not(${wrapperCls}-disabled),\n        ${checkboxCls}:not(${checkboxCls}-disabled)\n      `]: {\n      [`&:hover ${checkboxCls}-inner`]: {\n        borderColor: token.colorPrimary\n      }\n    },\n    [`${wrapperCls}:not(${wrapperCls}-disabled)`]: {\n      [`&:hover ${checkboxCls}-checked:not(${checkboxCls}-disabled) ${checkboxCls}-inner`]: {\n        backgroundColor: token.colorPrimaryHover,\n        borderColor: 'transparent'\n      },\n      [`&:hover ${checkboxCls}-checked:not(${checkboxCls}-disabled):after`]: {\n        borderColor: token.colorPrimaryHover\n      }\n    }\n  }, // ==================== Checked ====================\n  {\n    // Wrapper > Checkbox\n    [`${checkboxCls}-checked`]: {\n      [`${checkboxCls}-inner`]: {\n        backgroundColor: token.colorPrimary,\n        borderColor: token.colorPrimary,\n        '&:after': {\n          opacity: 1,\n          transform: 'rotate(45deg) scale(1) translate(-50%,-50%)',\n          transition: `all ${token.motionDurationMid} ${token.motionEaseOutBack} ${token.motionDurationFast}`\n        }\n      }\n    },\n    [`\n        ${wrapperCls}-checked:not(${wrapperCls}-disabled),\n        ${checkboxCls}-checked:not(${checkboxCls}-disabled)\n      `]: {\n      [`&:hover ${checkboxCls}-inner`]: {\n        backgroundColor: token.colorPrimaryHover,\n        borderColor: 'transparent'\n      }\n    }\n  }, // ================= Indeterminate =================\n  {\n    [checkboxCls]: {\n      '&-indeterminate': {\n        // Wrapper > Checkbox > inner\n        [`${checkboxCls}-inner`]: {\n          backgroundColor: token.colorBgContainer,\n          borderColor: token.colorBorder,\n          '&:after': {\n            top: '50%',\n            insetInlineStart: '50%',\n            width: token.calc(token.fontSizeLG).div(2).equal(),\n            height: token.calc(token.fontSizeLG).div(2).equal(),\n            backgroundColor: token.colorPrimary,\n            border: 0,\n            transform: 'translate(-50%, -50%) scale(1)',\n            opacity: 1,\n            content: '\"\"'\n          }\n        }\n      }\n    }\n  }, // ==================== Disable ====================\n  {\n    // Wrapper\n    [`${wrapperCls}-disabled`]: {\n      cursor: 'not-allowed'\n    },\n    // Wrapper > Checkbox\n    [`${checkboxCls}-disabled`]: {\n      // Wrapper > Checkbox > input\n      [`&, ${checkboxCls}-input`]: {\n        cursor: 'not-allowed',\n        // Disabled for native input to enable Tooltip event handler\n        // ref: https://github.com/ant-design/ant-design/issues/39822#issuecomment-1365075901\n        pointerEvents: 'none'\n      },\n      // Wrapper > Checkbox > inner\n      [`${checkboxCls}-inner`]: {\n        background: token.colorBgContainerDisabled,\n        borderColor: token.colorBorder,\n        '&:after': {\n          borderColor: token.colorTextDisabled\n        }\n      },\n      '&:after': {\n        display: 'none'\n      },\n      '& + span': {\n        color: token.colorTextDisabled\n      },\n      [`&${checkboxCls}-indeterminate ${checkboxCls}-inner::after`]: {\n        background: token.colorTextDisabled\n      }\n    }\n  }];\n}; // ============================== Export ==============================\n\nexport function getStyle(prefixCls, token) {\n  const checkboxToken = mergeToken(token, {\n    checkboxCls: `.${prefixCls}`,\n    checkboxSize: token.controlInteractiveSize\n  });\n  return [genCheckboxStyle(checkboxToken)];\n}\nexport default genStyleHooks('Checkbox', (token, _ref) => {\n  let {\n    prefixCls\n  } = _ref;\n  return [getStyle(prefixCls, token)];\n});","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/antd/es/checkbox/style/index.js"],"names":["unit","genFocusOutline","resetComponent","genStyleHooks","mergeToken","genCheckboxStyle","token","checkboxCls","wrapperCls","Object","assign","display","flexWrap","columnGap","marginXS","antCls","flex","alignItems","cursor","width","overflow","content","marginInlineStart","height","position","whiteSpace","lineHeight","borderRadius","borderRadiusSM","alignSelf","inset","zIndex","opacity","margin","boxSizing","checkboxSize","direction","backgroundColor","colorBgContainer","border","lineWidth","lineType","colorBorder","borderCollapse","transition","motionDurationSlow","top","insetInlineStart","calc","div","mul","equal","lineWidthBold","colorWhite","borderTop","borderInlineStart","transform","motionDurationFast","motionEaseInBack","paddingInlineStart","paddingXS","paddingInlineEnd","borderColor","colorPrimary","colorPrimaryHover","motionDurationMid","motionEaseOutBack","fontSizeLG","pointerEvents","background","colorBgContainerDisabled","colorTextDisabled","color","getStyle","prefixCls","checkboxToken","controlInteractiveSize","_ref"],"mappings":"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","sourcesContent":["import { unit } from '@ant-design/cssinjs';\nimport { genFocusOutline, resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\n// ============================== Styles ==============================\nexport const genCheckboxStyle = token => {\n  const {\n    checkboxCls\n  } = token;\n  const wrapperCls = `${checkboxCls}-wrapper`;\n  return [\n  // ===================== Basic =====================\n  {\n    // Group\n    [`${checkboxCls}-group`]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-flex',\n      flexWrap: 'wrap',\n      columnGap: token.marginXS,\n      // Group > Grid\n      [`> ${token.antCls}-row`]: {\n        flex: 1\n      }\n    }),\n    // Wrapper\n    [wrapperCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-flex',\n      alignItems: 'baseline',\n      cursor: 'pointer',\n      // Fix checkbox & radio in flex align #30260\n      '&:after': {\n        display: 'inline-block',\n        width: 0,\n        overflow: 'hidden',\n        content: \"'\\\\a0'\"\n      },\n      // Checkbox near checkbox\n      [`& + ${wrapperCls}`]: {\n        marginInlineStart: 0\n      },\n      [`&${wrapperCls}-in-form-item`]: {\n        'input[type=\"checkbox\"]': {\n          width: 14,\n          // FIXME: magic\n          height: 14 // FIXME: magic\n        }\n      }\n    }),\n    // Wrapper > Checkbox\n    [checkboxCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      whiteSpace: 'nowrap',\n      lineHeight: 1,\n      cursor: 'pointer',\n      borderRadius: token.borderRadiusSM,\n      // To make alignment right when `controlHeight` is changed\n      // Ref: https://github.com/ant-design/ant-design/issues/41564\n      alignSelf: 'center',\n      // Wrapper > Checkbox > input\n      [`${checkboxCls}-input`]: {\n        position: 'absolute',\n        // Since baseline align will get additional space offset,\n        // we need to move input to top to make it align with text.\n        // Ref: https://github.com/ant-design/ant-design/issues/38926#issuecomment-1486137799\n        inset: 0,\n        zIndex: 1,\n        cursor: 'pointer',\n        opacity: 0,\n        margin: 0,\n        [`&:focus-visible + ${checkboxCls}-inner`]: Object.assign({}, genFocusOutline(token))\n      },\n      // Wrapper > Checkbox > inner\n      [`${checkboxCls}-inner`]: {\n        boxSizing: 'border-box',\n        display: 'block',\n        width: token.checkboxSize,\n        height: token.checkboxSize,\n        direction: 'ltr',\n        backgroundColor: token.colorBgContainer,\n        border: `${unit(token.lineWidth)} ${token.lineType} ${token.colorBorder}`,\n        borderRadius: token.borderRadiusSM,\n        borderCollapse: 'separate',\n        transition: `all ${token.motionDurationSlow}`,\n        '&:after': {\n          boxSizing: 'border-box',\n          position: 'absolute',\n          top: '50%',\n          insetInlineStart: '25%',\n          display: 'table',\n          width: token.calc(token.checkboxSize).div(14).mul(5).equal(),\n          height: token.calc(token.checkboxSize).div(14).mul(8).equal(),\n          border: `${unit(token.lineWidthBold)} solid ${token.colorWhite}`,\n          borderTop: 0,\n          borderInlineStart: 0,\n          transform: 'rotate(45deg) scale(0) translate(-50%,-50%)',\n          opacity: 0,\n          content: '\"\"',\n          transition: `all ${token.motionDurationFast} ${token.motionEaseInBack}, opacity ${token.motionDurationFast}`\n        }\n      },\n      // Wrapper > Checkbox + Text\n      '& + span': {\n        paddingInlineStart: token.paddingXS,\n        paddingInlineEnd: token.paddingXS\n      }\n    })\n  },\n  // ===================== Hover =====================\n  {\n    // Wrapper & Wrapper > Checkbox\n    [`\n        ${wrapperCls}:not(${wrapperCls}-disabled),\n        ${checkboxCls}:not(${checkboxCls}-disabled)\n      `]: {\n      [`&:hover ${checkboxCls}-inner`]: {\n        borderColor: token.colorPrimary\n      }\n    },\n    [`${wrapperCls}:not(${wrapperCls}-disabled)`]: {\n      [`&:hover ${checkboxCls}-checked:not(${checkboxCls}-disabled) ${checkboxCls}-inner`]: {\n        backgroundColor: token.colorPrimaryHover,\n        borderColor: 'transparent'\n      },\n      [`&:hover ${checkboxCls}-checked:not(${checkboxCls}-disabled):after`]: {\n        borderColor: token.colorPrimaryHover\n      }\n    }\n  },\n  // ==================== Checked ====================\n  {\n    // Wrapper > Checkbox\n    [`${checkboxCls}-checked`]: {\n      [`${checkboxCls}-inner`]: {\n        backgroundColor: token.colorPrimary,\n        borderColor: token.colorPrimary,\n        '&:after': {\n          opacity: 1,\n          transform: 'rotate(45deg) scale(1) translate(-50%,-50%)',\n          transition: `all ${token.motionDurationMid} ${token.motionEaseOutBack} ${token.motionDurationFast}`\n        }\n      }\n    },\n    [`\n        ${wrapperCls}-checked:not(${wrapperCls}-disabled),\n        ${checkboxCls}-checked:not(${checkboxCls}-disabled)\n      `]: {\n      [`&:hover ${checkboxCls}-inner`]: {\n        backgroundColor: token.colorPrimaryHover,\n        borderColor: 'transparent'\n      }\n    }\n  },\n  // ================= Indeterminate =================\n  {\n    [checkboxCls]: {\n      '&-indeterminate': {\n        // Wrapper > Checkbox > inner\n        [`${checkboxCls}-inner`]: {\n          backgroundColor: token.colorBgContainer,\n          borderColor: token.colorBorder,\n          '&:after': {\n            top: '50%',\n            insetInlineStart: '50%',\n            width: token.calc(token.fontSizeLG).div(2).equal(),\n            height: token.calc(token.fontSizeLG).div(2).equal(),\n            backgroundColor: token.colorPrimary,\n            border: 0,\n            transform: 'translate(-50%, -50%) scale(1)',\n            opacity: 1,\n            content: '\"\"'\n          }\n        }\n      }\n    }\n  },\n  // ==================== Disable ====================\n  {\n    // Wrapper\n    [`${wrapperCls}-disabled`]: {\n      cursor: 'not-allowed'\n    },\n    // Wrapper > Checkbox\n    [`${checkboxCls}-disabled`]: {\n      // Wrapper > Checkbox > input\n      [`&, ${checkboxCls}-input`]: {\n        cursor: 'not-allowed',\n        // Disabled for native input to enable Tooltip event handler\n        // ref: https://github.com/ant-design/ant-design/issues/39822#issuecomment-1365075901\n        pointerEvents: 'none'\n      },\n      // Wrapper > Checkbox > inner\n      [`${checkboxCls}-inner`]: {\n        background: token.colorBgContainerDisabled,\n        borderColor: token.colorBorder,\n        '&:after': {\n          borderColor: token.colorTextDisabled\n        }\n      },\n      '&:after': {\n        display: 'none'\n      },\n      '& + span': {\n        color: token.colorTextDisabled\n      },\n      [`&${checkboxCls}-indeterminate ${checkboxCls}-inner::after`]: {\n        background: token.colorTextDisabled\n      }\n    }\n  }];\n};\n// ============================== Export ==============================\nexport function getStyle(prefixCls, token) {\n  const checkboxToken = mergeToken(token, {\n    checkboxCls: `.${prefixCls}`,\n    checkboxSize: token.controlInteractiveSize\n  });\n  return [genCheckboxStyle(checkboxToken)];\n}\nexport default genStyleHooks('Checkbox', (token, _ref) => {\n  let {\n    prefixCls\n  } = _ref;\n  return [getStyle(prefixCls, token)];\n});"]},"metadata":{},"sourceType":"module"}