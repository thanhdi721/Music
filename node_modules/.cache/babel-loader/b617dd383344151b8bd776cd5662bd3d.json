{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport { resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal'; // ============================== Styles ==============================\n\nconst genBaseStyle = token => {\n  const {\n    paddingXXS,\n    lineWidth,\n    tagPaddingHorizontal,\n    componentCls,\n    calc\n  } = token;\n  const paddingInline = calc(tagPaddingHorizontal).sub(lineWidth).equal();\n  const iconMarginInline = calc(paddingXXS).sub(lineWidth).equal();\n  return {\n    // Result\n    [componentCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-block',\n      height: 'auto',\n      // https://github.com/ant-design/ant-design/pull/47504\n      marginInlineEnd: token.marginXS,\n      paddingInline,\n      fontSize: token.tagFontSize,\n      lineHeight: token.tagLineHeight,\n      whiteSpace: 'nowrap',\n      background: token.defaultBg,\n      border: `${unit(token.lineWidth)} ${token.lineType} ${token.colorBorder}`,\n      borderRadius: token.borderRadiusSM,\n      opacity: 1,\n      transition: `all ${token.motionDurationMid}`,\n      textAlign: 'start',\n      position: 'relative',\n      // RTL\n      [`&${componentCls}-rtl`]: {\n        direction: 'rtl'\n      },\n      '&, a, a:hover': {\n        color: token.defaultColor\n      },\n      [`${componentCls}-close-icon`]: {\n        marginInlineStart: iconMarginInline,\n        fontSize: token.tagIconSize,\n        color: token.colorTextDescription,\n        cursor: 'pointer',\n        transition: `all ${token.motionDurationMid}`,\n        '&:hover': {\n          color: token.colorTextHeading\n        }\n      },\n      [`&${componentCls}-has-color`]: {\n        borderColor: 'transparent',\n        [`&, a, a:hover, ${token.iconCls}-close, ${token.iconCls}-close:hover`]: {\n          color: token.colorTextLightSolid\n        }\n      },\n      [`&-checkable`]: {\n        backgroundColor: 'transparent',\n        borderColor: 'transparent',\n        cursor: 'pointer',\n        [`&:not(${componentCls}-checkable-checked):hover`]: {\n          color: token.colorPrimary,\n          backgroundColor: token.colorFillSecondary\n        },\n        '&:active, &-checked': {\n          color: token.colorTextLightSolid\n        },\n        '&-checked': {\n          backgroundColor: token.colorPrimary,\n          '&:hover': {\n            backgroundColor: token.colorPrimaryHover\n          }\n        },\n        '&:active': {\n          backgroundColor: token.colorPrimaryActive\n        }\n      },\n      [`&-hidden`]: {\n        display: 'none'\n      },\n      // To ensure that a space will be placed between character and `Icon`.\n      [`> ${token.iconCls} + span, > span + ${token.iconCls}`]: {\n        marginInlineStart: paddingInline\n      }\n    }),\n    [`${componentCls}-borderless`]: {\n      borderColor: 'transparent',\n      background: token.tagBorderlessBg\n    }\n  };\n}; // ============================== Export ==============================\n\n\nexport const prepareToken = token => {\n  const {\n    lineWidth,\n    fontSizeIcon,\n    calc\n  } = token;\n  const tagFontSize = token.fontSizeSM;\n  const tagToken = mergeToken(token, {\n    tagFontSize,\n    tagLineHeight: unit(calc(token.lineHeightSM).mul(tagFontSize).equal()),\n    tagIconSize: calc(fontSizeIcon).sub(calc(lineWidth).mul(2)).equal(),\n    // Tag icon is much smaller\n    tagPaddingHorizontal: 8,\n    // Fixed padding.\n    tagBorderlessBg: token.defaultBg\n  });\n  return tagToken;\n};\nexport const prepareComponentToken = token => ({\n  defaultBg: new TinyColor(token.colorFillQuaternary).onBackground(token.colorBgContainer).toHexString(),\n  defaultColor: token.colorText\n});\nexport default genStyleHooks('Tag', token => {\n  const tagToken = prepareToken(token);\n  return genBaseStyle(tagToken);\n}, prepareComponentToken);","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/antd/es/tag/style/index.js"],"names":["unit","TinyColor","resetComponent","genStyleHooks","mergeToken","genBaseStyle","token","paddingXXS","lineWidth","tagPaddingHorizontal","componentCls","calc","paddingInline","sub","equal","iconMarginInline","Object","assign","display","height","marginInlineEnd","marginXS","fontSize","tagFontSize","lineHeight","tagLineHeight","whiteSpace","background","defaultBg","border","lineType","colorBorder","borderRadius","borderRadiusSM","opacity","transition","motionDurationMid","textAlign","position","direction","color","defaultColor","marginInlineStart","tagIconSize","colorTextDescription","cursor","colorTextHeading","borderColor","iconCls","colorTextLightSolid","backgroundColor","colorPrimary","colorFillSecondary","colorPrimaryHover","colorPrimaryActive","tagBorderlessBg","prepareToken","fontSizeIcon","fontSizeSM","tagToken","lineHeightSM","mul","prepareComponentToken","colorFillQuaternary","onBackground","colorBgContainer","toHexString","colorText"],"mappings":"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","sourcesContent":["import { unit } from '@ant-design/cssinjs';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport { resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\n// ============================== Styles ==============================\nconst genBaseStyle = token => {\n  const {\n    paddingXXS,\n    lineWidth,\n    tagPaddingHorizontal,\n    componentCls,\n    calc\n  } = token;\n  const paddingInline = calc(tagPaddingHorizontal).sub(lineWidth).equal();\n  const iconMarginInline = calc(paddingXXS).sub(lineWidth).equal();\n  return {\n    // Result\n    [componentCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-block',\n      height: 'auto',\n      // https://github.com/ant-design/ant-design/pull/47504\n      marginInlineEnd: token.marginXS,\n      paddingInline,\n      fontSize: token.tagFontSize,\n      lineHeight: token.tagLineHeight,\n      whiteSpace: 'nowrap',\n      background: token.defaultBg,\n      border: `${unit(token.lineWidth)} ${token.lineType} ${token.colorBorder}`,\n      borderRadius: token.borderRadiusSM,\n      opacity: 1,\n      transition: `all ${token.motionDurationMid}`,\n      textAlign: 'start',\n      position: 'relative',\n      // RTL\n      [`&${componentCls}-rtl`]: {\n        direction: 'rtl'\n      },\n      '&, a, a:hover': {\n        color: token.defaultColor\n      },\n      [`${componentCls}-close-icon`]: {\n        marginInlineStart: iconMarginInline,\n        fontSize: token.tagIconSize,\n        color: token.colorTextDescription,\n        cursor: 'pointer',\n        transition: `all ${token.motionDurationMid}`,\n        '&:hover': {\n          color: token.colorTextHeading\n        }\n      },\n      [`&${componentCls}-has-color`]: {\n        borderColor: 'transparent',\n        [`&, a, a:hover, ${token.iconCls}-close, ${token.iconCls}-close:hover`]: {\n          color: token.colorTextLightSolid\n        }\n      },\n      [`&-checkable`]: {\n        backgroundColor: 'transparent',\n        borderColor: 'transparent',\n        cursor: 'pointer',\n        [`&:not(${componentCls}-checkable-checked):hover`]: {\n          color: token.colorPrimary,\n          backgroundColor: token.colorFillSecondary\n        },\n        '&:active, &-checked': {\n          color: token.colorTextLightSolid\n        },\n        '&-checked': {\n          backgroundColor: token.colorPrimary,\n          '&:hover': {\n            backgroundColor: token.colorPrimaryHover\n          }\n        },\n        '&:active': {\n          backgroundColor: token.colorPrimaryActive\n        }\n      },\n      [`&-hidden`]: {\n        display: 'none'\n      },\n      // To ensure that a space will be placed between character and `Icon`.\n      [`> ${token.iconCls} + span, > span + ${token.iconCls}`]: {\n        marginInlineStart: paddingInline\n      }\n    }),\n    [`${componentCls}-borderless`]: {\n      borderColor: 'transparent',\n      background: token.tagBorderlessBg\n    }\n  };\n};\n// ============================== Export ==============================\nexport const prepareToken = token => {\n  const {\n    lineWidth,\n    fontSizeIcon,\n    calc\n  } = token;\n  const tagFontSize = token.fontSizeSM;\n  const tagToken = mergeToken(token, {\n    tagFontSize,\n    tagLineHeight: unit(calc(token.lineHeightSM).mul(tagFontSize).equal()),\n    tagIconSize: calc(fontSizeIcon).sub(calc(lineWidth).mul(2)).equal(),\n    // Tag icon is much smaller\n    tagPaddingHorizontal: 8,\n    // Fixed padding.\n    tagBorderlessBg: token.defaultBg\n  });\n  return tagToken;\n};\nexport const prepareComponentToken = token => ({\n  defaultBg: new TinyColor(token.colorFillQuaternary).onBackground(token.colorBgContainer).toHexString(),\n  defaultColor: token.colorText\n});\nexport default genStyleHooks('Tag', token => {\n  const tagToken = prepareToken(token);\n  return genBaseStyle(tagToken);\n}, prepareComponentToken);"]},"metadata":{},"sourceType":"module"}