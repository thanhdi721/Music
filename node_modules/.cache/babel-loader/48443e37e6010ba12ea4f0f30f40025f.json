{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { useContext } from '@rc-component/context';\nimport TableContext from \"../context/TableContext\";\nimport { getColumnsKey } from \"../utils/valueUtil\";\nimport { useEvent } from 'rc-util';\nimport classNames from 'classnames';\nexport default function useRowInfo(record, rowKey, recordIndex, indent) {\n  var context = useContext(TableContext, ['prefixCls', 'fixedInfoList', 'flattenColumns', 'expandableType', 'expandRowByClick', 'onTriggerExpand', 'rowClassName', 'expandedRowClassName', 'indentSize', 'expandIcon', 'expandedRowRender', 'expandIconColumnIndex', 'expandedKeys', 'childrenColumnName', 'rowExpandable', 'onRow']);\n  var flattenColumns = context.flattenColumns,\n      expandableType = context.expandableType,\n      expandedKeys = context.expandedKeys,\n      childrenColumnName = context.childrenColumnName,\n      onTriggerExpand = context.onTriggerExpand,\n      rowExpandable = context.rowExpandable,\n      onRow = context.onRow,\n      expandRowByClick = context.expandRowByClick,\n      rowClassName = context.rowClassName; // ======================= Expandable =======================\n  // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record));\n  var mergedExpandable = rowSupportExpand || nestExpandable;\n  var expanded = expandedKeys && expandedKeys.has(rowKey);\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var onInternalTriggerExpand = useEvent(onTriggerExpand); // ========================= onRow ==========================\n\n  var rowProps = onRow === null || onRow === void 0 ? void 0 : onRow(record, recordIndex);\n  var onRowClick = rowProps === null || rowProps === void 0 ? void 0 : rowProps.onClick;\n\n  var onClick = function onClick(event) {\n    if (expandRowByClick && mergedExpandable) {\n      onTriggerExpand(record, event);\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    onRowClick === null || onRowClick === void 0 || onRowClick.apply(void 0, [event].concat(args));\n  }; // ====================== RowClassName ======================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, recordIndex, indent);\n  } // ========================= Column =========================\n\n\n  var columnsKey = getColumnsKey(flattenColumns);\n  return _objectSpread(_objectSpread({}, context), {}, {\n    columnsKey: columnsKey,\n    nestExpandable: nestExpandable,\n    expanded: expanded,\n    hasNestChildren: hasNestChildren,\n    record: record,\n    onTriggerExpand: onInternalTriggerExpand,\n    rowSupportExpand: rowSupportExpand,\n    expandable: mergedExpandable,\n    rowProps: _objectSpread(_objectSpread({}, rowProps), {}, {\n      className: classNames(computeRowClassName, rowProps === null || rowProps === void 0 ? void 0 : rowProps.className),\n      onClick: onClick\n    })\n  });\n}","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/rc-table/es/hooks/useRowInfo.js"],"names":["_objectSpread","useContext","TableContext","getColumnsKey","useEvent","classNames","useRowInfo","record","rowKey","recordIndex","indent","context","flattenColumns","expandableType","expandedKeys","childrenColumnName","onTriggerExpand","rowExpandable","onRow","expandRowByClick","rowClassName","nestExpandable","rowSupportExpand","mergedExpandable","expanded","has","hasNestChildren","onInternalTriggerExpand","rowProps","onRowClick","onClick","event","_len","arguments","length","args","Array","_key","apply","concat","computeRowClassName","columnsKey","expandable","className"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { useContext } from '@rc-component/context';\nimport TableContext from \"../context/TableContext\";\nimport { getColumnsKey } from \"../utils/valueUtil\";\nimport { useEvent } from 'rc-util';\nimport classNames from 'classnames';\nexport default function useRowInfo(record, rowKey, recordIndex, indent) {\n  var context = useContext(TableContext, ['prefixCls', 'fixedInfoList', 'flattenColumns', 'expandableType', 'expandRowByClick', 'onTriggerExpand', 'rowClassName', 'expandedRowClassName', 'indentSize', 'expandIcon', 'expandedRowRender', 'expandIconColumnIndex', 'expandedKeys', 'childrenColumnName', 'rowExpandable', 'onRow']);\n  var flattenColumns = context.flattenColumns,\n    expandableType = context.expandableType,\n    expandedKeys = context.expandedKeys,\n    childrenColumnName = context.childrenColumnName,\n    onTriggerExpand = context.onTriggerExpand,\n    rowExpandable = context.rowExpandable,\n    onRow = context.onRow,\n    expandRowByClick = context.expandRowByClick,\n    rowClassName = context.rowClassName;\n\n  // ======================= Expandable =======================\n  // Only when row is not expandable and `children` exist in record\n  var nestExpandable = expandableType === 'nest';\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record));\n  var mergedExpandable = rowSupportExpand || nestExpandable;\n  var expanded = expandedKeys && expandedKeys.has(rowKey);\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var onInternalTriggerExpand = useEvent(onTriggerExpand);\n\n  // ========================= onRow ==========================\n  var rowProps = onRow === null || onRow === void 0 ? void 0 : onRow(record, recordIndex);\n  var onRowClick = rowProps === null || rowProps === void 0 ? void 0 : rowProps.onClick;\n  var onClick = function onClick(event) {\n    if (expandRowByClick && mergedExpandable) {\n      onTriggerExpand(record, event);\n    }\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    onRowClick === null || onRowClick === void 0 || onRowClick.apply(void 0, [event].concat(args));\n  };\n\n  // ====================== RowClassName ======================\n  var computeRowClassName;\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, recordIndex, indent);\n  }\n\n  // ========================= Column =========================\n  var columnsKey = getColumnsKey(flattenColumns);\n  return _objectSpread(_objectSpread({}, context), {}, {\n    columnsKey: columnsKey,\n    nestExpandable: nestExpandable,\n    expanded: expanded,\n    hasNestChildren: hasNestChildren,\n    record: record,\n    onTriggerExpand: onInternalTriggerExpand,\n    rowSupportExpand: rowSupportExpand,\n    expandable: mergedExpandable,\n    rowProps: _objectSpread(_objectSpread({}, rowProps), {}, {\n      className: classNames(computeRowClassName, rowProps === null || rowProps === void 0 ? void 0 : rowProps.className),\n      onClick: onClick\n    })\n  });\n}"]},"metadata":{},"sourceType":"module"}