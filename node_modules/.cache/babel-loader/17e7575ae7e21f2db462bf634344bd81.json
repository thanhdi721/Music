{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { getStyle as getCheckboxStyle } from '../../checkbox/style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nimport { genTreeStyle, initComponentToken } from '../../tree/style'; // =============================== Base ===============================\n\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    treePrefixCls,\n    colorBgElevated\n  } = token;\n  const treeCls = `.${treePrefixCls}`;\n  return [// ======================================================\n  // ==                     Dropdown                     ==\n  // ======================================================\n  {\n    [`${componentCls}-dropdown`]: [{\n      padding: `${unit(token.paddingXS)} ${unit(token.calc(token.paddingXS).div(2).equal())}`\n    }, // ====================== Tree ======================\n    genTreeStyle(treePrefixCls, mergeToken(token, {\n      colorBgContainer: colorBgElevated\n    })), {\n      [treeCls]: {\n        borderRadius: 0,\n        [`${treeCls}-list-holder-inner`]: {\n          alignItems: 'stretch',\n          [`${treeCls}-treenode`]: {\n            [`${treeCls}-node-content-wrapper`]: {\n              flex: 'auto'\n            }\n          }\n        }\n      }\n    }, // ==================== Checkbox ====================\n    getCheckboxStyle(`${treePrefixCls}-checkbox`, token), // ====================== RTL =======================\n    {\n      '&-rtl': {\n        direction: 'rtl',\n        [`${treeCls}-switcher${treeCls}-switcher_close`]: {\n          [`${treeCls}-switcher-icon svg`]: {\n            transform: 'rotate(90deg)'\n          }\n        }\n      }\n    }]\n  }];\n};\n\nexport const prepareComponentToken = initComponentToken; // ============================== Export ==============================\n\nexport default function useTreeSelectStyle(prefixCls, treePrefixCls, rootCls) {\n  return genStyleHooks('TreeSelect', token => {\n    const treeSelectToken = mergeToken(token, {\n      treePrefixCls\n    });\n    return [genBaseStyle(treeSelectToken)];\n  }, initComponentToken)(prefixCls, rootCls);\n}","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/antd/es/tree-select/style/index.js"],"names":["unit","getStyle","getCheckboxStyle","genStyleHooks","mergeToken","genTreeStyle","initComponentToken","genBaseStyle","token","componentCls","treePrefixCls","colorBgElevated","treeCls","padding","paddingXS","calc","div","equal","colorBgContainer","borderRadius","alignItems","flex","direction","transform","prepareComponentToken","useTreeSelectStyle","prefixCls","rootCls","treeSelectToken"],"mappings":"AAAA,SAASA,IAAT,QAAqB,qBAArB;AACA,SAASC,QAAQ,IAAIC,gBAArB,QAA6C,sBAA7C;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,sBAA1C;AACA,SAASC,YAAT,EAAuBC,kBAAvB,QAAiD,kBAAjD,C,CACA;;AACA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA;AAHI,MAIFH,KAJJ;AAKA,QAAMI,OAAO,GAAI,IAAGF,aAAc,EAAlC;AACA,SAAO,CACP;AACA;AACA;AACA;AACE,KAAE,GAAED,YAAa,WAAjB,GAA8B,CAAC;AAC7BI,MAAAA,OAAO,EAAG,GAAEb,IAAI,CAACQ,KAAK,CAACM,SAAP,CAAkB,IAAGd,IAAI,CAACQ,KAAK,CAACO,IAAN,CAAWP,KAAK,CAACM,SAAjB,EAA4BE,GAA5B,CAAgC,CAAhC,EAAmCC,KAAnC,EAAD,CAA6C;AADzD,KAAD,EAG9B;AACAZ,IAAAA,YAAY,CAACK,aAAD,EAAgBN,UAAU,CAACI,KAAD,EAAQ;AAC5CU,MAAAA,gBAAgB,EAAEP;AAD0B,KAAR,CAA1B,CAJkB,EAMzB;AACH,OAACC,OAAD,GAAW;AACTO,QAAAA,YAAY,EAAE,CADL;AAET,SAAE,GAAEP,OAAQ,oBAAZ,GAAkC;AAChCQ,UAAAA,UAAU,EAAE,SADoB;AAEhC,WAAE,GAAER,OAAQ,WAAZ,GAAyB;AACvB,aAAE,GAAEA,OAAQ,uBAAZ,GAAqC;AACnCS,cAAAA,IAAI,EAAE;AAD6B;AADd;AAFO;AAFzB;AADR,KANyB,EAmB9B;AACAnB,IAAAA,gBAAgB,CAAE,GAAEQ,aAAc,WAAlB,EAA8BF,KAA9B,CApBc,EAqB9B;AACA;AACE,eAAS;AACPc,QAAAA,SAAS,EAAE,KADJ;AAEP,SAAE,GAAEV,OAAQ,YAAWA,OAAQ,iBAA/B,GAAkD;AAChD,WAAE,GAAEA,OAAQ,oBAAZ,GAAkC;AAChCW,YAAAA,SAAS,EAAE;AADqB;AADc;AAF3C;AADX,KAtB8B;AADhC,GAJO,CAAP;AAsCD,CA7CD;;AA8CA,OAAO,MAAMC,qBAAqB,GAAGlB,kBAA9B,C,CACP;;AACA,eAAe,SAASmB,kBAAT,CAA4BC,SAA5B,EAAuChB,aAAvC,EAAsDiB,OAAtD,EAA+D;AAC5E,SAAOxB,aAAa,CAAC,YAAD,EAAeK,KAAK,IAAI;AAC1C,UAAMoB,eAAe,GAAGxB,UAAU,CAACI,KAAD,EAAQ;AACxCE,MAAAA;AADwC,KAAR,CAAlC;AAGA,WAAO,CAACH,YAAY,CAACqB,eAAD,CAAb,CAAP;AACD,GALmB,EAKjBtB,kBALiB,CAAb,CAKgBoB,SALhB,EAK2BC,OAL3B,CAAP;AAMD","sourcesContent":["import { unit } from '@ant-design/cssinjs';\nimport { getStyle as getCheckboxStyle } from '../../checkbox/style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nimport { genTreeStyle, initComponentToken } from '../../tree/style';\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    treePrefixCls,\n    colorBgElevated\n  } = token;\n  const treeCls = `.${treePrefixCls}`;\n  return [\n  // ======================================================\n  // ==                     Dropdown                     ==\n  // ======================================================\n  {\n    [`${componentCls}-dropdown`]: [{\n      padding: `${unit(token.paddingXS)} ${unit(token.calc(token.paddingXS).div(2).equal())}`\n    },\n    // ====================== Tree ======================\n    genTreeStyle(treePrefixCls, mergeToken(token, {\n      colorBgContainer: colorBgElevated\n    })), {\n      [treeCls]: {\n        borderRadius: 0,\n        [`${treeCls}-list-holder-inner`]: {\n          alignItems: 'stretch',\n          [`${treeCls}-treenode`]: {\n            [`${treeCls}-node-content-wrapper`]: {\n              flex: 'auto'\n            }\n          }\n        }\n      }\n    },\n    // ==================== Checkbox ====================\n    getCheckboxStyle(`${treePrefixCls}-checkbox`, token),\n    // ====================== RTL =======================\n    {\n      '&-rtl': {\n        direction: 'rtl',\n        [`${treeCls}-switcher${treeCls}-switcher_close`]: {\n          [`${treeCls}-switcher-icon svg`]: {\n            transform: 'rotate(90deg)'\n          }\n        }\n      }\n    }]\n  }];\n};\nexport const prepareComponentToken = initComponentToken;\n// ============================== Export ==============================\nexport default function useTreeSelectStyle(prefixCls, treePrefixCls, rootCls) {\n  return genStyleHooks('TreeSelect', token => {\n    const treeSelectToken = mergeToken(token, {\n      treePrefixCls\n    });\n    return [genBaseStyle(treeSelectToken)];\n  }, initComponentToken)(prefixCls, rootCls);\n}"]},"metadata":{},"sourceType":"module"}