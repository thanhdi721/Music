{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nimport { generateColor } from '../util';\n\nfunction hasValue(value) {\n  return value !== undefined;\n}\n\nconst useColorState = (defaultStateValue, option) => {\n  const {\n    defaultValue,\n    value\n  } = option;\n  const prevColor = useRef(generateColor(''));\n  const [colorValue, _setColorValue] = useState(() => {\n    let mergedState;\n\n    if (hasValue(value)) {\n      mergedState = value;\n    } else if (hasValue(defaultValue)) {\n      mergedState = defaultValue;\n    } else {\n      mergedState = defaultStateValue;\n    }\n\n    const color = generateColor(mergedState || '');\n    prevColor.current = color;\n    return color;\n  });\n\n  const setColorValue = color => {\n    _setColorValue(color);\n\n    prevColor.current = color;\n  };\n\n  useEffect(() => {\n    if (hasValue(value)) {\n      const newColor = generateColor(value || '');\n\n      if (prevColor.current.cleared === true) {\n        newColor.cleared = 'controlled';\n      }\n\n      setColorValue(newColor);\n    }\n  }, [value]);\n  return [colorValue, setColorValue, prevColor];\n};\n\nexport default useColorState;","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/antd/es/color-picker/hooks/useColorState.js"],"names":["useEffect","useRef","useState","generateColor","hasValue","value","undefined","useColorState","defaultStateValue","option","defaultValue","prevColor","colorValue","_setColorValue","mergedState","color","current","setColorValue","newColor","cleared"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,aAAT,QAA8B,SAA9B;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,SAAOA,KAAK,KAAKC,SAAjB;AACD;;AACD,MAAMC,aAAa,GAAG,CAACC,iBAAD,EAAoBC,MAApB,KAA+B;AACnD,QAAM;AACJC,IAAAA,YADI;AAEJL,IAAAA;AAFI,MAGFI,MAHJ;AAIA,QAAME,SAAS,GAAGV,MAAM,CAACE,aAAa,CAAC,EAAD,CAAd,CAAxB;AACA,QAAM,CAACS,UAAD,EAAaC,cAAb,IAA+BX,QAAQ,CAAC,MAAM;AAClD,QAAIY,WAAJ;;AACA,QAAIV,QAAQ,CAACC,KAAD,CAAZ,EAAqB;AACnBS,MAAAA,WAAW,GAAGT,KAAd;AACD,KAFD,MAEO,IAAID,QAAQ,CAACM,YAAD,CAAZ,EAA4B;AACjCI,MAAAA,WAAW,GAAGJ,YAAd;AACD,KAFM,MAEA;AACLI,MAAAA,WAAW,GAAGN,iBAAd;AACD;;AACD,UAAMO,KAAK,GAAGZ,aAAa,CAACW,WAAW,IAAI,EAAhB,CAA3B;AACAH,IAAAA,SAAS,CAACK,OAAV,GAAoBD,KAApB;AACA,WAAOA,KAAP;AACD,GAZ4C,CAA7C;;AAaA,QAAME,aAAa,GAAGF,KAAK,IAAI;AAC7BF,IAAAA,cAAc,CAACE,KAAD,CAAd;;AACAJ,IAAAA,SAAS,CAACK,OAAV,GAAoBD,KAApB;AACD,GAHD;;AAIAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,QAAQ,CAACC,KAAD,CAAZ,EAAqB;AACnB,YAAMa,QAAQ,GAAGf,aAAa,CAACE,KAAK,IAAI,EAAV,CAA9B;;AACA,UAAIM,SAAS,CAACK,OAAV,CAAkBG,OAAlB,KAA8B,IAAlC,EAAwC;AACtCD,QAAAA,QAAQ,CAACC,OAAT,GAAmB,YAAnB;AACD;;AACDF,MAAAA,aAAa,CAACC,QAAD,CAAb;AACD;AACF,GARQ,EAQN,CAACb,KAAD,CARM,CAAT;AASA,SAAO,CAACO,UAAD,EAAaK,aAAb,EAA4BN,SAA5B,CAAP;AACD,CAjCD;;AAkCA,eAAeJ,aAAf","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { generateColor } from '../util';\nfunction hasValue(value) {\n  return value !== undefined;\n}\nconst useColorState = (defaultStateValue, option) => {\n  const {\n    defaultValue,\n    value\n  } = option;\n  const prevColor = useRef(generateColor(''));\n  const [colorValue, _setColorValue] = useState(() => {\n    let mergedState;\n    if (hasValue(value)) {\n      mergedState = value;\n    } else if (hasValue(defaultValue)) {\n      mergedState = defaultValue;\n    } else {\n      mergedState = defaultStateValue;\n    }\n    const color = generateColor(mergedState || '');\n    prevColor.current = color;\n    return color;\n  });\n  const setColorValue = color => {\n    _setColorValue(color);\n    prevColor.current = color;\n  };\n  useEffect(() => {\n    if (hasValue(value)) {\n      const newColor = generateColor(value || '');\n      if (prevColor.current.cleared === true) {\n        newColor.cleared = 'controlled';\n      }\n      setColorValue(newColor);\n    }\n  }, [value]);\n  return [colorValue, setColorValue, prevColor];\n};\nexport default useColorState;"]},"metadata":{},"sourceType":"module"}