{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n/* eslint-disable default-case */\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport CascaderContext from \"../context\";\nimport { getFullPathKeys, isLeaf, scrollIntoParentView, toPathKey, toPathKeys, toPathValueStr } from \"../utils/commonUtil\";\nimport { toPathOptions } from \"../utils/treeUtil\";\nimport CacheContent from \"./CacheContent\";\nimport Column, { FIX_LABEL } from \"./Column\";\nimport useActive from \"./useActive\";\nimport useKeyboard from \"./useKeyboard\";\nvar RawOptionList = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _optionColumns$, _ref3, _classNames;\n\n  var prefixCls = props.prefixCls,\n      multiple = props.multiple,\n      searchValue = props.searchValue,\n      toggleOpen = props.toggleOpen,\n      notFoundContent = props.notFoundContent,\n      direction = props.direction,\n      open = props.open;\n  var containerRef = React.useRef();\n  var rtl = direction === 'rtl';\n\n  var _React$useContext = React.useContext(CascaderContext),\n      options = _React$useContext.options,\n      values = _React$useContext.values,\n      halfValues = _React$useContext.halfValues,\n      fieldNames = _React$useContext.fieldNames,\n      changeOnSelect = _React$useContext.changeOnSelect,\n      onSelect = _React$useContext.onSelect,\n      searchOptions = _React$useContext.searchOptions,\n      dropdownPrefixCls = _React$useContext.dropdownPrefixCls,\n      loadData = _React$useContext.loadData,\n      expandTrigger = _React$useContext.expandTrigger;\n\n  var mergedPrefixCls = dropdownPrefixCls || prefixCls; // ========================= loadData =========================\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loadingKeys = _React$useState2[0],\n      setLoadingKeys = _React$useState2[1];\n\n  var internalLoadData = function internalLoadData(valueCells) {\n    // Do not load when search\n    if (!loadData || searchValue) {\n      return;\n    }\n\n    var optionList = toPathOptions(valueCells, options, fieldNames);\n    var rawOptions = optionList.map(function (_ref) {\n      var option = _ref.option;\n      return option;\n    });\n    var lastOption = rawOptions[rawOptions.length - 1];\n\n    if (lastOption && !isLeaf(lastOption, fieldNames)) {\n      var pathKey = toPathKey(valueCells);\n      setLoadingKeys(function (keys) {\n        return [].concat(_toConsumableArray(keys), [pathKey]);\n      });\n      loadData(rawOptions);\n    }\n  }; // zombieJ: This is bad. We should make this same as `rc-tree` to use Promise instead.\n\n\n  React.useEffect(function () {\n    if (loadingKeys.length) {\n      loadingKeys.forEach(function (loadingKey) {\n        var valueStrCells = toPathValueStr(loadingKey);\n        var optionList = toPathOptions(valueStrCells, options, fieldNames, true).map(function (_ref2) {\n          var option = _ref2.option;\n          return option;\n        });\n        var lastOption = optionList[optionList.length - 1];\n\n        if (!lastOption || lastOption[fieldNames.children] || isLeaf(lastOption, fieldNames)) {\n          setLoadingKeys(function (keys) {\n            return keys.filter(function (key) {\n              return key !== loadingKey;\n            });\n          });\n        }\n      });\n    }\n  }, [options, loadingKeys, fieldNames]); // ========================== Values ==========================\n\n  var checkedSet = React.useMemo(function () {\n    return new Set(toPathKeys(values));\n  }, [values]);\n  var halfCheckedSet = React.useMemo(function () {\n    return new Set(toPathKeys(halfValues));\n  }, [halfValues]); // ====================== Accessibility =======================\n\n  var _useActive = useActive(multiple, open),\n      _useActive2 = _slicedToArray(_useActive, 2),\n      activeValueCells = _useActive2[0],\n      setActiveValueCells = _useActive2[1]; // =========================== Path ===========================\n\n\n  var onPathOpen = function onPathOpen(nextValueCells) {\n    setActiveValueCells(nextValueCells); // Trigger loadData\n\n    internalLoadData(nextValueCells);\n  };\n\n  var isSelectable = function isSelectable(option) {\n    var disabled = option.disabled;\n    var isMergedLeaf = isLeaf(option, fieldNames);\n    return !disabled && (isMergedLeaf || changeOnSelect || multiple);\n  };\n\n  var onPathSelect = function onPathSelect(valuePath, leaf) {\n    var fromKeyboard = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    onSelect(valuePath);\n\n    if (!multiple && (leaf || changeOnSelect && (expandTrigger === 'hover' || fromKeyboard))) {\n      toggleOpen(false);\n    }\n  }; // ========================== Option ==========================\n\n\n  var mergedOptions = React.useMemo(function () {\n    if (searchValue) {\n      return searchOptions;\n    }\n\n    return options;\n  }, [searchValue, searchOptions, options]); // ========================== Column ==========================\n\n  var optionColumns = React.useMemo(function () {\n    var optionList = [{\n      options: mergedOptions\n    }];\n    var currentList = mergedOptions;\n    var fullPathKeys = getFullPathKeys(currentList, fieldNames);\n\n    var _loop = function _loop() {\n      var activeValueCell = activeValueCells[i];\n      var currentOption = currentList.find(function (option, index) {\n        return (fullPathKeys[index] ? toPathKey(fullPathKeys[index]) : option[fieldNames.value]) === activeValueCell;\n      });\n      var subOptions = currentOption === null || currentOption === void 0 ? void 0 : currentOption[fieldNames.children];\n\n      if (!(subOptions !== null && subOptions !== void 0 && subOptions.length)) {\n        return 1; // break\n      }\n\n      currentList = subOptions;\n      optionList.push({\n        options: subOptions\n      });\n    };\n\n    for (var i = 0; i < activeValueCells.length; i += 1) {\n      if (_loop()) break;\n    }\n\n    return optionList;\n  }, [mergedOptions, activeValueCells, fieldNames]); // ========================= Keyboard =========================\n\n  var onKeyboardSelect = function onKeyboardSelect(selectValueCells, option) {\n    if (isSelectable(option)) {\n      onPathSelect(selectValueCells, isLeaf(option, fieldNames), true);\n    }\n  };\n\n  useKeyboard(ref, mergedOptions, fieldNames, activeValueCells, onPathOpen, onKeyboardSelect, {\n    direction: direction,\n    searchValue: searchValue,\n    toggleOpen: toggleOpen,\n    open: open\n  }); // >>>>> Active Scroll\n\n  React.useEffect(function () {\n    for (var i = 0; i < activeValueCells.length; i += 1) {\n      var _containerRef$current;\n\n      var cellPath = activeValueCells.slice(0, i + 1);\n      var cellKeyPath = toPathKey(cellPath);\n      var ele = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.querySelector(\"li[data-path-key=\\\"\".concat(cellKeyPath.replace(/\\\\{0,2}\"/g, '\\\\\"'), \"\\\"]\") // matches unescaped double quotes\n      );\n\n      if (ele) {\n        scrollIntoParentView(ele);\n      }\n    }\n  }, [activeValueCells]); // ========================== Render ==========================\n  // >>>>> Empty\n\n  var isEmpty = !((_optionColumns$ = optionColumns[0]) !== null && _optionColumns$ !== void 0 && (_optionColumns$ = _optionColumns$.options) !== null && _optionColumns$ !== void 0 && _optionColumns$.length);\n  var emptyList = [(_ref3 = {}, _defineProperty(_ref3, fieldNames.value, '__EMPTY__'), _defineProperty(_ref3, FIX_LABEL, notFoundContent), _defineProperty(_ref3, \"disabled\", true), _ref3)];\n\n  var columnProps = _objectSpread(_objectSpread({}, props), {}, {\n    multiple: !isEmpty && multiple,\n    onSelect: onPathSelect,\n    onActive: onPathOpen,\n    onToggleOpen: toggleOpen,\n    checkedSet: checkedSet,\n    halfCheckedSet: halfCheckedSet,\n    loadingKeys: loadingKeys,\n    isSelectable: isSelectable\n  }); // >>>>> Columns\n\n\n  var mergedOptionColumns = isEmpty ? [{\n    options: emptyList\n  }] : optionColumns;\n  var columnNodes = mergedOptionColumns.map(function (col, index) {\n    var prevValuePath = activeValueCells.slice(0, index);\n    var activeValue = activeValueCells[index];\n    return /*#__PURE__*/React.createElement(Column, _extends({\n      key: index\n    }, columnProps, {\n      searchValue: searchValue,\n      prefixCls: mergedPrefixCls,\n      options: col.options,\n      prevValuePath: prevValuePath,\n      activeValue: activeValue\n    }));\n  }); // >>>>> Render\n\n  return /*#__PURE__*/React.createElement(CacheContent, {\n    open: open\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(\"\".concat(mergedPrefixCls, \"-menus\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(mergedPrefixCls, \"-menu-empty\"), isEmpty), _defineProperty(_classNames, \"\".concat(mergedPrefixCls, \"-rtl\"), rtl), _classNames)),\n    ref: containerRef\n  }, columnNodes));\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  RawOptionList.displayName = 'RawOptionList';\n}\n\nexport default RawOptionList;","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/rc-cascader/es/OptionList/List.js"],"names":["_extends","_objectSpread","_defineProperty","_toConsumableArray","_slicedToArray","classNames","React","CascaderContext","getFullPathKeys","isLeaf","scrollIntoParentView","toPathKey","toPathKeys","toPathValueStr","toPathOptions","CacheContent","Column","FIX_LABEL","useActive","useKeyboard","RawOptionList","forwardRef","props","ref","_optionColumns$","_ref3","_classNames","prefixCls","multiple","searchValue","toggleOpen","notFoundContent","direction","open","containerRef","useRef","rtl","_React$useContext","useContext","options","values","halfValues","fieldNames","changeOnSelect","onSelect","searchOptions","dropdownPrefixCls","loadData","expandTrigger","mergedPrefixCls","_React$useState","useState","_React$useState2","loadingKeys","setLoadingKeys","internalLoadData","valueCells","optionList","rawOptions","map","_ref","option","lastOption","length","pathKey","keys","concat","useEffect","forEach","loadingKey","valueStrCells","_ref2","children","filter","key","checkedSet","useMemo","Set","halfCheckedSet","_useActive","_useActive2","activeValueCells","setActiveValueCells","onPathOpen","nextValueCells","isSelectable","disabled","isMergedLeaf","onPathSelect","valuePath","leaf","fromKeyboard","arguments","undefined","mergedOptions","optionColumns","currentList","fullPathKeys","_loop","activeValueCell","i","currentOption","find","index","value","subOptions","push","onKeyboardSelect","selectValueCells","_containerRef$current","cellPath","slice","cellKeyPath","ele","current","querySelector","replace","isEmpty","emptyList","columnProps","onActive","onToggleOpen","mergedOptionColumns","columnNodes","col","prevValuePath","activeValue","createElement","className","process","env","NODE_ENV","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n/* eslint-disable default-case */\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport CascaderContext from \"../context\";\nimport { getFullPathKeys, isLeaf, scrollIntoParentView, toPathKey, toPathKeys, toPathValueStr } from \"../utils/commonUtil\";\nimport { toPathOptions } from \"../utils/treeUtil\";\nimport CacheContent from \"./CacheContent\";\nimport Column, { FIX_LABEL } from \"./Column\";\nimport useActive from \"./useActive\";\nimport useKeyboard from \"./useKeyboard\";\nvar RawOptionList = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _optionColumns$, _ref3, _classNames;\n  var prefixCls = props.prefixCls,\n    multiple = props.multiple,\n    searchValue = props.searchValue,\n    toggleOpen = props.toggleOpen,\n    notFoundContent = props.notFoundContent,\n    direction = props.direction,\n    open = props.open;\n  var containerRef = React.useRef();\n  var rtl = direction === 'rtl';\n  var _React$useContext = React.useContext(CascaderContext),\n    options = _React$useContext.options,\n    values = _React$useContext.values,\n    halfValues = _React$useContext.halfValues,\n    fieldNames = _React$useContext.fieldNames,\n    changeOnSelect = _React$useContext.changeOnSelect,\n    onSelect = _React$useContext.onSelect,\n    searchOptions = _React$useContext.searchOptions,\n    dropdownPrefixCls = _React$useContext.dropdownPrefixCls,\n    loadData = _React$useContext.loadData,\n    expandTrigger = _React$useContext.expandTrigger;\n  var mergedPrefixCls = dropdownPrefixCls || prefixCls;\n\n  // ========================= loadData =========================\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loadingKeys = _React$useState2[0],\n    setLoadingKeys = _React$useState2[1];\n  var internalLoadData = function internalLoadData(valueCells) {\n    // Do not load when search\n    if (!loadData || searchValue) {\n      return;\n    }\n    var optionList = toPathOptions(valueCells, options, fieldNames);\n    var rawOptions = optionList.map(function (_ref) {\n      var option = _ref.option;\n      return option;\n    });\n    var lastOption = rawOptions[rawOptions.length - 1];\n    if (lastOption && !isLeaf(lastOption, fieldNames)) {\n      var pathKey = toPathKey(valueCells);\n      setLoadingKeys(function (keys) {\n        return [].concat(_toConsumableArray(keys), [pathKey]);\n      });\n      loadData(rawOptions);\n    }\n  };\n\n  // zombieJ: This is bad. We should make this same as `rc-tree` to use Promise instead.\n  React.useEffect(function () {\n    if (loadingKeys.length) {\n      loadingKeys.forEach(function (loadingKey) {\n        var valueStrCells = toPathValueStr(loadingKey);\n        var optionList = toPathOptions(valueStrCells, options, fieldNames, true).map(function (_ref2) {\n          var option = _ref2.option;\n          return option;\n        });\n        var lastOption = optionList[optionList.length - 1];\n        if (!lastOption || lastOption[fieldNames.children] || isLeaf(lastOption, fieldNames)) {\n          setLoadingKeys(function (keys) {\n            return keys.filter(function (key) {\n              return key !== loadingKey;\n            });\n          });\n        }\n      });\n    }\n  }, [options, loadingKeys, fieldNames]);\n\n  // ========================== Values ==========================\n  var checkedSet = React.useMemo(function () {\n    return new Set(toPathKeys(values));\n  }, [values]);\n  var halfCheckedSet = React.useMemo(function () {\n    return new Set(toPathKeys(halfValues));\n  }, [halfValues]);\n\n  // ====================== Accessibility =======================\n  var _useActive = useActive(multiple, open),\n    _useActive2 = _slicedToArray(_useActive, 2),\n    activeValueCells = _useActive2[0],\n    setActiveValueCells = _useActive2[1];\n\n  // =========================== Path ===========================\n  var onPathOpen = function onPathOpen(nextValueCells) {\n    setActiveValueCells(nextValueCells);\n\n    // Trigger loadData\n    internalLoadData(nextValueCells);\n  };\n  var isSelectable = function isSelectable(option) {\n    var disabled = option.disabled;\n    var isMergedLeaf = isLeaf(option, fieldNames);\n    return !disabled && (isMergedLeaf || changeOnSelect || multiple);\n  };\n  var onPathSelect = function onPathSelect(valuePath, leaf) {\n    var fromKeyboard = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    onSelect(valuePath);\n    if (!multiple && (leaf || changeOnSelect && (expandTrigger === 'hover' || fromKeyboard))) {\n      toggleOpen(false);\n    }\n  };\n\n  // ========================== Option ==========================\n  var mergedOptions = React.useMemo(function () {\n    if (searchValue) {\n      return searchOptions;\n    }\n    return options;\n  }, [searchValue, searchOptions, options]);\n\n  // ========================== Column ==========================\n  var optionColumns = React.useMemo(function () {\n    var optionList = [{\n      options: mergedOptions\n    }];\n    var currentList = mergedOptions;\n    var fullPathKeys = getFullPathKeys(currentList, fieldNames);\n    var _loop = function _loop() {\n      var activeValueCell = activeValueCells[i];\n      var currentOption = currentList.find(function (option, index) {\n        return (fullPathKeys[index] ? toPathKey(fullPathKeys[index]) : option[fieldNames.value]) === activeValueCell;\n      });\n      var subOptions = currentOption === null || currentOption === void 0 ? void 0 : currentOption[fieldNames.children];\n      if (!(subOptions !== null && subOptions !== void 0 && subOptions.length)) {\n        return 1; // break\n      }\n      currentList = subOptions;\n      optionList.push({\n        options: subOptions\n      });\n    };\n    for (var i = 0; i < activeValueCells.length; i += 1) {\n      if (_loop()) break;\n    }\n    return optionList;\n  }, [mergedOptions, activeValueCells, fieldNames]);\n\n  // ========================= Keyboard =========================\n  var onKeyboardSelect = function onKeyboardSelect(selectValueCells, option) {\n    if (isSelectable(option)) {\n      onPathSelect(selectValueCells, isLeaf(option, fieldNames), true);\n    }\n  };\n  useKeyboard(ref, mergedOptions, fieldNames, activeValueCells, onPathOpen, onKeyboardSelect, {\n    direction: direction,\n    searchValue: searchValue,\n    toggleOpen: toggleOpen,\n    open: open\n  });\n\n  // >>>>> Active Scroll\n  React.useEffect(function () {\n    for (var i = 0; i < activeValueCells.length; i += 1) {\n      var _containerRef$current;\n      var cellPath = activeValueCells.slice(0, i + 1);\n      var cellKeyPath = toPathKey(cellPath);\n      var ele = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.querySelector(\"li[data-path-key=\\\"\".concat(cellKeyPath.replace(/\\\\{0,2}\"/g, '\\\\\"'), \"\\\"]\") // matches unescaped double quotes\n      );\n      if (ele) {\n        scrollIntoParentView(ele);\n      }\n    }\n  }, [activeValueCells]);\n\n  // ========================== Render ==========================\n  // >>>>> Empty\n  var isEmpty = !((_optionColumns$ = optionColumns[0]) !== null && _optionColumns$ !== void 0 && (_optionColumns$ = _optionColumns$.options) !== null && _optionColumns$ !== void 0 && _optionColumns$.length);\n  var emptyList = [(_ref3 = {}, _defineProperty(_ref3, fieldNames.value, '__EMPTY__'), _defineProperty(_ref3, FIX_LABEL, notFoundContent), _defineProperty(_ref3, \"disabled\", true), _ref3)];\n  var columnProps = _objectSpread(_objectSpread({}, props), {}, {\n    multiple: !isEmpty && multiple,\n    onSelect: onPathSelect,\n    onActive: onPathOpen,\n    onToggleOpen: toggleOpen,\n    checkedSet: checkedSet,\n    halfCheckedSet: halfCheckedSet,\n    loadingKeys: loadingKeys,\n    isSelectable: isSelectable\n  });\n\n  // >>>>> Columns\n  var mergedOptionColumns = isEmpty ? [{\n    options: emptyList\n  }] : optionColumns;\n  var columnNodes = mergedOptionColumns.map(function (col, index) {\n    var prevValuePath = activeValueCells.slice(0, index);\n    var activeValue = activeValueCells[index];\n    return /*#__PURE__*/React.createElement(Column, _extends({\n      key: index\n    }, columnProps, {\n      searchValue: searchValue,\n      prefixCls: mergedPrefixCls,\n      options: col.options,\n      prevValuePath: prevValuePath,\n      activeValue: activeValue\n    }));\n  });\n\n  // >>>>> Render\n  return /*#__PURE__*/React.createElement(CacheContent, {\n    open: open\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(\"\".concat(mergedPrefixCls, \"-menus\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(mergedPrefixCls, \"-menu-empty\"), isEmpty), _defineProperty(_classNames, \"\".concat(mergedPrefixCls, \"-rtl\"), rtl), _classNames)),\n    ref: containerRef\n  }, columnNodes));\n});\nif (process.env.NODE_ENV !== 'production') {\n  RawOptionList.displayName = 'RawOptionList';\n}\nexport default RawOptionList;"]},"metadata":{},"sourceType":"module"}