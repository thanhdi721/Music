{"ast":null,"code":"const enableStatistic = process.env.NODE_ENV !== 'production' || typeof CSSINJS_STATISTIC !== 'undefined';\nlet recording = true;\n/**\n * This function will do as `Object.assign` in production. But will use Object.defineProperty:get to\n * pass all value access in development. To support statistic field usage with alias token.\n */\n\nexport function merge() {\n  for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {\n    objs[_key] = arguments[_key];\n  }\n  /* istanbul ignore next */\n\n\n  if (!enableStatistic) {\n    return Object.assign.apply(Object, [{}].concat(objs));\n  }\n\n  recording = false;\n  const ret = {};\n  objs.forEach(obj => {\n    const keys = Object.keys(obj);\n    keys.forEach(key => {\n      Object.defineProperty(ret, key, {\n        configurable: true,\n        enumerable: true,\n        get: () => obj[key]\n      });\n    });\n  });\n  recording = true;\n  return ret;\n}\n/** @internal Internal Usage. Not use in your production. */\n\nexport const statistic = {};\n/** @internal Internal Usage. Not use in your production. */\n// eslint-disable-next-line camelcase\n\nexport const _statistic_build_ = {};\n/* istanbul ignore next */\n\nfunction noop() {}\n/** Statistic token usage case. Should use `merge` function if you do not want spread record. */\n\n\nconst statisticToken = token => {\n  let tokenKeys;\n  let proxy = token;\n  let flush = noop;\n\n  if (enableStatistic && typeof Proxy !== 'undefined') {\n    tokenKeys = new Set();\n    proxy = new Proxy(token, {\n      get(obj, prop) {\n        if (recording) {\n          tokenKeys.add(prop);\n        }\n\n        return obj[prop];\n      }\n\n    });\n\n    flush = (componentName, componentToken) => {\n      var _a;\n\n      statistic[componentName] = {\n        global: Array.from(tokenKeys),\n        component: Object.assign(Object.assign({}, (_a = statistic[componentName]) === null || _a === void 0 ? void 0 : _a.component), componentToken)\n      };\n    };\n  }\n\n  return {\n    token: proxy,\n    keys: tokenKeys,\n    flush\n  };\n};\n\nexport default statisticToken;","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/antd/es/theme/util/statistic.js"],"names":["enableStatistic","process","env","NODE_ENV","CSSINJS_STATISTIC","recording","merge","_len","arguments","length","objs","Array","_key","Object","assign","apply","concat","ret","forEach","obj","keys","key","defineProperty","configurable","enumerable","get","statistic","_statistic_build_","noop","statisticToken","token","tokenKeys","proxy","flush","Proxy","Set","prop","add","componentName","componentToken","_a","global","from","component"],"mappings":"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","sourcesContent":["const enableStatistic = process.env.NODE_ENV !== 'production' || typeof CSSINJS_STATISTIC !== 'undefined';\nlet recording = true;\n/**\n * This function will do as `Object.assign` in production. But will use Object.defineProperty:get to\n * pass all value access in development. To support statistic field usage with alias token.\n */\nexport function merge() {\n  for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {\n    objs[_key] = arguments[_key];\n  }\n  /* istanbul ignore next */\n  if (!enableStatistic) {\n    return Object.assign.apply(Object, [{}].concat(objs));\n  }\n  recording = false;\n  const ret = {};\n  objs.forEach(obj => {\n    const keys = Object.keys(obj);\n    keys.forEach(key => {\n      Object.defineProperty(ret, key, {\n        configurable: true,\n        enumerable: true,\n        get: () => obj[key]\n      });\n    });\n  });\n  recording = true;\n  return ret;\n}\n/** @internal Internal Usage. Not use in your production. */\nexport const statistic = {};\n/** @internal Internal Usage. Not use in your production. */\n// eslint-disable-next-line camelcase\nexport const _statistic_build_ = {};\n/* istanbul ignore next */\nfunction noop() {}\n/** Statistic token usage case. Should use `merge` function if you do not want spread record. */\nconst statisticToken = token => {\n  let tokenKeys;\n  let proxy = token;\n  let flush = noop;\n  if (enableStatistic && typeof Proxy !== 'undefined') {\n    tokenKeys = new Set();\n    proxy = new Proxy(token, {\n      get(obj, prop) {\n        if (recording) {\n          tokenKeys.add(prop);\n        }\n        return obj[prop];\n      }\n    });\n    flush = (componentName, componentToken) => {\n      var _a;\n      statistic[componentName] = {\n        global: Array.from(tokenKeys),\n        component: Object.assign(Object.assign({}, (_a = statistic[componentName]) === null || _a === void 0 ? void 0 : _a.component), componentToken)\n      };\n    };\n  }\n  return {\n    token: proxy,\n    keys: tokenKeys,\n    flush\n  };\n};\nexport default statisticToken;"]},"metadata":{},"sourceType":"module"}