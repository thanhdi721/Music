{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport raf from \"rc-util/es/raf\";\nimport React, { useEffect, useRef, useState } from 'react';\n\nvar useIndicator = function useIndicator(options) {\n  var activeTabOffset = options.activeTabOffset,\n      horizontal = options.horizontal,\n      rtl = options.rtl,\n      _options$indicator = options.indicator,\n      indicator = _options$indicator === void 0 ? {} : _options$indicator;\n  var size = indicator.size,\n      _indicator$align = indicator.align,\n      align = _indicator$align === void 0 ? 'center' : _indicator$align;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      inkStyle = _useState2[0],\n      setInkStyle = _useState2[1];\n\n  var inkBarRafRef = useRef();\n  var getLength = React.useCallback(function (origin) {\n    if (typeof size === 'function') {\n      return size(origin);\n    }\n\n    if (typeof size === 'number') {\n      return size;\n    }\n\n    return origin;\n  }, [size]); // Delay set ink style to avoid remove tab blink\n\n  function cleanInkBarRaf() {\n    raf.cancel(inkBarRafRef.current);\n  }\n\n  useEffect(function () {\n    var newInkStyle = {};\n\n    if (activeTabOffset) {\n      if (horizontal) {\n        newInkStyle.width = getLength(activeTabOffset.width);\n        var key = rtl ? 'right' : 'left';\n\n        if (align === 'start') {\n          newInkStyle[key] = activeTabOffset[key];\n        }\n\n        if (align === 'center') {\n          newInkStyle[key] = activeTabOffset[key] + activeTabOffset.width / 2;\n          newInkStyle.transform = rtl ? 'translateX(50%)' : 'translateX(-50%)';\n        }\n\n        if (align === 'end') {\n          newInkStyle[key] = activeTabOffset[key] + activeTabOffset.width;\n          newInkStyle.transform = 'translateX(-100%)';\n        }\n      } else {\n        newInkStyle.height = getLength(activeTabOffset.height);\n\n        if (align === 'start') {\n          newInkStyle.top = activeTabOffset.top;\n        }\n\n        if (align === 'center') {\n          newInkStyle.top = activeTabOffset.top + activeTabOffset.height / 2;\n          newInkStyle.transform = 'translateY(-50%)';\n        }\n\n        if (align === 'end') {\n          newInkStyle.top = activeTabOffset.top + activeTabOffset.height;\n          newInkStyle.transform = 'translateY(-100%)';\n        }\n      }\n    }\n\n    cleanInkBarRaf();\n    inkBarRafRef.current = raf(function () {\n      setInkStyle(newInkStyle);\n    });\n    return cleanInkBarRaf;\n  }, [activeTabOffset, horizontal, rtl, align, getLength]);\n  return {\n    style: inkStyle\n  };\n};\n\nexport default useIndicator;","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/rc-tabs/es/hooks/useIndicator.js"],"names":["_slicedToArray","raf","React","useEffect","useRef","useState","useIndicator","options","activeTabOffset","horizontal","rtl","_options$indicator","indicator","size","_indicator$align","align","_useState","_useState2","inkStyle","setInkStyle","inkBarRafRef","getLength","useCallback","origin","cleanInkBarRaf","cancel","current","newInkStyle","width","key","transform","height","top","style"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport raf from \"rc-util/es/raf\";\nimport React, { useEffect, useRef, useState } from 'react';\nvar useIndicator = function useIndicator(options) {\n  var activeTabOffset = options.activeTabOffset,\n    horizontal = options.horizontal,\n    rtl = options.rtl,\n    _options$indicator = options.indicator,\n    indicator = _options$indicator === void 0 ? {} : _options$indicator;\n  var size = indicator.size,\n    _indicator$align = indicator.align,\n    align = _indicator$align === void 0 ? 'center' : _indicator$align;\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    inkStyle = _useState2[0],\n    setInkStyle = _useState2[1];\n  var inkBarRafRef = useRef();\n  var getLength = React.useCallback(function (origin) {\n    if (typeof size === 'function') {\n      return size(origin);\n    }\n    if (typeof size === 'number') {\n      return size;\n    }\n    return origin;\n  }, [size]);\n\n  // Delay set ink style to avoid remove tab blink\n  function cleanInkBarRaf() {\n    raf.cancel(inkBarRafRef.current);\n  }\n  useEffect(function () {\n    var newInkStyle = {};\n    if (activeTabOffset) {\n      if (horizontal) {\n        newInkStyle.width = getLength(activeTabOffset.width);\n        var key = rtl ? 'right' : 'left';\n        if (align === 'start') {\n          newInkStyle[key] = activeTabOffset[key];\n        }\n        if (align === 'center') {\n          newInkStyle[key] = activeTabOffset[key] + activeTabOffset.width / 2;\n          newInkStyle.transform = rtl ? 'translateX(50%)' : 'translateX(-50%)';\n        }\n        if (align === 'end') {\n          newInkStyle[key] = activeTabOffset[key] + activeTabOffset.width;\n          newInkStyle.transform = 'translateX(-100%)';\n        }\n      } else {\n        newInkStyle.height = getLength(activeTabOffset.height);\n        if (align === 'start') {\n          newInkStyle.top = activeTabOffset.top;\n        }\n        if (align === 'center') {\n          newInkStyle.top = activeTabOffset.top + activeTabOffset.height / 2;\n          newInkStyle.transform = 'translateY(-50%)';\n        }\n        if (align === 'end') {\n          newInkStyle.top = activeTabOffset.top + activeTabOffset.height;\n          newInkStyle.transform = 'translateY(-100%)';\n        }\n      }\n    }\n    cleanInkBarRaf();\n    inkBarRafRef.current = raf(function () {\n      setInkStyle(newInkStyle);\n    });\n    return cleanInkBarRaf;\n  }, [activeTabOffset, horizontal, rtl, align, getLength]);\n  return {\n    style: inkStyle\n  };\n};\nexport default useIndicator;"]},"metadata":{},"sourceType":"module"}