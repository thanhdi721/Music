{"ast":null,"code":"import { useEvent } from 'rc-util';\nimport * as React from 'react';\n\nfunction voidFunc() {}\n\nconst WatermarkContext = /*#__PURE__*/React.createContext({\n  add: voidFunc,\n  remove: voidFunc\n});\nexport function usePanelRef(panelSelector) {\n  const watermark = React.useContext(WatermarkContext);\n  const panelEleRef = React.useRef();\n  const panelRef = useEvent(ele => {\n    if (ele) {\n      const innerContentEle = panelSelector ? ele.querySelector(panelSelector) : ele;\n      watermark.add(innerContentEle);\n      panelEleRef.current = innerContentEle;\n    } else {\n      watermark.remove(panelEleRef.current);\n    }\n  });\n  return panelRef;\n}\nexport default WatermarkContext;","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/antd/es/watermark/context.js"],"names":["useEvent","React","voidFunc","WatermarkContext","createContext","add","remove","usePanelRef","panelSelector","watermark","useContext","panelEleRef","useRef","panelRef","ele","innerContentEle","querySelector","current"],"mappings":"AAAA,SAASA,QAAT,QAAyB,SAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AACA,SAASC,QAAT,GAAoB,CAAE;;AACtB,MAAMC,gBAAgB,GAAG,aAAaF,KAAK,CAACG,aAAN,CAAoB;AACxDC,EAAAA,GAAG,EAAEH,QADmD;AAExDI,EAAAA,MAAM,EAAEJ;AAFgD,CAApB,CAAtC;AAIA,OAAO,SAASK,WAAT,CAAqBC,aAArB,EAAoC;AACzC,QAAMC,SAAS,GAAGR,KAAK,CAACS,UAAN,CAAiBP,gBAAjB,CAAlB;AACA,QAAMQ,WAAW,GAAGV,KAAK,CAACW,MAAN,EAApB;AACA,QAAMC,QAAQ,GAAGb,QAAQ,CAACc,GAAG,IAAI;AAC/B,QAAIA,GAAJ,EAAS;AACP,YAAMC,eAAe,GAAGP,aAAa,GAAGM,GAAG,CAACE,aAAJ,CAAkBR,aAAlB,CAAH,GAAsCM,GAA3E;AACAL,MAAAA,SAAS,CAACJ,GAAV,CAAcU,eAAd;AACAJ,MAAAA,WAAW,CAACM,OAAZ,GAAsBF,eAAtB;AACD,KAJD,MAIO;AACLN,MAAAA,SAAS,CAACH,MAAV,CAAiBK,WAAW,CAACM,OAA7B;AACD;AACF,GARwB,CAAzB;AASA,SAAOJ,QAAP;AACD;AACD,eAAeV,gBAAf","sourcesContent":["import { useEvent } from 'rc-util';\nimport * as React from 'react';\nfunction voidFunc() {}\nconst WatermarkContext = /*#__PURE__*/React.createContext({\n  add: voidFunc,\n  remove: voidFunc\n});\nexport function usePanelRef(panelSelector) {\n  const watermark = React.useContext(WatermarkContext);\n  const panelEleRef = React.useRef();\n  const panelRef = useEvent(ele => {\n    if (ele) {\n      const innerContentEle = panelSelector ? ele.querySelector(panelSelector) : ele;\n      watermark.add(innerContentEle);\n      panelEleRef.current = innerContentEle;\n    } else {\n      watermark.remove(panelEleRef.current);\n    }\n  });\n  return panelRef;\n}\nexport default WatermarkContext;"]},"metadata":{},"sourceType":"module"}