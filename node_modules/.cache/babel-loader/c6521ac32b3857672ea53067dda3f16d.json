{"ast":null,"code":"\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport EditOutlined from \"@ant-design/icons/es/icons/EditOutlined\";\nimport classNames from 'classnames';\nimport ResizeObserver from 'rc-resize-observer';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport useIsomorphicLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport omit from \"rc-util/es/omit\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport { isStyleSupport } from '../../_util/styleChecker';\nimport TransButton from '../../_util/transButton';\nimport { ConfigContext } from '../../config-provider';\nimport useLocale from '../../locale/useLocale';\nimport Tooltip from '../../tooltip';\nimport Editable from '../Editable';\nimport useCopyClick from '../hooks/useCopyClick';\nimport useMergedConfig from '../hooks/useMergedConfig';\nimport useUpdatedEffect from '../hooks/useUpdatedEffect';\nimport Typography from '../Typography';\nimport CopyBtn from './CopyBtn';\nimport Ellipsis from './Ellipsis';\nimport EllipsisTooltip from './EllipsisTooltip';\n\nfunction wrapperDecorations(_ref, content) {\n  let {\n    mark,\n    code,\n    underline,\n    delete: del,\n    strong,\n    keyboard,\n    italic\n  } = _ref;\n  let currentContent = content;\n\n  function wrap(tag, needed) {\n    if (!needed) {\n      return;\n    }\n\n    currentContent = /*#__PURE__*/React.createElement(tag, {}, currentContent);\n  }\n\n  wrap('strong', strong);\n  wrap('u', underline);\n  wrap('del', del);\n  wrap('code', code);\n  wrap('mark', mark);\n  wrap('kbd', keyboard);\n  wrap('i', italic);\n  return currentContent;\n}\n\nconst ELLIPSIS_STR = '...';\nconst Base = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var _a, _b, _c;\n\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    style,\n    type,\n    disabled,\n    children,\n    ellipsis,\n    editable,\n    copyable,\n    component,\n    title\n  } = props,\n        restProps = __rest(props, [\"prefixCls\", \"className\", \"style\", \"type\", \"disabled\", \"children\", \"ellipsis\", \"editable\", \"copyable\", \"component\", \"title\"]);\n\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const [textLocale] = useLocale('Text');\n  const typographyRef = React.useRef(null);\n  const editIconRef = React.useRef(null); // ============================ MISC ============================\n\n  const prefixCls = getPrefixCls('typography', customizePrefixCls);\n  const textProps = omit(restProps, ['mark', 'code', 'delete', 'underline', 'strong', 'keyboard', 'italic']); // ========================== Editable ==========================\n\n  const [enableEdit, editConfig] = useMergedConfig(editable);\n  const [editing, setEditing] = useMergedState(false, {\n    value: editConfig.editing\n  });\n  const {\n    triggerType = ['icon']\n  } = editConfig;\n\n  const triggerEdit = edit => {\n    var _a;\n\n    if (edit) {\n      (_a = editConfig.onStart) === null || _a === void 0 ? void 0 : _a.call(editConfig);\n    }\n\n    setEditing(edit);\n  }; // Focus edit icon when back\n\n\n  useUpdatedEffect(() => {\n    var _a;\n\n    if (!editing) {\n      (_a = editIconRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [editing]);\n\n  const onEditClick = e => {\n    e === null || e === void 0 ? void 0 : e.preventDefault();\n    triggerEdit(true);\n  };\n\n  const onEditChange = value => {\n    var _a;\n\n    (_a = editConfig.onChange) === null || _a === void 0 ? void 0 : _a.call(editConfig, value);\n    triggerEdit(false);\n  };\n\n  const onEditCancel = () => {\n    var _a;\n\n    (_a = editConfig.onCancel) === null || _a === void 0 ? void 0 : _a.call(editConfig);\n    triggerEdit(false);\n  }; // ========================== Copyable ==========================\n\n\n  const [enableCopy, copyConfig] = useMergedConfig(copyable);\n  const {\n    copied,\n    copyLoading,\n    onClick: onCopyClick\n  } = useCopyClick({\n    copyConfig,\n    children\n  }); // ========================== Ellipsis ==========================\n\n  const [isLineClampSupport, setIsLineClampSupport] = React.useState(false);\n  const [isTextOverflowSupport, setIsTextOverflowSupport] = React.useState(false);\n  const [isJsEllipsis, setIsJsEllipsis] = React.useState(false);\n  const [isNativeEllipsis, setIsNativeEllipsis] = React.useState(false);\n  const [isNativeVisible, setIsNativeVisible] = React.useState(true);\n  const [enableEllipsis, ellipsisConfig] = useMergedConfig(ellipsis, {\n    expandable: false,\n    symbol: isExpanded => isExpanded ? textLocale === null || textLocale === void 0 ? void 0 : textLocale.collapse : textLocale === null || textLocale === void 0 ? void 0 : textLocale.expand\n  });\n  const [expanded, setExpanded] = useMergedState(ellipsisConfig.defaultExpanded || false, {\n    value: ellipsisConfig.expanded\n  });\n  const mergedEnableEllipsis = enableEllipsis && (!expanded || ellipsisConfig.expandable === 'collapsible'); // Shared prop to reduce bundle size\n\n  const {\n    rows = 1\n  } = ellipsisConfig;\n  const needMeasureEllipsis = React.useMemo(() => // Disable ellipsis\n  mergedEnableEllipsis && ( // Provide suffix\n  ellipsisConfig.suffix !== undefined || ellipsisConfig.onEllipsis || // Can't use css ellipsis since we need to provide the place for button\n  ellipsisConfig.expandable || enableEdit || enableCopy), [mergedEnableEllipsis, ellipsisConfig, enableEdit, enableCopy]);\n  useIsomorphicLayoutEffect(() => {\n    if (enableEllipsis && !needMeasureEllipsis) {\n      setIsLineClampSupport(isStyleSupport('webkitLineClamp'));\n      setIsTextOverflowSupport(isStyleSupport('textOverflow'));\n    }\n  }, [needMeasureEllipsis, enableEllipsis]);\n  const [cssEllipsis, setCssEllipsis] = React.useState(mergedEnableEllipsis);\n  const canUseCssEllipsis = React.useMemo(() => {\n    if (needMeasureEllipsis) {\n      return false;\n    }\n\n    if (rows === 1) {\n      return isTextOverflowSupport;\n    }\n\n    return isLineClampSupport;\n  }, [needMeasureEllipsis, isTextOverflowSupport, isLineClampSupport]); // We use effect to change from css ellipsis to js ellipsis.\n  // To make SSR still can see the ellipsis.\n\n  useIsomorphicLayoutEffect(() => {\n    setCssEllipsis(canUseCssEllipsis && mergedEnableEllipsis);\n  }, [canUseCssEllipsis, mergedEnableEllipsis]);\n  const isMergedEllipsis = mergedEnableEllipsis && (cssEllipsis ? isNativeEllipsis : isJsEllipsis);\n  const cssTextOverflow = mergedEnableEllipsis && rows === 1 && cssEllipsis;\n  const cssLineClamp = mergedEnableEllipsis && rows > 1 && cssEllipsis; // >>>>> Expand\n\n  const onExpandClick = (e, info) => {\n    var _a;\n\n    setExpanded(info.expanded);\n    (_a = ellipsisConfig.onExpand) === null || _a === void 0 ? void 0 : _a.call(ellipsisConfig, e, info);\n  };\n\n  const [ellipsisWidth, setEllipsisWidth] = React.useState(0);\n\n  const onResize = _ref2 => {\n    let {\n      offsetWidth\n    } = _ref2;\n    setEllipsisWidth(offsetWidth);\n  }; // >>>>> JS Ellipsis\n\n\n  const onJsEllipsis = jsEllipsis => {\n    var _a;\n\n    setIsJsEllipsis(jsEllipsis); // Trigger if changed\n\n    if (isJsEllipsis !== jsEllipsis) {\n      (_a = ellipsisConfig.onEllipsis) === null || _a === void 0 ? void 0 : _a.call(ellipsisConfig, jsEllipsis);\n    }\n  }; // >>>>> Native ellipsis\n\n\n  React.useEffect(() => {\n    const textEle = typographyRef.current;\n\n    if (enableEllipsis && cssEllipsis && textEle) {\n      const currentEllipsis = cssLineClamp ? textEle.offsetHeight < textEle.scrollHeight : textEle.offsetWidth < textEle.scrollWidth;\n\n      if (isNativeEllipsis !== currentEllipsis) {\n        setIsNativeEllipsis(currentEllipsis);\n      }\n    }\n  }, [enableEllipsis, cssEllipsis, children, cssLineClamp, isNativeVisible, ellipsisWidth]); // https://github.com/ant-design/ant-design/issues/36786\n  // Use IntersectionObserver to check if element is invisible\n\n  React.useEffect(() => {\n    const textEle = typographyRef.current;\n\n    if (typeof IntersectionObserver === 'undefined' || !textEle || !cssEllipsis || !mergedEnableEllipsis) {\n      return;\n    }\n    /* eslint-disable-next-line compat/compat */\n\n\n    const observer = new IntersectionObserver(() => {\n      setIsNativeVisible(!!textEle.offsetParent);\n    });\n    observer.observe(textEle);\n    return () => {\n      observer.disconnect();\n    };\n  }, [cssEllipsis, mergedEnableEllipsis]); // ========================== Tooltip ===========================\n\n  let tooltipProps = {};\n\n  if (ellipsisConfig.tooltip === true) {\n    tooltipProps = {\n      title: (_a = editConfig.text) !== null && _a !== void 0 ? _a : children\n    };\n  } else if ( /*#__PURE__*/React.isValidElement(ellipsisConfig.tooltip)) {\n    tooltipProps = {\n      title: ellipsisConfig.tooltip\n    };\n  } else if (typeof ellipsisConfig.tooltip === 'object') {\n    tooltipProps = Object.assign({\n      title: (_b = editConfig.text) !== null && _b !== void 0 ? _b : children\n    }, ellipsisConfig.tooltip);\n  } else {\n    tooltipProps = {\n      title: ellipsisConfig.tooltip\n    };\n  }\n\n  const topAriaLabel = React.useMemo(() => {\n    const isValid = val => ['string', 'number'].includes(typeof val);\n\n    if (!enableEllipsis || cssEllipsis) {\n      return undefined;\n    }\n\n    if (isValid(editConfig.text)) {\n      return editConfig.text;\n    }\n\n    if (isValid(children)) {\n      return children;\n    }\n\n    if (isValid(title)) {\n      return title;\n    }\n\n    if (isValid(tooltipProps.title)) {\n      return tooltipProps.title;\n    }\n\n    return undefined;\n  }, [enableEllipsis, cssEllipsis, title, tooltipProps.title, isMergedEllipsis]); // =========================== Render ===========================\n  // >>>>>>>>>>> Editing input\n\n  if (editing) {\n    return /*#__PURE__*/React.createElement(Editable, {\n      value: (_c = editConfig.text) !== null && _c !== void 0 ? _c : typeof children === 'string' ? children : '',\n      onSave: onEditChange,\n      onCancel: onEditCancel,\n      onEnd: editConfig.onEnd,\n      prefixCls: prefixCls,\n      className: className,\n      style: style,\n      direction: direction,\n      component: component,\n      maxLength: editConfig.maxLength,\n      autoSize: editConfig.autoSize,\n      enterIcon: editConfig.enterIcon\n    });\n  } // >>>>>>>>>>> Typography\n  // Expand\n\n\n  const renderExpand = () => {\n    const {\n      expandable,\n      symbol\n    } = ellipsisConfig;\n    if (!expandable) return null;\n    if (expanded && expandable !== 'collapsible') return null;\n    return /*#__PURE__*/React.createElement(\"a\", {\n      key: \"expand\",\n      className: `${prefixCls}-${expanded ? 'collapse' : 'expand'}`,\n      onClick: e => onExpandClick(e, {\n        expanded: !expanded\n      }),\n      \"aria-label\": expanded ? textLocale.collapse : textLocale === null || textLocale === void 0 ? void 0 : textLocale.expand\n    }, typeof symbol === 'function' ? symbol(expanded) : symbol);\n  }; // Edit\n\n\n  const renderEdit = () => {\n    if (!enableEdit) return;\n    const {\n      icon,\n      tooltip\n    } = editConfig;\n    const editTitle = toArray(tooltip)[0] || (textLocale === null || textLocale === void 0 ? void 0 : textLocale.edit);\n    const ariaLabel = typeof editTitle === 'string' ? editTitle : '';\n    return triggerType.includes('icon') ? /*#__PURE__*/React.createElement(Tooltip, {\n      key: \"edit\",\n      title: tooltip === false ? '' : editTitle\n    }, /*#__PURE__*/React.createElement(TransButton, {\n      ref: editIconRef,\n      className: `${prefixCls}-edit`,\n      onClick: onEditClick,\n      \"aria-label\": ariaLabel\n    }, icon || /*#__PURE__*/React.createElement(EditOutlined, {\n      role: \"button\"\n    }))) : null;\n  }; // Copy\n\n\n  const renderCopy = () => {\n    if (!enableCopy) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(CopyBtn, Object.assign({\n      key: \"copy\"\n    }, copyConfig, {\n      prefixCls: prefixCls,\n      copied: copied,\n      locale: textLocale,\n      onCopy: onCopyClick,\n      loading: copyLoading,\n      iconOnly: children === null || children === undefined\n    }));\n  };\n\n  const renderOperations = canEllipsis => [// (renderExpanded || ellipsisConfig.collapsible) && renderExpand(),\n  canEllipsis && renderExpand(), renderEdit(), renderCopy()];\n\n  const renderEllipsis = canEllipsis => [canEllipsis && !expanded && /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    key: \"ellipsis\"\n  }, ELLIPSIS_STR), ellipsisConfig.suffix, renderOperations(canEllipsis)];\n\n  return /*#__PURE__*/React.createElement(ResizeObserver, {\n    onResize: onResize,\n    disabled: !mergedEnableEllipsis\n  }, resizeRef => /*#__PURE__*/React.createElement(EllipsisTooltip, {\n    tooltipProps: tooltipProps,\n    enableEllipsis: mergedEnableEllipsis,\n    isEllipsis: isMergedEllipsis\n  }, /*#__PURE__*/React.createElement(Typography, Object.assign({\n    className: classNames({\n      [`${prefixCls}-${type}`]: type,\n      [`${prefixCls}-disabled`]: disabled,\n      [`${prefixCls}-ellipsis`]: enableEllipsis,\n      [`${prefixCls}-single-line`]: mergedEnableEllipsis && rows === 1,\n      [`${prefixCls}-ellipsis-single-line`]: cssTextOverflow,\n      [`${prefixCls}-ellipsis-multiple-line`]: cssLineClamp\n    }, className),\n    prefixCls: customizePrefixCls,\n    style: Object.assign(Object.assign({}, style), {\n      WebkitLineClamp: cssLineClamp ? rows : undefined\n    }),\n    component: component,\n    ref: composeRef(resizeRef, typographyRef, ref),\n    direction: direction,\n    onClick: triggerType.includes('text') ? onEditClick : undefined,\n    \"aria-label\": topAriaLabel === null || topAriaLabel === void 0 ? void 0 : topAriaLabel.toString(),\n    title: title\n  }, textProps), /*#__PURE__*/React.createElement(Ellipsis, {\n    enableMeasure: mergedEnableEllipsis && !cssEllipsis,\n    text: children,\n    rows: rows,\n    width: ellipsisWidth,\n    onEllipsis: onJsEllipsis,\n    expanded: expanded,\n    miscDeps: [copied, expanded, copyLoading]\n  }, (node, canEllipsis) => {\n    let renderNode = node;\n\n    if (node.length && canEllipsis && !expanded && topAriaLabel) {\n      renderNode = /*#__PURE__*/React.createElement(\"span\", {\n        key: \"show-content\",\n        \"aria-hidden\": true\n      }, renderNode);\n    }\n\n    const wrappedContext = wrapperDecorations(props, /*#__PURE__*/React.createElement(React.Fragment, null, renderNode, renderEllipsis(canEllipsis)));\n    return wrappedContext;\n  }))));\n});\nexport default Base;","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/antd/es/typography/Base/index.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","EditOutlined","classNames","ResizeObserver","toArray","useIsomorphicLayoutEffect","useMergedState","omit","composeRef","isStyleSupport","TransButton","ConfigContext","useLocale","Tooltip","Editable","useCopyClick","useMergedConfig","useUpdatedEffect","Typography","CopyBtn","Ellipsis","EllipsisTooltip","wrapperDecorations","_ref","content","mark","code","underline","delete","del","strong","keyboard","italic","currentContent","wrap","tag","needed","createElement","ELLIPSIS_STR","Base","forwardRef","props","ref","_a","_b","_c","prefixCls","customizePrefixCls","className","style","type","disabled","children","ellipsis","editable","copyable","component","title","restProps","getPrefixCls","direction","useContext","textLocale","typographyRef","useRef","editIconRef","textProps","enableEdit","editConfig","editing","setEditing","value","triggerType","triggerEdit","edit","onStart","current","focus","onEditClick","preventDefault","onEditChange","onChange","onEditCancel","onCancel","enableCopy","copyConfig","copied","copyLoading","onClick","onCopyClick","isLineClampSupport","setIsLineClampSupport","useState","isTextOverflowSupport","setIsTextOverflowSupport","isJsEllipsis","setIsJsEllipsis","isNativeEllipsis","setIsNativeEllipsis","isNativeVisible","setIsNativeVisible","enableEllipsis","ellipsisConfig","expandable","symbol","isExpanded","collapse","expand","expanded","setExpanded","defaultExpanded","mergedEnableEllipsis","rows","needMeasureEllipsis","useMemo","suffix","undefined","onEllipsis","cssEllipsis","setCssEllipsis","canUseCssEllipsis","isMergedEllipsis","cssTextOverflow","cssLineClamp","onExpandClick","info","onExpand","ellipsisWidth","setEllipsisWidth","onResize","_ref2","offsetWidth","onJsEllipsis","jsEllipsis","useEffect","textEle","currentEllipsis","offsetHeight","scrollHeight","scrollWidth","IntersectionObserver","observer","offsetParent","observe","disconnect","tooltipProps","tooltip","text","isValidElement","assign","topAriaLabel","isValid","val","includes","onSave","onEnd","maxLength","autoSize","enterIcon","renderExpand","key","renderEdit","icon","editTitle","ariaLabel","role","renderCopy","locale","onCopy","loading","iconOnly","renderOperations","canEllipsis","renderEllipsis","resizeRef","isEllipsis","WebkitLineClamp","toString","enableMeasure","width","miscDeps","node","renderNode","wrappedContext","Fragment"],"mappings":"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","sourcesContent":["\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport EditOutlined from \"@ant-design/icons/es/icons/EditOutlined\";\nimport classNames from 'classnames';\nimport ResizeObserver from 'rc-resize-observer';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport useIsomorphicLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport omit from \"rc-util/es/omit\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport { isStyleSupport } from '../../_util/styleChecker';\nimport TransButton from '../../_util/transButton';\nimport { ConfigContext } from '../../config-provider';\nimport useLocale from '../../locale/useLocale';\nimport Tooltip from '../../tooltip';\nimport Editable from '../Editable';\nimport useCopyClick from '../hooks/useCopyClick';\nimport useMergedConfig from '../hooks/useMergedConfig';\nimport useUpdatedEffect from '../hooks/useUpdatedEffect';\nimport Typography from '../Typography';\nimport CopyBtn from './CopyBtn';\nimport Ellipsis from './Ellipsis';\nimport EllipsisTooltip from './EllipsisTooltip';\nfunction wrapperDecorations(_ref, content) {\n  let {\n    mark,\n    code,\n    underline,\n    delete: del,\n    strong,\n    keyboard,\n    italic\n  } = _ref;\n  let currentContent = content;\n  function wrap(tag, needed) {\n    if (!needed) {\n      return;\n    }\n    currentContent = /*#__PURE__*/React.createElement(tag, {}, currentContent);\n  }\n  wrap('strong', strong);\n  wrap('u', underline);\n  wrap('del', del);\n  wrap('code', code);\n  wrap('mark', mark);\n  wrap('kbd', keyboard);\n  wrap('i', italic);\n  return currentContent;\n}\nconst ELLIPSIS_STR = '...';\nconst Base = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var _a, _b, _c;\n  const {\n      prefixCls: customizePrefixCls,\n      className,\n      style,\n      type,\n      disabled,\n      children,\n      ellipsis,\n      editable,\n      copyable,\n      component,\n      title\n    } = props,\n    restProps = __rest(props, [\"prefixCls\", \"className\", \"style\", \"type\", \"disabled\", \"children\", \"ellipsis\", \"editable\", \"copyable\", \"component\", \"title\"]);\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const [textLocale] = useLocale('Text');\n  const typographyRef = React.useRef(null);\n  const editIconRef = React.useRef(null);\n  // ============================ MISC ============================\n  const prefixCls = getPrefixCls('typography', customizePrefixCls);\n  const textProps = omit(restProps, ['mark', 'code', 'delete', 'underline', 'strong', 'keyboard', 'italic']);\n  // ========================== Editable ==========================\n  const [enableEdit, editConfig] = useMergedConfig(editable);\n  const [editing, setEditing] = useMergedState(false, {\n    value: editConfig.editing\n  });\n  const {\n    triggerType = ['icon']\n  } = editConfig;\n  const triggerEdit = edit => {\n    var _a;\n    if (edit) {\n      (_a = editConfig.onStart) === null || _a === void 0 ? void 0 : _a.call(editConfig);\n    }\n    setEditing(edit);\n  };\n  // Focus edit icon when back\n  useUpdatedEffect(() => {\n    var _a;\n    if (!editing) {\n      (_a = editIconRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [editing]);\n  const onEditClick = e => {\n    e === null || e === void 0 ? void 0 : e.preventDefault();\n    triggerEdit(true);\n  };\n  const onEditChange = value => {\n    var _a;\n    (_a = editConfig.onChange) === null || _a === void 0 ? void 0 : _a.call(editConfig, value);\n    triggerEdit(false);\n  };\n  const onEditCancel = () => {\n    var _a;\n    (_a = editConfig.onCancel) === null || _a === void 0 ? void 0 : _a.call(editConfig);\n    triggerEdit(false);\n  };\n  // ========================== Copyable ==========================\n  const [enableCopy, copyConfig] = useMergedConfig(copyable);\n  const {\n    copied,\n    copyLoading,\n    onClick: onCopyClick\n  } = useCopyClick({\n    copyConfig,\n    children\n  });\n  // ========================== Ellipsis ==========================\n  const [isLineClampSupport, setIsLineClampSupport] = React.useState(false);\n  const [isTextOverflowSupport, setIsTextOverflowSupport] = React.useState(false);\n  const [isJsEllipsis, setIsJsEllipsis] = React.useState(false);\n  const [isNativeEllipsis, setIsNativeEllipsis] = React.useState(false);\n  const [isNativeVisible, setIsNativeVisible] = React.useState(true);\n  const [enableEllipsis, ellipsisConfig] = useMergedConfig(ellipsis, {\n    expandable: false,\n    symbol: isExpanded => isExpanded ? textLocale === null || textLocale === void 0 ? void 0 : textLocale.collapse : textLocale === null || textLocale === void 0 ? void 0 : textLocale.expand\n  });\n  const [expanded, setExpanded] = useMergedState(ellipsisConfig.defaultExpanded || false, {\n    value: ellipsisConfig.expanded\n  });\n  const mergedEnableEllipsis = enableEllipsis && (!expanded || ellipsisConfig.expandable === 'collapsible');\n  // Shared prop to reduce bundle size\n  const {\n    rows = 1\n  } = ellipsisConfig;\n  const needMeasureEllipsis = React.useMemo(() =>\n  // Disable ellipsis\n  mergedEnableEllipsis && (\n  // Provide suffix\n  ellipsisConfig.suffix !== undefined || ellipsisConfig.onEllipsis ||\n  // Can't use css ellipsis since we need to provide the place for button\n  ellipsisConfig.expandable || enableEdit || enableCopy), [mergedEnableEllipsis, ellipsisConfig, enableEdit, enableCopy]);\n  useIsomorphicLayoutEffect(() => {\n    if (enableEllipsis && !needMeasureEllipsis) {\n      setIsLineClampSupport(isStyleSupport('webkitLineClamp'));\n      setIsTextOverflowSupport(isStyleSupport('textOverflow'));\n    }\n  }, [needMeasureEllipsis, enableEllipsis]);\n  const [cssEllipsis, setCssEllipsis] = React.useState(mergedEnableEllipsis);\n  const canUseCssEllipsis = React.useMemo(() => {\n    if (needMeasureEllipsis) {\n      return false;\n    }\n    if (rows === 1) {\n      return isTextOverflowSupport;\n    }\n    return isLineClampSupport;\n  }, [needMeasureEllipsis, isTextOverflowSupport, isLineClampSupport]);\n  // We use effect to change from css ellipsis to js ellipsis.\n  // To make SSR still can see the ellipsis.\n  useIsomorphicLayoutEffect(() => {\n    setCssEllipsis(canUseCssEllipsis && mergedEnableEllipsis);\n  }, [canUseCssEllipsis, mergedEnableEllipsis]);\n  const isMergedEllipsis = mergedEnableEllipsis && (cssEllipsis ? isNativeEllipsis : isJsEllipsis);\n  const cssTextOverflow = mergedEnableEllipsis && rows === 1 && cssEllipsis;\n  const cssLineClamp = mergedEnableEllipsis && rows > 1 && cssEllipsis;\n  // >>>>> Expand\n  const onExpandClick = (e, info) => {\n    var _a;\n    setExpanded(info.expanded);\n    (_a = ellipsisConfig.onExpand) === null || _a === void 0 ? void 0 : _a.call(ellipsisConfig, e, info);\n  };\n  const [ellipsisWidth, setEllipsisWidth] = React.useState(0);\n  const onResize = _ref2 => {\n    let {\n      offsetWidth\n    } = _ref2;\n    setEllipsisWidth(offsetWidth);\n  };\n  // >>>>> JS Ellipsis\n  const onJsEllipsis = jsEllipsis => {\n    var _a;\n    setIsJsEllipsis(jsEllipsis);\n    // Trigger if changed\n    if (isJsEllipsis !== jsEllipsis) {\n      (_a = ellipsisConfig.onEllipsis) === null || _a === void 0 ? void 0 : _a.call(ellipsisConfig, jsEllipsis);\n    }\n  };\n  // >>>>> Native ellipsis\n  React.useEffect(() => {\n    const textEle = typographyRef.current;\n    if (enableEllipsis && cssEllipsis && textEle) {\n      const currentEllipsis = cssLineClamp ? textEle.offsetHeight < textEle.scrollHeight : textEle.offsetWidth < textEle.scrollWidth;\n      if (isNativeEllipsis !== currentEllipsis) {\n        setIsNativeEllipsis(currentEllipsis);\n      }\n    }\n  }, [enableEllipsis, cssEllipsis, children, cssLineClamp, isNativeVisible, ellipsisWidth]);\n  // https://github.com/ant-design/ant-design/issues/36786\n  // Use IntersectionObserver to check if element is invisible\n  React.useEffect(() => {\n    const textEle = typographyRef.current;\n    if (typeof IntersectionObserver === 'undefined' || !textEle || !cssEllipsis || !mergedEnableEllipsis) {\n      return;\n    }\n    /* eslint-disable-next-line compat/compat */\n    const observer = new IntersectionObserver(() => {\n      setIsNativeVisible(!!textEle.offsetParent);\n    });\n    observer.observe(textEle);\n    return () => {\n      observer.disconnect();\n    };\n  }, [cssEllipsis, mergedEnableEllipsis]);\n  // ========================== Tooltip ===========================\n  let tooltipProps = {};\n  if (ellipsisConfig.tooltip === true) {\n    tooltipProps = {\n      title: (_a = editConfig.text) !== null && _a !== void 0 ? _a : children\n    };\n  } else if ( /*#__PURE__*/React.isValidElement(ellipsisConfig.tooltip)) {\n    tooltipProps = {\n      title: ellipsisConfig.tooltip\n    };\n  } else if (typeof ellipsisConfig.tooltip === 'object') {\n    tooltipProps = Object.assign({\n      title: (_b = editConfig.text) !== null && _b !== void 0 ? _b : children\n    }, ellipsisConfig.tooltip);\n  } else {\n    tooltipProps = {\n      title: ellipsisConfig.tooltip\n    };\n  }\n  const topAriaLabel = React.useMemo(() => {\n    const isValid = val => ['string', 'number'].includes(typeof val);\n    if (!enableEllipsis || cssEllipsis) {\n      return undefined;\n    }\n    if (isValid(editConfig.text)) {\n      return editConfig.text;\n    }\n    if (isValid(children)) {\n      return children;\n    }\n    if (isValid(title)) {\n      return title;\n    }\n    if (isValid(tooltipProps.title)) {\n      return tooltipProps.title;\n    }\n    return undefined;\n  }, [enableEllipsis, cssEllipsis, title, tooltipProps.title, isMergedEllipsis]);\n  // =========================== Render ===========================\n  // >>>>>>>>>>> Editing input\n  if (editing) {\n    return /*#__PURE__*/React.createElement(Editable, {\n      value: (_c = editConfig.text) !== null && _c !== void 0 ? _c : typeof children === 'string' ? children : '',\n      onSave: onEditChange,\n      onCancel: onEditCancel,\n      onEnd: editConfig.onEnd,\n      prefixCls: prefixCls,\n      className: className,\n      style: style,\n      direction: direction,\n      component: component,\n      maxLength: editConfig.maxLength,\n      autoSize: editConfig.autoSize,\n      enterIcon: editConfig.enterIcon\n    });\n  }\n  // >>>>>>>>>>> Typography\n  // Expand\n  const renderExpand = () => {\n    const {\n      expandable,\n      symbol\n    } = ellipsisConfig;\n    if (!expandable) return null;\n    if (expanded && expandable !== 'collapsible') return null;\n    return /*#__PURE__*/React.createElement(\"a\", {\n      key: \"expand\",\n      className: `${prefixCls}-${expanded ? 'collapse' : 'expand'}`,\n      onClick: e => onExpandClick(e, {\n        expanded: !expanded\n      }),\n      \"aria-label\": expanded ? textLocale.collapse : textLocale === null || textLocale === void 0 ? void 0 : textLocale.expand\n    }, typeof symbol === 'function' ? symbol(expanded) : symbol);\n  };\n  // Edit\n  const renderEdit = () => {\n    if (!enableEdit) return;\n    const {\n      icon,\n      tooltip\n    } = editConfig;\n    const editTitle = toArray(tooltip)[0] || (textLocale === null || textLocale === void 0 ? void 0 : textLocale.edit);\n    const ariaLabel = typeof editTitle === 'string' ? editTitle : '';\n    return triggerType.includes('icon') ? ( /*#__PURE__*/React.createElement(Tooltip, {\n      key: \"edit\",\n      title: tooltip === false ? '' : editTitle\n    }, /*#__PURE__*/React.createElement(TransButton, {\n      ref: editIconRef,\n      className: `${prefixCls}-edit`,\n      onClick: onEditClick,\n      \"aria-label\": ariaLabel\n    }, icon || /*#__PURE__*/React.createElement(EditOutlined, {\n      role: \"button\"\n    })))) : null;\n  };\n  // Copy\n  const renderCopy = () => {\n    if (!enableCopy) {\n      return null;\n    }\n    return /*#__PURE__*/React.createElement(CopyBtn, Object.assign({\n      key: \"copy\"\n    }, copyConfig, {\n      prefixCls: prefixCls,\n      copied: copied,\n      locale: textLocale,\n      onCopy: onCopyClick,\n      loading: copyLoading,\n      iconOnly: children === null || children === undefined\n    }));\n  };\n  const renderOperations = canEllipsis => [\n  // (renderExpanded || ellipsisConfig.collapsible) && renderExpand(),\n  canEllipsis && renderExpand(), renderEdit(), renderCopy()];\n  const renderEllipsis = canEllipsis => [canEllipsis && !expanded && ( /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    key: \"ellipsis\"\n  }, ELLIPSIS_STR)), ellipsisConfig.suffix, renderOperations(canEllipsis)];\n  return /*#__PURE__*/React.createElement(ResizeObserver, {\n    onResize: onResize,\n    disabled: !mergedEnableEllipsis\n  }, resizeRef => ( /*#__PURE__*/React.createElement(EllipsisTooltip, {\n    tooltipProps: tooltipProps,\n    enableEllipsis: mergedEnableEllipsis,\n    isEllipsis: isMergedEllipsis\n  }, /*#__PURE__*/React.createElement(Typography, Object.assign({\n    className: classNames({\n      [`${prefixCls}-${type}`]: type,\n      [`${prefixCls}-disabled`]: disabled,\n      [`${prefixCls}-ellipsis`]: enableEllipsis,\n      [`${prefixCls}-single-line`]: mergedEnableEllipsis && rows === 1,\n      [`${prefixCls}-ellipsis-single-line`]: cssTextOverflow,\n      [`${prefixCls}-ellipsis-multiple-line`]: cssLineClamp\n    }, className),\n    prefixCls: customizePrefixCls,\n    style: Object.assign(Object.assign({}, style), {\n      WebkitLineClamp: cssLineClamp ? rows : undefined\n    }),\n    component: component,\n    ref: composeRef(resizeRef, typographyRef, ref),\n    direction: direction,\n    onClick: triggerType.includes('text') ? onEditClick : undefined,\n    \"aria-label\": topAriaLabel === null || topAriaLabel === void 0 ? void 0 : topAriaLabel.toString(),\n    title: title\n  }, textProps), /*#__PURE__*/React.createElement(Ellipsis, {\n    enableMeasure: mergedEnableEllipsis && !cssEllipsis,\n    text: children,\n    rows: rows,\n    width: ellipsisWidth,\n    onEllipsis: onJsEllipsis,\n    expanded: expanded,\n    miscDeps: [copied, expanded, copyLoading]\n  }, (node, canEllipsis) => {\n    let renderNode = node;\n    if (node.length && canEllipsis && !expanded && topAriaLabel) {\n      renderNode = /*#__PURE__*/React.createElement(\"span\", {\n        key: \"show-content\",\n        \"aria-hidden\": true\n      }, renderNode);\n    }\n    const wrappedContext = wrapperDecorations(props, /*#__PURE__*/React.createElement(React.Fragment, null, renderNode, renderEllipsis(canEllipsis)));\n    return wrappedContext;\n  })))));\n});\nexport default Base;"]},"metadata":{},"sourceType":"module"}