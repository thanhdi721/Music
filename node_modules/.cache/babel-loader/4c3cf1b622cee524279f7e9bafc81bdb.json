{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { removeCSS, updateCSS } from \"./Dom/dynamicCSS\";\nvar cached;\n\nfunction measureScrollbarSize(ele) {\n  var randomId = \"rc-scrollbar-measure-\".concat(Math.random().toString(36).substring(7));\n  var measureEle = document.createElement('div');\n  measureEle.id = randomId; // Create Style\n\n  var measureStyle = measureEle.style;\n  measureStyle.position = 'absolute';\n  measureStyle.left = '0';\n  measureStyle.top = '0';\n  measureStyle.width = '100px';\n  measureStyle.height = '100px';\n  measureStyle.overflow = 'scroll'; // Clone Style if needed\n\n  var fallbackWidth;\n  var fallbackHeight;\n\n  if (ele) {\n    var targetStyle = getComputedStyle(ele);\n    measureStyle.scrollbarColor = targetStyle.scrollbarColor;\n    measureStyle.scrollbarWidth = targetStyle.scrollbarWidth; // Set Webkit style\n\n    var webkitScrollbarStyle = getComputedStyle(ele, '::-webkit-scrollbar');\n    var width = parseInt(webkitScrollbarStyle.width, 10);\n    var height = parseInt(webkitScrollbarStyle.height, 10); // Try wrap to handle CSP case\n\n    try {\n      var widthStyle = width ? \"width: \".concat(webkitScrollbarStyle.width, \";\") : '';\n      var heightStyle = height ? \"height: \".concat(webkitScrollbarStyle.height, \";\") : '';\n      updateCSS(\"\\n#\".concat(randomId, \"::-webkit-scrollbar {\\n\").concat(widthStyle, \"\\n\").concat(heightStyle, \"\\n}\"), randomId);\n    } catch (e) {\n      // Can't wrap, just log error\n      console.error(e); // Get from style directly\n\n      fallbackWidth = width;\n      fallbackHeight = height;\n    }\n  }\n\n  document.body.appendChild(measureEle); // Measure. Get fallback style if provided\n\n  var scrollWidth = ele && fallbackWidth && !isNaN(fallbackWidth) ? fallbackWidth : measureEle.offsetWidth - measureEle.clientWidth;\n  var scrollHeight = ele && fallbackHeight && !isNaN(fallbackHeight) ? fallbackHeight : measureEle.offsetHeight - measureEle.clientHeight; // Clean up\n\n  document.body.removeChild(measureEle);\n  removeCSS(randomId);\n  return {\n    width: scrollWidth,\n    height: scrollHeight\n  };\n}\n\nexport default function getScrollBarSize(fresh) {\n  if (typeof document === 'undefined') {\n    return 0;\n  }\n\n  if (fresh || cached === undefined) {\n    cached = measureScrollbarSize();\n  }\n\n  return cached.width;\n}\nexport function getTargetScrollBarSize(target) {\n  if (typeof document === 'undefined' || !target || !(target instanceof Element)) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n\n  return measureScrollbarSize(target);\n}","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/rc-util/es/getScrollBarSize.js"],"names":["removeCSS","updateCSS","cached","measureScrollbarSize","ele","randomId","concat","Math","random","toString","substring","measureEle","document","createElement","id","measureStyle","style","position","left","top","width","height","overflow","fallbackWidth","fallbackHeight","targetStyle","getComputedStyle","scrollbarColor","scrollbarWidth","webkitScrollbarStyle","parseInt","widthStyle","heightStyle","e","console","error","body","appendChild","scrollWidth","isNaN","offsetWidth","clientWidth","scrollHeight","offsetHeight","clientHeight","removeChild","getScrollBarSize","fresh","undefined","getTargetScrollBarSize","target","Element"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,SAApB,QAAqC,kBAArC;AACA,IAAIC,MAAJ;;AACA,SAASC,oBAAT,CAA8BC,GAA9B,EAAmC;AACjC,MAAIC,QAAQ,GAAG,wBAAwBC,MAAxB,CAA+BC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,CAA/B,CAAf;AACA,MAAIC,UAAU,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAjB;AACAF,EAAAA,UAAU,CAACG,EAAX,GAAgBT,QAAhB,CAHiC,CAKjC;;AACA,MAAIU,YAAY,GAAGJ,UAAU,CAACK,KAA9B;AACAD,EAAAA,YAAY,CAACE,QAAb,GAAwB,UAAxB;AACAF,EAAAA,YAAY,CAACG,IAAb,GAAoB,GAApB;AACAH,EAAAA,YAAY,CAACI,GAAb,GAAmB,GAAnB;AACAJ,EAAAA,YAAY,CAACK,KAAb,GAAqB,OAArB;AACAL,EAAAA,YAAY,CAACM,MAAb,GAAsB,OAAtB;AACAN,EAAAA,YAAY,CAACO,QAAb,GAAwB,QAAxB,CAZiC,CAcjC;;AACA,MAAIC,aAAJ;AACA,MAAIC,cAAJ;;AACA,MAAIpB,GAAJ,EAAS;AACP,QAAIqB,WAAW,GAAGC,gBAAgB,CAACtB,GAAD,CAAlC;AACAW,IAAAA,YAAY,CAACY,cAAb,GAA8BF,WAAW,CAACE,cAA1C;AACAZ,IAAAA,YAAY,CAACa,cAAb,GAA8BH,WAAW,CAACG,cAA1C,CAHO,CAKP;;AACA,QAAIC,oBAAoB,GAAGH,gBAAgB,CAACtB,GAAD,EAAM,qBAAN,CAA3C;AACA,QAAIgB,KAAK,GAAGU,QAAQ,CAACD,oBAAoB,CAACT,KAAtB,EAA6B,EAA7B,CAApB;AACA,QAAIC,MAAM,GAAGS,QAAQ,CAACD,oBAAoB,CAACR,MAAtB,EAA8B,EAA9B,CAArB,CARO,CAUP;;AACA,QAAI;AACF,UAAIU,UAAU,GAAGX,KAAK,GAAG,UAAUd,MAAV,CAAiBuB,oBAAoB,CAACT,KAAtC,EAA6C,GAA7C,CAAH,GAAuD,EAA7E;AACA,UAAIY,WAAW,GAAGX,MAAM,GAAG,WAAWf,MAAX,CAAkBuB,oBAAoB,CAACR,MAAvC,EAA+C,GAA/C,CAAH,GAAyD,EAAjF;AACApB,MAAAA,SAAS,CAAC,MAAMK,MAAN,CAAaD,QAAb,EAAuB,yBAAvB,EAAkDC,MAAlD,CAAyDyB,UAAzD,EAAqE,IAArE,EAA2EzB,MAA3E,CAAkF0B,WAAlF,EAA+F,KAA/F,CAAD,EAAwG3B,QAAxG,CAAT;AACD,KAJD,CAIE,OAAO4B,CAAP,EAAU;AACV;AACAC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd,EAFU,CAIV;;AACAV,MAAAA,aAAa,GAAGH,KAAhB;AACAI,MAAAA,cAAc,GAAGH,MAAjB;AACD;AACF;;AACDT,EAAAA,QAAQ,CAACwB,IAAT,CAAcC,WAAd,CAA0B1B,UAA1B,EAzCiC,CA2CjC;;AACA,MAAI2B,WAAW,GAAGlC,GAAG,IAAImB,aAAP,IAAwB,CAACgB,KAAK,CAAChB,aAAD,CAA9B,GAAgDA,aAAhD,GAAgEZ,UAAU,CAAC6B,WAAX,GAAyB7B,UAAU,CAAC8B,WAAtH;AACA,MAAIC,YAAY,GAAGtC,GAAG,IAAIoB,cAAP,IAAyB,CAACe,KAAK,CAACf,cAAD,CAA/B,GAAkDA,cAAlD,GAAmEb,UAAU,CAACgC,YAAX,GAA0BhC,UAAU,CAACiC,YAA3H,CA7CiC,CA+CjC;;AACAhC,EAAAA,QAAQ,CAACwB,IAAT,CAAcS,WAAd,CAA0BlC,UAA1B;AACAX,EAAAA,SAAS,CAACK,QAAD,CAAT;AACA,SAAO;AACLe,IAAAA,KAAK,EAAEkB,WADF;AAELjB,IAAAA,MAAM,EAAEqB;AAFH,GAAP;AAID;;AACD,eAAe,SAASI,gBAAT,CAA0BC,KAA1B,EAAiC;AAC9C,MAAI,OAAOnC,QAAP,KAAoB,WAAxB,EAAqC;AACnC,WAAO,CAAP;AACD;;AACD,MAAImC,KAAK,IAAI7C,MAAM,KAAK8C,SAAxB,EAAmC;AACjC9C,IAAAA,MAAM,GAAGC,oBAAoB,EAA7B;AACD;;AACD,SAAOD,MAAM,CAACkB,KAAd;AACD;AACD,OAAO,SAAS6B,sBAAT,CAAgCC,MAAhC,EAAwC;AAC7C,MAAI,OAAOtC,QAAP,KAAoB,WAApB,IAAmC,CAACsC,MAApC,IAA8C,EAAEA,MAAM,YAAYC,OAApB,CAAlD,EAAgF;AAC9E,WAAO;AACL/B,MAAAA,KAAK,EAAE,CADF;AAELC,MAAAA,MAAM,EAAE;AAFH,KAAP;AAID;;AACD,SAAOlB,oBAAoB,CAAC+C,MAAD,CAA3B;AACD","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { removeCSS, updateCSS } from \"./Dom/dynamicCSS\";\nvar cached;\nfunction measureScrollbarSize(ele) {\n  var randomId = \"rc-scrollbar-measure-\".concat(Math.random().toString(36).substring(7));\n  var measureEle = document.createElement('div');\n  measureEle.id = randomId;\n\n  // Create Style\n  var measureStyle = measureEle.style;\n  measureStyle.position = 'absolute';\n  measureStyle.left = '0';\n  measureStyle.top = '0';\n  measureStyle.width = '100px';\n  measureStyle.height = '100px';\n  measureStyle.overflow = 'scroll';\n\n  // Clone Style if needed\n  var fallbackWidth;\n  var fallbackHeight;\n  if (ele) {\n    var targetStyle = getComputedStyle(ele);\n    measureStyle.scrollbarColor = targetStyle.scrollbarColor;\n    measureStyle.scrollbarWidth = targetStyle.scrollbarWidth;\n\n    // Set Webkit style\n    var webkitScrollbarStyle = getComputedStyle(ele, '::-webkit-scrollbar');\n    var width = parseInt(webkitScrollbarStyle.width, 10);\n    var height = parseInt(webkitScrollbarStyle.height, 10);\n\n    // Try wrap to handle CSP case\n    try {\n      var widthStyle = width ? \"width: \".concat(webkitScrollbarStyle.width, \";\") : '';\n      var heightStyle = height ? \"height: \".concat(webkitScrollbarStyle.height, \";\") : '';\n      updateCSS(\"\\n#\".concat(randomId, \"::-webkit-scrollbar {\\n\").concat(widthStyle, \"\\n\").concat(heightStyle, \"\\n}\"), randomId);\n    } catch (e) {\n      // Can't wrap, just log error\n      console.error(e);\n\n      // Get from style directly\n      fallbackWidth = width;\n      fallbackHeight = height;\n    }\n  }\n  document.body.appendChild(measureEle);\n\n  // Measure. Get fallback style if provided\n  var scrollWidth = ele && fallbackWidth && !isNaN(fallbackWidth) ? fallbackWidth : measureEle.offsetWidth - measureEle.clientWidth;\n  var scrollHeight = ele && fallbackHeight && !isNaN(fallbackHeight) ? fallbackHeight : measureEle.offsetHeight - measureEle.clientHeight;\n\n  // Clean up\n  document.body.removeChild(measureEle);\n  removeCSS(randomId);\n  return {\n    width: scrollWidth,\n    height: scrollHeight\n  };\n}\nexport default function getScrollBarSize(fresh) {\n  if (typeof document === 'undefined') {\n    return 0;\n  }\n  if (fresh || cached === undefined) {\n    cached = measureScrollbarSize();\n  }\n  return cached.width;\n}\nexport function getTargetScrollBarSize(target) {\n  if (typeof document === 'undefined' || !target || !(target instanceof Element)) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n  return measureScrollbarSize(target);\n}"]},"metadata":{},"sourceType":"module"}