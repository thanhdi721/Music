{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport * as React from 'react';\n\nfunction isConfigObj(closable) {\n  return closable !== null && _typeof(closable) === 'object';\n}\n/**\n * Convert `closable` to ClosableConfig.\n * When `preset` is true, will auto fill ClosableConfig with default value.\n */\n\n\nfunction getClosableConfig(closable, closeIcon, preset) {\n  if (closable === false || closeIcon === false && (!isConfigObj(closable) || !closable.closeIcon)) {\n    return null;\n  }\n\n  var mergedCloseIcon = typeof closeIcon !== 'boolean' ? closeIcon : undefined;\n\n  if (isConfigObj(closable)) {\n    var _closable$closeIcon;\n\n    return _objectSpread(_objectSpread({}, closable), {}, {\n      closeIcon: (_closable$closeIcon = closable.closeIcon) !== null && _closable$closeIcon !== void 0 ? _closable$closeIcon : mergedCloseIcon\n    });\n  } // When StepClosable no need auto fill, but RootClosable need this.\n\n\n  return preset || closable || closeIcon ? {\n    closeIcon: mergedCloseIcon\n  } : 'empty';\n}\n\nexport function useClosable(stepClosable, stepCloseIcon, closable, closeIcon) {\n  return React.useMemo(function () {\n    var stepClosableConfig = getClosableConfig(stepClosable, stepCloseIcon, false);\n    var rootClosableConfig = getClosableConfig(closable, closeIcon, true);\n\n    if (stepClosableConfig !== 'empty') {\n      return stepClosableConfig;\n    }\n\n    return rootClosableConfig;\n  }, [closable, closeIcon, stepClosable, stepCloseIcon]);\n}","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/@rc-component/tour/es/hooks/useClosable.js"],"names":["_objectSpread","_typeof","React","isConfigObj","closable","getClosableConfig","closeIcon","preset","mergedCloseIcon","undefined","_closable$closeIcon","useClosable","stepClosable","stepCloseIcon","useMemo","stepClosableConfig","rootClosableConfig"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,0CAA1B;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AACA,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAC7B,SAAOA,QAAQ,KAAK,IAAb,IAAqBH,OAAO,CAACG,QAAD,CAAP,KAAsB,QAAlD;AACD;AACD;AACA;AACA;AACA;;;AACA,SAASC,iBAAT,CAA2BD,QAA3B,EAAqCE,SAArC,EAAgDC,MAAhD,EAAwD;AACtD,MAAIH,QAAQ,KAAK,KAAb,IAAsBE,SAAS,KAAK,KAAd,KAAwB,CAACH,WAAW,CAACC,QAAD,CAAZ,IAA0B,CAACA,QAAQ,CAACE,SAA5D,CAA1B,EAAkG;AAChG,WAAO,IAAP;AACD;;AACD,MAAIE,eAAe,GAAG,OAAOF,SAAP,KAAqB,SAArB,GAAiCA,SAAjC,GAA6CG,SAAnE;;AACA,MAAIN,WAAW,CAACC,QAAD,CAAf,EAA2B;AACzB,QAAIM,mBAAJ;;AACA,WAAOV,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKI,QAAL,CAAd,EAA8B,EAA9B,EAAkC;AACpDE,MAAAA,SAAS,EAAE,CAACI,mBAAmB,GAAGN,QAAQ,CAACE,SAAhC,MAA+C,IAA/C,IAAuDI,mBAAmB,KAAK,KAAK,CAApF,GAAwFA,mBAAxF,GAA8GF;AADrE,KAAlC,CAApB;AAGD,GAVqD,CAYtD;;;AACA,SAAOD,MAAM,IAAIH,QAAV,IAAsBE,SAAtB,GAAkC;AACvCA,IAAAA,SAAS,EAAEE;AAD4B,GAAlC,GAEH,OAFJ;AAGD;;AACD,OAAO,SAASG,WAAT,CAAqBC,YAArB,EAAmCC,aAAnC,EAAkDT,QAAlD,EAA4DE,SAA5D,EAAuE;AAC5E,SAAOJ,KAAK,CAACY,OAAN,CAAc,YAAY;AAC/B,QAAIC,kBAAkB,GAAGV,iBAAiB,CAACO,YAAD,EAAeC,aAAf,EAA8B,KAA9B,CAA1C;AACA,QAAIG,kBAAkB,GAAGX,iBAAiB,CAACD,QAAD,EAAWE,SAAX,EAAsB,IAAtB,CAA1C;;AACA,QAAIS,kBAAkB,KAAK,OAA3B,EAAoC;AAClC,aAAOA,kBAAP;AACD;;AACD,WAAOC,kBAAP;AACD,GAPM,EAOJ,CAACZ,QAAD,EAAWE,SAAX,EAAsBM,YAAtB,EAAoCC,aAApC,CAPI,CAAP;AAQD","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport * as React from 'react';\nfunction isConfigObj(closable) {\n  return closable !== null && _typeof(closable) === 'object';\n}\n/**\n * Convert `closable` to ClosableConfig.\n * When `preset` is true, will auto fill ClosableConfig with default value.\n */\nfunction getClosableConfig(closable, closeIcon, preset) {\n  if (closable === false || closeIcon === false && (!isConfigObj(closable) || !closable.closeIcon)) {\n    return null;\n  }\n  var mergedCloseIcon = typeof closeIcon !== 'boolean' ? closeIcon : undefined;\n  if (isConfigObj(closable)) {\n    var _closable$closeIcon;\n    return _objectSpread(_objectSpread({}, closable), {}, {\n      closeIcon: (_closable$closeIcon = closable.closeIcon) !== null && _closable$closeIcon !== void 0 ? _closable$closeIcon : mergedCloseIcon\n    });\n  }\n\n  // When StepClosable no need auto fill, but RootClosable need this.\n  return preset || closable || closeIcon ? {\n    closeIcon: mergedCloseIcon\n  } : 'empty';\n}\nexport function useClosable(stepClosable, stepCloseIcon, closable, closeIcon) {\n  return React.useMemo(function () {\n    var stepClosableConfig = getClosableConfig(stepClosable, stepCloseIcon, false);\n    var rootClosableConfig = getClosableConfig(closable, closeIcon, true);\n    if (stepClosableConfig !== 'empty') {\n      return stepClosableConfig;\n    }\n    return rootClosableConfig;\n  }, [closable, closeIcon, stepClosable, stepCloseIcon]);\n}"]},"metadata":{},"sourceType":"module"}