{"ast":null,"code":"\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useContext, useMemo, useRef } from 'react';\nimport classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport genPurePanel from '../_util/PurePanel';\nimport { getStatusClassNames } from '../_util/statusUtils';\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider/context';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport useCSSVarCls from '../config-provider/hooks/useCSSVarCls';\nimport useSize from '../config-provider/hooks/useSize';\nimport { FormItemInputContext, NoFormStyle } from '../form/context';\nimport Popover from '../popover';\nimport ColorPickerPanel from './ColorPickerPanel';\nimport ColorTrigger from './components/ColorTrigger';\nimport useColorState from './hooks/useColorState';\nimport useStyle from './style';\nimport { genAlphaColor, generateColor, getAlphaColor } from './util';\n\nconst ColorPicker = props => {\n  const {\n    value,\n    defaultValue,\n    format,\n    defaultFormat,\n    allowClear = false,\n    presets,\n    children,\n    trigger = 'click',\n    open,\n    disabled,\n    placement = 'bottomLeft',\n    arrow = true,\n    panelRender,\n    showText,\n    style,\n    className,\n    size: customizeSize,\n    rootClassName,\n    prefixCls: customizePrefixCls,\n    styles,\n    disabledAlpha = false,\n    onFormatChange,\n    onChange,\n    onClear,\n    onOpenChange,\n    onChangeComplete,\n    getPopupContainer,\n    autoAdjustOverflow = true,\n    destroyTooltipOnHide\n  } = props,\n        rest = __rest(props, [\"value\", \"defaultValue\", \"format\", \"defaultFormat\", \"allowClear\", \"presets\", \"children\", \"trigger\", \"open\", \"disabled\", \"placement\", \"arrow\", \"panelRender\", \"showText\", \"style\", \"className\", \"size\", \"rootClassName\", \"prefixCls\", \"styles\", \"disabledAlpha\", \"onFormatChange\", \"onChange\", \"onClear\", \"onOpenChange\", \"onChangeComplete\", \"getPopupContainer\", \"autoAdjustOverflow\", \"destroyTooltipOnHide\"]);\n\n  const {\n    getPrefixCls,\n    direction,\n    colorPicker\n  } = useContext(ConfigContext);\n  const contextDisabled = useContext(DisabledContext);\n  const mergedDisabled = disabled !== null && disabled !== void 0 ? disabled : contextDisabled;\n  const [colorValue, setColorValue, prevValue] = useColorState('', {\n    value,\n    defaultValue\n  });\n  const [popupOpen, setPopupOpen] = useMergedState(false, {\n    value: open,\n    postState: openData => !mergedDisabled && openData,\n    onChange: onOpenChange\n  });\n  const [formatValue, setFormatValue] = useMergedState(format, {\n    value: format,\n    defaultValue: defaultFormat,\n    onChange: onFormatChange\n  });\n  const prefixCls = getPrefixCls('color-picker', customizePrefixCls);\n  const isAlphaColor = useMemo(() => getAlphaColor(colorValue) < 100, [colorValue]); // ===================== Form Status =====================\n\n  const {\n    status: contextStatus\n  } = React.useContext(FormItemInputContext); // ===================== Style =====================\n\n  const mergedSize = useSize(customizeSize);\n  const rootCls = useCSSVarCls(prefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls, rootCls);\n  const rtlCls = {\n    [`${prefixCls}-rtl`]: direction\n  };\n  const mergedRootCls = classNames(rootClassName, cssVarCls, rootCls, rtlCls);\n  const mergedCls = classNames(getStatusClassNames(prefixCls, contextStatus), {\n    [`${prefixCls}-sm`]: mergedSize === 'small',\n    [`${prefixCls}-lg`]: mergedSize === 'large'\n  }, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.className, mergedRootCls, className, hashId);\n  const mergedPopupCls = classNames(prefixCls, mergedRootCls);\n  const popupAllowCloseRef = useRef(true); // ===================== Warning ======================\n\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('ColorPicker');\n    process.env.NODE_ENV !== \"production\" ? warning(!(disabledAlpha && isAlphaColor), 'usage', '`disabledAlpha` will make the alpha to be 100% when use alpha color.') : void 0;\n  }\n\n  const handleChange = (data, type, pickColor) => {\n    var _a;\n\n    let color = generateColor(data); // If color is cleared, reset alpha to 100\n\n    const isNull = value === null || !value && defaultValue === null;\n\n    if (((_a = prevValue.current) === null || _a === void 0 ? void 0 : _a.cleared) || isNull) {\n      // ignore alpha slider\n      if (getAlphaColor(colorValue) === 0 && type !== 'alpha') {\n        color = genAlphaColor(color);\n      }\n    } // ignore alpha color\n\n\n    if (disabledAlpha && isAlphaColor) {\n      color = genAlphaColor(color);\n    } // Only for drag-and-drop color picking\n\n\n    if (pickColor) {\n      popupAllowCloseRef.current = false;\n    } else {\n      onChangeComplete === null || onChangeComplete === void 0 ? void 0 : onChangeComplete(color);\n    }\n\n    setColorValue(color);\n    onChange === null || onChange === void 0 ? void 0 : onChange(color, color.toHexString());\n  };\n\n  const handleClear = () => {\n    onClear === null || onClear === void 0 ? void 0 : onClear();\n  };\n\n  const handleChangeComplete = color => {\n    popupAllowCloseRef.current = true;\n    let changeColor = generateColor(color); // ignore alpha color\n\n    if (disabledAlpha && isAlphaColor) {\n      changeColor = genAlphaColor(color);\n    }\n\n    onChangeComplete === null || onChangeComplete === void 0 ? void 0 : onChangeComplete(changeColor);\n  };\n\n  const popoverProps = {\n    open: popupOpen,\n    trigger,\n    placement,\n    arrow,\n    rootClassName,\n    getPopupContainer,\n    autoAdjustOverflow,\n    destroyTooltipOnHide\n  };\n  const colorBaseProps = {\n    prefixCls,\n    color: colorValue,\n    allowClear,\n    disabled: mergedDisabled,\n    disabledAlpha,\n    presets,\n    panelRender,\n    format: formatValue,\n    onFormatChange: setFormatValue,\n    onChangeComplete: handleChangeComplete\n  };\n  const mergedStyle = Object.assign(Object.assign({}, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.style), style); // ============================ zIndex ============================\n\n  return wrapCSSVar( /*#__PURE__*/React.createElement(Popover, Object.assign({\n    style: styles === null || styles === void 0 ? void 0 : styles.popup,\n    overlayInnerStyle: styles === null || styles === void 0 ? void 0 : styles.popupOverlayInner,\n    onOpenChange: visible => {\n      if (popupAllowCloseRef.current && !mergedDisabled) {\n        setPopupOpen(visible);\n      }\n    },\n    content: /*#__PURE__*/React.createElement(NoFormStyle, {\n      override: true,\n      status: true\n    }, /*#__PURE__*/React.createElement(ColorPickerPanel, Object.assign({}, colorBaseProps, {\n      onChange: handleChange,\n      onChangeComplete: handleChangeComplete,\n      onClear: handleClear\n    }))),\n    overlayClassName: mergedPopupCls\n  }, popoverProps), children || /*#__PURE__*/React.createElement(ColorTrigger, Object.assign({\n    open: popupOpen,\n    className: mergedCls,\n    style: mergedStyle,\n    prefixCls: prefixCls,\n    disabled: mergedDisabled,\n    showText: showText,\n    format: formatValue\n  }, rest, {\n    color: colorValue\n  }))));\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  ColorPicker.displayName = 'ColorPicker';\n}\n\nconst PurePanel = genPurePanel(ColorPicker, 'color-picker',\n/* istanbul ignore next */\nprefixCls => prefixCls, props => Object.assign(Object.assign({}, props), {\n  placement: 'bottom',\n  autoAdjustOverflow: false\n}));\nColorPicker._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default ColorPicker;","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/antd/es/color-picker/ColorPicker.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","useContext","useMemo","useRef","classNames","useMergedState","genPurePanel","getStatusClassNames","devUseWarning","ConfigContext","DisabledContext","useCSSVarCls","useSize","FormItemInputContext","NoFormStyle","Popover","ColorPickerPanel","ColorTrigger","useColorState","useStyle","genAlphaColor","generateColor","getAlphaColor","ColorPicker","props","value","defaultValue","format","defaultFormat","allowClear","presets","children","trigger","open","disabled","placement","arrow","panelRender","showText","style","className","size","customizeSize","rootClassName","prefixCls","customizePrefixCls","styles","disabledAlpha","onFormatChange","onChange","onClear","onOpenChange","onChangeComplete","getPopupContainer","autoAdjustOverflow","destroyTooltipOnHide","rest","getPrefixCls","direction","colorPicker","contextDisabled","mergedDisabled","colorValue","setColorValue","prevValue","popupOpen","setPopupOpen","postState","openData","formatValue","setFormatValue","isAlphaColor","status","contextStatus","mergedSize","rootCls","wrapCSSVar","hashId","cssVarCls","rtlCls","mergedRootCls","mergedCls","mergedPopupCls","popupAllowCloseRef","process","env","NODE_ENV","warning","handleChange","data","type","pickColor","_a","color","isNull","current","cleared","toHexString","handleClear","handleChangeComplete","changeColor","popoverProps","colorBaseProps","mergedStyle","assign","createElement","popup","overlayInnerStyle","popupOverlayInner","visible","content","override","overlayClassName","displayName","PurePanel","_InternalPanelDoNotUseOrYouWillBeFired"],"mappings":"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","sourcesContent":["\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { useContext, useMemo, useRef } from 'react';\nimport classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport genPurePanel from '../_util/PurePanel';\nimport { getStatusClassNames } from '../_util/statusUtils';\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider/context';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport useCSSVarCls from '../config-provider/hooks/useCSSVarCls';\nimport useSize from '../config-provider/hooks/useSize';\nimport { FormItemInputContext, NoFormStyle } from '../form/context';\nimport Popover from '../popover';\nimport ColorPickerPanel from './ColorPickerPanel';\nimport ColorTrigger from './components/ColorTrigger';\nimport useColorState from './hooks/useColorState';\nimport useStyle from './style';\nimport { genAlphaColor, generateColor, getAlphaColor } from './util';\nconst ColorPicker = props => {\n  const {\n      value,\n      defaultValue,\n      format,\n      defaultFormat,\n      allowClear = false,\n      presets,\n      children,\n      trigger = 'click',\n      open,\n      disabled,\n      placement = 'bottomLeft',\n      arrow = true,\n      panelRender,\n      showText,\n      style,\n      className,\n      size: customizeSize,\n      rootClassName,\n      prefixCls: customizePrefixCls,\n      styles,\n      disabledAlpha = false,\n      onFormatChange,\n      onChange,\n      onClear,\n      onOpenChange,\n      onChangeComplete,\n      getPopupContainer,\n      autoAdjustOverflow = true,\n      destroyTooltipOnHide\n    } = props,\n    rest = __rest(props, [\"value\", \"defaultValue\", \"format\", \"defaultFormat\", \"allowClear\", \"presets\", \"children\", \"trigger\", \"open\", \"disabled\", \"placement\", \"arrow\", \"panelRender\", \"showText\", \"style\", \"className\", \"size\", \"rootClassName\", \"prefixCls\", \"styles\", \"disabledAlpha\", \"onFormatChange\", \"onChange\", \"onClear\", \"onOpenChange\", \"onChangeComplete\", \"getPopupContainer\", \"autoAdjustOverflow\", \"destroyTooltipOnHide\"]);\n  const {\n    getPrefixCls,\n    direction,\n    colorPicker\n  } = useContext(ConfigContext);\n  const contextDisabled = useContext(DisabledContext);\n  const mergedDisabled = disabled !== null && disabled !== void 0 ? disabled : contextDisabled;\n  const [colorValue, setColorValue, prevValue] = useColorState('', {\n    value,\n    defaultValue\n  });\n  const [popupOpen, setPopupOpen] = useMergedState(false, {\n    value: open,\n    postState: openData => !mergedDisabled && openData,\n    onChange: onOpenChange\n  });\n  const [formatValue, setFormatValue] = useMergedState(format, {\n    value: format,\n    defaultValue: defaultFormat,\n    onChange: onFormatChange\n  });\n  const prefixCls = getPrefixCls('color-picker', customizePrefixCls);\n  const isAlphaColor = useMemo(() => getAlphaColor(colorValue) < 100, [colorValue]);\n  // ===================== Form Status =====================\n  const {\n    status: contextStatus\n  } = React.useContext(FormItemInputContext);\n  // ===================== Style =====================\n  const mergedSize = useSize(customizeSize);\n  const rootCls = useCSSVarCls(prefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls, rootCls);\n  const rtlCls = {\n    [`${prefixCls}-rtl`]: direction\n  };\n  const mergedRootCls = classNames(rootClassName, cssVarCls, rootCls, rtlCls);\n  const mergedCls = classNames(getStatusClassNames(prefixCls, contextStatus), {\n    [`${prefixCls}-sm`]: mergedSize === 'small',\n    [`${prefixCls}-lg`]: mergedSize === 'large'\n  }, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.className, mergedRootCls, className, hashId);\n  const mergedPopupCls = classNames(prefixCls, mergedRootCls);\n  const popupAllowCloseRef = useRef(true);\n  // ===================== Warning ======================\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('ColorPicker');\n    process.env.NODE_ENV !== \"production\" ? warning(!(disabledAlpha && isAlphaColor), 'usage', '`disabledAlpha` will make the alpha to be 100% when use alpha color.') : void 0;\n  }\n  const handleChange = (data, type, pickColor) => {\n    var _a;\n    let color = generateColor(data);\n    // If color is cleared, reset alpha to 100\n    const isNull = value === null || !value && defaultValue === null;\n    if (((_a = prevValue.current) === null || _a === void 0 ? void 0 : _a.cleared) || isNull) {\n      // ignore alpha slider\n      if (getAlphaColor(colorValue) === 0 && type !== 'alpha') {\n        color = genAlphaColor(color);\n      }\n    }\n    // ignore alpha color\n    if (disabledAlpha && isAlphaColor) {\n      color = genAlphaColor(color);\n    }\n    // Only for drag-and-drop color picking\n    if (pickColor) {\n      popupAllowCloseRef.current = false;\n    } else {\n      onChangeComplete === null || onChangeComplete === void 0 ? void 0 : onChangeComplete(color);\n    }\n    setColorValue(color);\n    onChange === null || onChange === void 0 ? void 0 : onChange(color, color.toHexString());\n  };\n  const handleClear = () => {\n    onClear === null || onClear === void 0 ? void 0 : onClear();\n  };\n  const handleChangeComplete = color => {\n    popupAllowCloseRef.current = true;\n    let changeColor = generateColor(color);\n    // ignore alpha color\n    if (disabledAlpha && isAlphaColor) {\n      changeColor = genAlphaColor(color);\n    }\n    onChangeComplete === null || onChangeComplete === void 0 ? void 0 : onChangeComplete(changeColor);\n  };\n  const popoverProps = {\n    open: popupOpen,\n    trigger,\n    placement,\n    arrow,\n    rootClassName,\n    getPopupContainer,\n    autoAdjustOverflow,\n    destroyTooltipOnHide\n  };\n  const colorBaseProps = {\n    prefixCls,\n    color: colorValue,\n    allowClear,\n    disabled: mergedDisabled,\n    disabledAlpha,\n    presets,\n    panelRender,\n    format: formatValue,\n    onFormatChange: setFormatValue,\n    onChangeComplete: handleChangeComplete\n  };\n  const mergedStyle = Object.assign(Object.assign({}, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.style), style);\n  // ============================ zIndex ============================\n  return wrapCSSVar( /*#__PURE__*/React.createElement(Popover, Object.assign({\n    style: styles === null || styles === void 0 ? void 0 : styles.popup,\n    overlayInnerStyle: styles === null || styles === void 0 ? void 0 : styles.popupOverlayInner,\n    onOpenChange: visible => {\n      if (popupAllowCloseRef.current && !mergedDisabled) {\n        setPopupOpen(visible);\n      }\n    },\n    content: /*#__PURE__*/React.createElement(NoFormStyle, {\n      override: true,\n      status: true\n    }, /*#__PURE__*/React.createElement(ColorPickerPanel, Object.assign({}, colorBaseProps, {\n      onChange: handleChange,\n      onChangeComplete: handleChangeComplete,\n      onClear: handleClear\n    }))),\n    overlayClassName: mergedPopupCls\n  }, popoverProps), children || ( /*#__PURE__*/React.createElement(ColorTrigger, Object.assign({\n    open: popupOpen,\n    className: mergedCls,\n    style: mergedStyle,\n    prefixCls: prefixCls,\n    disabled: mergedDisabled,\n    showText: showText,\n    format: formatValue\n  }, rest, {\n    color: colorValue\n  })))));\n};\nif (process.env.NODE_ENV !== 'production') {\n  ColorPicker.displayName = 'ColorPicker';\n}\nconst PurePanel = genPurePanel(ColorPicker, 'color-picker', /* istanbul ignore next */\nprefixCls => prefixCls, props => Object.assign(Object.assign({}, props), {\n  placement: 'bottom',\n  autoAdjustOverflow: false\n}));\nColorPicker._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default ColorPicker;"]},"metadata":{},"sourceType":"module"}