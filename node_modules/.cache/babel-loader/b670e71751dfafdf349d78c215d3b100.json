{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\n\nconst genBaseStyle = token => {\n  const {\n    antCls,\n    componentCls,\n    iconCls,\n    avatarBg,\n    avatarColor,\n    containerSize,\n    containerSizeLG,\n    containerSizeSM,\n    textFontSize,\n    textFontSizeLG,\n    textFontSizeSM,\n    borderRadius,\n    borderRadiusLG,\n    borderRadiusSM,\n    lineWidth,\n    lineType\n  } = token; // Avatar size style\n\n  const avatarSizeStyle = (size, fontSize, radius) => ({\n    width: size,\n    height: size,\n    borderRadius: '50%',\n    [`&${componentCls}-square`]: {\n      borderRadius: radius\n    },\n    [`&${componentCls}-icon`]: {\n      fontSize,\n      [`> ${iconCls}`]: {\n        margin: 0\n      }\n    }\n  });\n\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      display: 'inline-flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      overflow: 'hidden',\n      color: avatarColor,\n      whiteSpace: 'nowrap',\n      textAlign: 'center',\n      verticalAlign: 'middle',\n      background: avatarBg,\n      border: `${unit(lineWidth)} ${lineType} transparent`,\n      [`&-image`]: {\n        background: 'transparent'\n      },\n      [`${antCls}-image-img`]: {\n        display: 'block'\n      }\n    }), avatarSizeStyle(containerSize, textFontSize, borderRadius)), {\n      [`&-lg`]: Object.assign({}, avatarSizeStyle(containerSizeLG, textFontSizeLG, borderRadiusLG)),\n      [`&-sm`]: Object.assign({}, avatarSizeStyle(containerSizeSM, textFontSizeSM, borderRadiusSM)),\n      '> img': {\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover'\n      }\n    })\n  };\n};\n\nconst genGroupStyle = token => {\n  const {\n    componentCls,\n    groupBorderColor,\n    groupOverlapping,\n    groupSpace\n  } = token;\n  return {\n    [`${componentCls}-group`]: {\n      display: 'inline-flex',\n      [`${componentCls}`]: {\n        borderColor: groupBorderColor\n      },\n      [`> *:not(:first-child)`]: {\n        marginInlineStart: groupOverlapping\n      }\n    },\n    [`${componentCls}-group-popover`]: {\n      [`${componentCls} + ${componentCls}`]: {\n        marginInlineStart: groupSpace\n      }\n    }\n  };\n};\n\nexport const prepareComponentToken = token => {\n  const {\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    fontSize,\n    fontSizeLG,\n    fontSizeXL,\n    fontSizeHeading3,\n    marginXS,\n    marginXXS,\n    colorBorderBg\n  } = token;\n  return {\n    containerSize: controlHeight,\n    containerSizeLG: controlHeightLG,\n    containerSizeSM: controlHeightSM,\n    textFontSize: Math.round((fontSizeLG + fontSizeXL) / 2),\n    textFontSizeLG: fontSizeHeading3,\n    textFontSizeSM: fontSize,\n    groupSpace: marginXXS,\n    groupOverlapping: -marginXS,\n    groupBorderColor: colorBorderBg\n  };\n};\nexport default genStyleHooks('Avatar', token => {\n  const {\n    colorTextLightSolid,\n    colorTextPlaceholder\n  } = token;\n  const avatarToken = mergeToken(token, {\n    avatarBg: colorTextPlaceholder,\n    avatarColor: colorTextLightSolid\n  });\n  return [genBaseStyle(avatarToken), genGroupStyle(avatarToken)];\n}, prepareComponentToken);","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/antd/es/avatar/style/index.js"],"names":["unit","resetComponent","genStyleHooks","mergeToken","genBaseStyle","token","antCls","componentCls","iconCls","avatarBg","avatarColor","containerSize","containerSizeLG","containerSizeSM","textFontSize","textFontSizeLG","textFontSizeSM","borderRadius","borderRadiusLG","borderRadiusSM","lineWidth","lineType","avatarSizeStyle","size","fontSize","radius","width","height","margin","Object","assign","position","display","justifyContent","alignItems","overflow","color","whiteSpace","textAlign","verticalAlign","background","border","objectFit","genGroupStyle","groupBorderColor","groupOverlapping","groupSpace","borderColor","marginInlineStart","prepareComponentToken","controlHeight","controlHeightLG","controlHeightSM","fontSizeLG","fontSizeXL","fontSizeHeading3","marginXS","marginXXS","colorBorderBg","Math","round","colorTextLightSolid","colorTextPlaceholder","avatarToken"],"mappings":"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","sourcesContent":["import { unit } from '@ant-design/cssinjs';\nimport { resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nconst genBaseStyle = token => {\n  const {\n    antCls,\n    componentCls,\n    iconCls,\n    avatarBg,\n    avatarColor,\n    containerSize,\n    containerSizeLG,\n    containerSizeSM,\n    textFontSize,\n    textFontSizeLG,\n    textFontSizeSM,\n    borderRadius,\n    borderRadiusLG,\n    borderRadiusSM,\n    lineWidth,\n    lineType\n  } = token;\n  // Avatar size style\n  const avatarSizeStyle = (size, fontSize, radius) => ({\n    width: size,\n    height: size,\n    borderRadius: '50%',\n    [`&${componentCls}-square`]: {\n      borderRadius: radius\n    },\n    [`&${componentCls}-icon`]: {\n      fontSize,\n      [`> ${iconCls}`]: {\n        margin: 0\n      }\n    }\n  });\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      display: 'inline-flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      overflow: 'hidden',\n      color: avatarColor,\n      whiteSpace: 'nowrap',\n      textAlign: 'center',\n      verticalAlign: 'middle',\n      background: avatarBg,\n      border: `${unit(lineWidth)} ${lineType} transparent`,\n      [`&-image`]: {\n        background: 'transparent'\n      },\n      [`${antCls}-image-img`]: {\n        display: 'block'\n      }\n    }), avatarSizeStyle(containerSize, textFontSize, borderRadius)), {\n      [`&-lg`]: Object.assign({}, avatarSizeStyle(containerSizeLG, textFontSizeLG, borderRadiusLG)),\n      [`&-sm`]: Object.assign({}, avatarSizeStyle(containerSizeSM, textFontSizeSM, borderRadiusSM)),\n      '> img': {\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover'\n      }\n    })\n  };\n};\nconst genGroupStyle = token => {\n  const {\n    componentCls,\n    groupBorderColor,\n    groupOverlapping,\n    groupSpace\n  } = token;\n  return {\n    [`${componentCls}-group`]: {\n      display: 'inline-flex',\n      [`${componentCls}`]: {\n        borderColor: groupBorderColor\n      },\n      [`> *:not(:first-child)`]: {\n        marginInlineStart: groupOverlapping\n      }\n    },\n    [`${componentCls}-group-popover`]: {\n      [`${componentCls} + ${componentCls}`]: {\n        marginInlineStart: groupSpace\n      }\n    }\n  };\n};\nexport const prepareComponentToken = token => {\n  const {\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    fontSize,\n    fontSizeLG,\n    fontSizeXL,\n    fontSizeHeading3,\n    marginXS,\n    marginXXS,\n    colorBorderBg\n  } = token;\n  return {\n    containerSize: controlHeight,\n    containerSizeLG: controlHeightLG,\n    containerSizeSM: controlHeightSM,\n    textFontSize: Math.round((fontSizeLG + fontSizeXL) / 2),\n    textFontSizeLG: fontSizeHeading3,\n    textFontSizeSM: fontSize,\n    groupSpace: marginXXS,\n    groupOverlapping: -marginXS,\n    groupBorderColor: colorBorderBg\n  };\n};\nexport default genStyleHooks('Avatar', token => {\n  const {\n    colorTextLightSolid,\n    colorTextPlaceholder\n  } = token;\n  const avatarToken = mergeToken(token, {\n    avatarBg: colorTextPlaceholder,\n    avatarColor: colorTextLightSolid\n  });\n  return [genBaseStyle(avatarToken), genGroupStyle(avatarToken)];\n}, prepareComponentToken);"]},"metadata":{},"sourceType":"module"}