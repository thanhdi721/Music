{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEvent, useMergedState } from 'rc-util';\nimport raf from \"rc-util/es/raf\";\nimport React from 'react';\n/**\n * Will be `true` immediately for next effect.\n * But will be `false` for a delay of effect.\n */\n\nexport default function useDelayState(value, defaultValue, onChange) {\n  var _useMergedState = useMergedState(defaultValue, {\n    value: value\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      state = _useMergedState2[0],\n      setState = _useMergedState2[1];\n\n  var nextValueRef = React.useRef(value); // ============================= Update =============================\n\n  var rafRef = React.useRef();\n\n  var cancelRaf = function cancelRaf() {\n    raf.cancel(rafRef.current);\n  };\n\n  var doUpdate = useEvent(function () {\n    setState(nextValueRef.current);\n\n    if (onChange && state !== nextValueRef.current) {\n      onChange(nextValueRef.current);\n    }\n  });\n  var updateValue = useEvent(function (next, immediately) {\n    cancelRaf();\n    nextValueRef.current = next;\n\n    if (next || immediately) {\n      doUpdate();\n    } else {\n      rafRef.current = raf(doUpdate);\n    }\n  });\n  React.useEffect(function () {\n    return cancelRaf;\n  }, []);\n  return [state, updateValue];\n}","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/rc-picker/es/PickerInput/hooks/useDelayState.js"],"names":["_slicedToArray","useEvent","useMergedState","raf","React","useDelayState","value","defaultValue","onChange","_useMergedState","_useMergedState2","state","setState","nextValueRef","useRef","rafRef","cancelRaf","cancel","current","doUpdate","updateValue","next","immediately","useEffect"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,SAAzC;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;AACA;;AACA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,YAA9B,EAA4CC,QAA5C,EAAsD;AACnE,MAAIC,eAAe,GAAGP,cAAc,CAACK,YAAD,EAAe;AAC/CD,IAAAA,KAAK,EAAEA;AADwC,GAAf,CAApC;AAAA,MAGEI,gBAAgB,GAAGV,cAAc,CAACS,eAAD,EAAkB,CAAlB,CAHnC;AAAA,MAIEE,KAAK,GAAGD,gBAAgB,CAAC,CAAD,CAJ1B;AAAA,MAKEE,QAAQ,GAAGF,gBAAgB,CAAC,CAAD,CAL7B;;AAMA,MAAIG,YAAY,GAAGT,KAAK,CAACU,MAAN,CAAaR,KAAb,CAAnB,CAPmE,CASnE;;AACA,MAAIS,MAAM,GAAGX,KAAK,CAACU,MAAN,EAAb;;AACA,MAAIE,SAAS,GAAG,SAASA,SAAT,GAAqB;AACnCb,IAAAA,GAAG,CAACc,MAAJ,CAAWF,MAAM,CAACG,OAAlB;AACD,GAFD;;AAGA,MAAIC,QAAQ,GAAGlB,QAAQ,CAAC,YAAY;AAClCW,IAAAA,QAAQ,CAACC,YAAY,CAACK,OAAd,CAAR;;AACA,QAAIV,QAAQ,IAAIG,KAAK,KAAKE,YAAY,CAACK,OAAvC,EAAgD;AAC9CV,MAAAA,QAAQ,CAACK,YAAY,CAACK,OAAd,CAAR;AACD;AACF,GALsB,CAAvB;AAMA,MAAIE,WAAW,GAAGnB,QAAQ,CAAC,UAAUoB,IAAV,EAAgBC,WAAhB,EAA6B;AACtDN,IAAAA,SAAS;AACTH,IAAAA,YAAY,CAACK,OAAb,GAAuBG,IAAvB;;AACA,QAAIA,IAAI,IAAIC,WAAZ,EAAyB;AACvBH,MAAAA,QAAQ;AACT,KAFD,MAEO;AACLJ,MAAAA,MAAM,CAACG,OAAP,GAAiBf,GAAG,CAACgB,QAAD,CAApB;AACD;AACF,GARyB,CAA1B;AASAf,EAAAA,KAAK,CAACmB,SAAN,CAAgB,YAAY;AAC1B,WAAOP,SAAP;AACD,GAFD,EAEG,EAFH;AAGA,SAAO,CAACL,KAAD,EAAQS,WAAR,CAAP;AACD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEvent, useMergedState } from 'rc-util';\nimport raf from \"rc-util/es/raf\";\nimport React from 'react';\n\n/**\n * Will be `true` immediately for next effect.\n * But will be `false` for a delay of effect.\n */\nexport default function useDelayState(value, defaultValue, onChange) {\n  var _useMergedState = useMergedState(defaultValue, {\n      value: value\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    state = _useMergedState2[0],\n    setState = _useMergedState2[1];\n  var nextValueRef = React.useRef(value);\n\n  // ============================= Update =============================\n  var rafRef = React.useRef();\n  var cancelRaf = function cancelRaf() {\n    raf.cancel(rafRef.current);\n  };\n  var doUpdate = useEvent(function () {\n    setState(nextValueRef.current);\n    if (onChange && state !== nextValueRef.current) {\n      onChange(nextValueRef.current);\n    }\n  });\n  var updateValue = useEvent(function (next, immediately) {\n    cancelRaf();\n    nextValueRef.current = next;\n    if (next || immediately) {\n      doUpdate();\n    } else {\n      rafRef.current = raf(doUpdate);\n    }\n  });\n  React.useEffect(function () {\n    return cancelRaf;\n  }, []);\n  return [state, updateValue];\n}"]},"metadata":{},"sourceType":"module"}