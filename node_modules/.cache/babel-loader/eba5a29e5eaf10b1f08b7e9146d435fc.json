{"ast":null,"code":"import * as React from 'react';\nconst EMPTY_KEYS = [];\n\nfunction filterKeys(keys, dataKeys) {\n  const filteredKeys = keys.filter(key => dataKeys.has(key));\n  return keys.length === filteredKeys.length ? keys : filteredKeys;\n}\n\nfunction flattenKeys(keys) {\n  return Array.from(keys).join(';');\n}\n\nexport default function useSelection(leftDataSource, rightDataSource) {\n  let selectedKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EMPTY_KEYS; // Prepare `dataSource` keys\n\n  const [leftKeys, rightKeys] = React.useMemo(() => [new Set(leftDataSource.map(src => src.key)), new Set(rightDataSource.map(src => src.key))], [leftDataSource, rightDataSource]); // Selected Keys\n\n  const [sourceSelectedKeys, setSourceSelectedKeys] = React.useState(() => filterKeys(selectedKeys, leftKeys));\n  const [targetSelectedKeys, setTargetSelectedKeys] = React.useState(() => filterKeys(selectedKeys, rightKeys)); // Fill selected keys\n\n  React.useEffect(() => {\n    setSourceSelectedKeys(filterKeys(selectedKeys, leftKeys));\n    setTargetSelectedKeys(filterKeys(selectedKeys, rightKeys));\n  }, [selectedKeys]); // Reset when data changed\n\n  React.useEffect(() => {\n    setSourceSelectedKeys(filterKeys(sourceSelectedKeys, leftKeys));\n    setTargetSelectedKeys(filterKeys(targetSelectedKeys, rightKeys));\n  }, [flattenKeys(leftKeys), flattenKeys(rightKeys)]);\n  return [// Keys\n  sourceSelectedKeys, targetSelectedKeys, // Updater\n  setSourceSelectedKeys, setTargetSelectedKeys];\n}","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/antd/es/transfer/hooks/useSelection.js"],"names":["React","EMPTY_KEYS","filterKeys","keys","dataKeys","filteredKeys","filter","key","has","length","flattenKeys","Array","from","join","useSelection","leftDataSource","rightDataSource","selectedKeys","arguments","undefined","leftKeys","rightKeys","useMemo","Set","map","src","sourceSelectedKeys","setSourceSelectedKeys","useState","targetSelectedKeys","setTargetSelectedKeys","useEffect"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,MAAMC,UAAU,GAAG,EAAnB;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,QAA1B,EAAoC;AAClC,QAAMC,YAAY,GAAGF,IAAI,CAACG,MAAL,CAAYC,GAAG,IAAIH,QAAQ,CAACI,GAAT,CAAaD,GAAb,CAAnB,CAArB;AACA,SAAOJ,IAAI,CAACM,MAAL,KAAgBJ,YAAY,CAACI,MAA7B,GAAsCN,IAAtC,GAA6CE,YAApD;AACD;;AACD,SAASK,WAAT,CAAqBP,IAArB,EAA2B;AACzB,SAAOQ,KAAK,CAACC,IAAN,CAAWT,IAAX,EAAiBU,IAAjB,CAAsB,GAAtB,CAAP;AACD;;AACD,eAAe,SAASC,YAAT,CAAsBC,cAAtB,EAAsCC,eAAtC,EAAuD;AACpE,MAAIC,YAAY,GAAGC,SAAS,CAACT,MAAV,GAAmB,CAAnB,IAAwBS,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoEjB,UAAvF,CADoE,CAEpE;;AACA,QAAM,CAACmB,QAAD,EAAWC,SAAX,IAAwBrB,KAAK,CAACsB,OAAN,CAAc,MAAM,CAAC,IAAIC,GAAJ,CAAQR,cAAc,CAACS,GAAf,CAAmBC,GAAG,IAAIA,GAAG,CAAClB,GAA9B,CAAR,CAAD,EAA8C,IAAIgB,GAAJ,CAAQP,eAAe,CAACQ,GAAhB,CAAoBC,GAAG,IAAIA,GAAG,CAAClB,GAA/B,CAAR,CAA9C,CAApB,EAAiH,CAACQ,cAAD,EAAiBC,eAAjB,CAAjH,CAA9B,CAHoE,CAIpE;;AACA,QAAM,CAACU,kBAAD,EAAqBC,qBAArB,IAA8C3B,KAAK,CAAC4B,QAAN,CAAe,MAAM1B,UAAU,CAACe,YAAD,EAAeG,QAAf,CAA/B,CAApD;AACA,QAAM,CAACS,kBAAD,EAAqBC,qBAArB,IAA8C9B,KAAK,CAAC4B,QAAN,CAAe,MAAM1B,UAAU,CAACe,YAAD,EAAeI,SAAf,CAA/B,CAApD,CANoE,CAOpE;;AACArB,EAAAA,KAAK,CAAC+B,SAAN,CAAgB,MAAM;AACpBJ,IAAAA,qBAAqB,CAACzB,UAAU,CAACe,YAAD,EAAeG,QAAf,CAAX,CAArB;AACAU,IAAAA,qBAAqB,CAAC5B,UAAU,CAACe,YAAD,EAAeI,SAAf,CAAX,CAArB;AACD,GAHD,EAGG,CAACJ,YAAD,CAHH,EARoE,CAYpE;;AACAjB,EAAAA,KAAK,CAAC+B,SAAN,CAAgB,MAAM;AACpBJ,IAAAA,qBAAqB,CAACzB,UAAU,CAACwB,kBAAD,EAAqBN,QAArB,CAAX,CAArB;AACAU,IAAAA,qBAAqB,CAAC5B,UAAU,CAAC2B,kBAAD,EAAqBR,SAArB,CAAX,CAArB;AACD,GAHD,EAGG,CAACX,WAAW,CAACU,QAAD,CAAZ,EAAwBV,WAAW,CAACW,SAAD,CAAnC,CAHH;AAIA,SAAO,CACP;AACAK,EAAAA,kBAFO,EAEaG,kBAFb,EAGP;AACAF,EAAAA,qBAJO,EAIgBG,qBAJhB,CAAP;AAKD","sourcesContent":["import * as React from 'react';\nconst EMPTY_KEYS = [];\nfunction filterKeys(keys, dataKeys) {\n  const filteredKeys = keys.filter(key => dataKeys.has(key));\n  return keys.length === filteredKeys.length ? keys : filteredKeys;\n}\nfunction flattenKeys(keys) {\n  return Array.from(keys).join(';');\n}\nexport default function useSelection(leftDataSource, rightDataSource) {\n  let selectedKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EMPTY_KEYS;\n  // Prepare `dataSource` keys\n  const [leftKeys, rightKeys] = React.useMemo(() => [new Set(leftDataSource.map(src => src.key)), new Set(rightDataSource.map(src => src.key))], [leftDataSource, rightDataSource]);\n  // Selected Keys\n  const [sourceSelectedKeys, setSourceSelectedKeys] = React.useState(() => filterKeys(selectedKeys, leftKeys));\n  const [targetSelectedKeys, setTargetSelectedKeys] = React.useState(() => filterKeys(selectedKeys, rightKeys));\n  // Fill selected keys\n  React.useEffect(() => {\n    setSourceSelectedKeys(filterKeys(selectedKeys, leftKeys));\n    setTargetSelectedKeys(filterKeys(selectedKeys, rightKeys));\n  }, [selectedKeys]);\n  // Reset when data changed\n  React.useEffect(() => {\n    setSourceSelectedKeys(filterKeys(sourceSelectedKeys, leftKeys));\n    setTargetSelectedKeys(filterKeys(targetSelectedKeys, rightKeys));\n  }, [flattenKeys(leftKeys), flattenKeys(rightKeys)]);\n  return [\n  // Keys\n  sourceSelectedKeys, targetSelectedKeys,\n  // Updater\n  setSourceSelectedKeys, setTargetSelectedKeys];\n}"]},"metadata":{},"sourceType":"module"}