{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"prefixCls\", \"className\", \"style\", \"min\", \"max\", \"step\", \"defaultValue\", \"value\", \"disabled\", \"readOnly\", \"upHandler\", \"downHandler\", \"keyboard\", \"changeOnWheel\", \"controls\", \"classNames\", \"stringMode\", \"parser\", \"formatter\", \"precision\", \"decimalSeparator\", \"onChange\", \"onInput\", \"onPressEnter\", \"onStep\", \"changeOnBlur\"],\n    _excluded2 = [\"disabled\", \"style\", \"prefixCls\", \"value\", \"prefix\", \"suffix\", \"addonBefore\", \"addonAfter\", \"className\", \"classNames\"];\nimport getMiniDecimal, { getNumberPrecision, num2str, toFixed, validateNumber } from '@rc-component/mini-decimal';\nimport clsx from 'classnames';\nimport { BaseInput } from 'rc-input';\nimport { useLayoutUpdateEffect } from \"rc-util/es/hooks/useLayoutEffect\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport * as React from 'react';\nimport useCursor from \"./hooks/useCursor\";\nimport StepHandler from \"./StepHandler\";\nimport { getDecupleSteps } from \"./utils/numberUtil\";\nimport { triggerFocus } from \"rc-input/es/utils/commonUtils\";\nimport useFrame from \"./hooks/useFrame\";\n/**\n * We support `stringMode` which need handle correct type when user call in onChange\n * format max or min value\n * 1. if isInvalid return null\n * 2. if precision is undefined, return decimal\n * 3. format with precision\n *    I. if max > 0, round down with precision. Example: max= 3.5, precision=0  afterFormat: 3\n *    II. if max < 0, round up with precision. Example: max= -3.5, precision=0  afterFormat: -4\n *    III. if min > 0, round up with precision. Example: min= 3.5, precision=0  afterFormat: 4\n *    IV. if min < 0, round down with precision. Example: max= -3.5, precision=0  afterFormat: -3\n */\n\nvar getDecimalValue = function getDecimalValue(stringMode, decimalValue) {\n  if (stringMode || decimalValue.isEmpty()) {\n    return decimalValue.toString();\n  }\n\n  return decimalValue.toNumber();\n};\n\nvar getDecimalIfValidate = function getDecimalIfValidate(value) {\n  var decimal = getMiniDecimal(value);\n  return decimal.isInvalidate() ? null : decimal;\n};\n\nvar InternalInputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _clsx;\n\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-input-number' : _props$prefixCls,\n      className = props.className,\n      style = props.style,\n      min = props.min,\n      max = props.max,\n      _props$step = props.step,\n      step = _props$step === void 0 ? 1 : _props$step,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      disabled = props.disabled,\n      readOnly = props.readOnly,\n      upHandler = props.upHandler,\n      downHandler = props.downHandler,\n      keyboard = props.keyboard,\n      _props$changeOnWheel = props.changeOnWheel,\n      changeOnWheel = _props$changeOnWheel === void 0 ? false : _props$changeOnWheel,\n      _props$controls = props.controls,\n      controls = _props$controls === void 0 ? true : _props$controls,\n      classNames = props.classNames,\n      stringMode = props.stringMode,\n      parser = props.parser,\n      formatter = props.formatter,\n      precision = props.precision,\n      decimalSeparator = props.decimalSeparator,\n      onChange = props.onChange,\n      onInput = props.onInput,\n      onPressEnter = props.onPressEnter,\n      onStep = props.onStep,\n      _props$changeOnBlur = props.changeOnBlur,\n      changeOnBlur = _props$changeOnBlur === void 0 ? true : _props$changeOnBlur,\n      inputProps = _objectWithoutProperties(props, _excluded);\n\n  var inputClassName = \"\".concat(prefixCls, \"-input\");\n  var inputRef = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focus = _React$useState2[0],\n      setFocus = _React$useState2[1];\n\n  var userTypingRef = React.useRef(false);\n  var compositionRef = React.useRef(false);\n  var shiftKeyRef = React.useRef(false); // ============================ Value =============================\n  // Real value control\n\n  var _React$useState3 = React.useState(function () {\n    return getMiniDecimal(value !== null && value !== void 0 ? value : defaultValue);\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      decimalValue = _React$useState4[0],\n      setDecimalValue = _React$useState4[1];\n\n  function setUncontrolledDecimalValue(newDecimal) {\n    if (value === undefined) {\n      setDecimalValue(newDecimal);\n    }\n  } // ====================== Parser & Formatter ======================\n\n  /**\n   * `precision` is used for formatter & onChange.\n   * It will auto generate by `value` & `step`.\n   * But it will not block user typing.\n   *\n   * Note: Auto generate `precision` is used for legacy logic.\n   * We should remove this since we already support high precision with BigInt.\n   *\n   * @param number  Provide which number should calculate precision\n   * @param userTyping  Change by user typing\n   */\n\n\n  var getPrecision = React.useCallback(function (numStr, userTyping) {\n    if (userTyping) {\n      return undefined;\n    }\n\n    if (precision >= 0) {\n      return precision;\n    }\n\n    return Math.max(getNumberPrecision(numStr), getNumberPrecision(step));\n  }, [precision, step]); // >>> Parser\n\n  var mergedParser = React.useCallback(function (num) {\n    var numStr = String(num);\n\n    if (parser) {\n      return parser(numStr);\n    }\n\n    var parsedStr = numStr;\n\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(decimalSeparator, '.');\n    } // [Legacy] We still support auto convert `$ 123,456` to `123456`\n\n\n    return parsedStr.replace(/[^\\w.-]+/g, '');\n  }, [parser, decimalSeparator]); // >>> Formatter\n\n  var inputValueRef = React.useRef('');\n  var mergedFormatter = React.useCallback(function (number, userTyping) {\n    if (formatter) {\n      return formatter(number, {\n        userTyping: userTyping,\n        input: String(inputValueRef.current)\n      });\n    }\n\n    var str = typeof number === 'number' ? num2str(number) : number; // User typing will not auto format with precision directly\n\n    if (!userTyping) {\n      var mergedPrecision = getPrecision(str, userTyping);\n\n      if (validateNumber(str) && (decimalSeparator || mergedPrecision >= 0)) {\n        // Separator\n        var separatorStr = decimalSeparator || '.';\n        str = toFixed(str, separatorStr, mergedPrecision);\n      }\n    }\n\n    return str;\n  }, [formatter, getPrecision, decimalSeparator]); // ========================== InputValue ==========================\n\n  /**\n   * Input text value control\n   *\n   * User can not update input content directly. It updates with follow rules by priority:\n   *  1. controlled `value` changed\n   *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`\n   *  2. User typing with format (not precision)\n   *  3. Blur or Enter trigger revalidate\n   */\n\n  var _React$useState5 = React.useState(function () {\n    var initValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : value;\n\n    if (decimalValue.isInvalidate() && ['string', 'number'].includes(_typeof(initValue))) {\n      return Number.isNaN(initValue) ? '' : initValue;\n    }\n\n    return mergedFormatter(decimalValue.toString(), false);\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      inputValue = _React$useState6[0],\n      setInternalInputValue = _React$useState6[1];\n\n  inputValueRef.current = inputValue; // Should always be string\n\n  function setInputValue(newValue, userTyping) {\n    setInternalInputValue(mergedFormatter( // Invalidate number is sometime passed by external control, we should let it go\n    // Otherwise is controlled by internal interactive logic which check by userTyping\n    // You can ref 'show limited value when input is not focused' test for more info.\n    newValue.isInvalidate() ? newValue.toString(false) : newValue.toString(!userTyping), userTyping));\n  } // >>> Max & Min limit\n\n\n  var maxDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(max);\n  }, [max, precision]);\n  var minDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(min);\n  }, [min, precision]);\n  var upDisabled = React.useMemo(function () {\n    if (!maxDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return maxDecimal.lessEquals(decimalValue);\n  }, [maxDecimal, decimalValue]);\n  var downDisabled = React.useMemo(function () {\n    if (!minDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return decimalValue.lessEquals(minDecimal);\n  }, [minDecimal, decimalValue]); // Cursor controller\n\n  var _useCursor = useCursor(inputRef.current, focus),\n      _useCursor2 = _slicedToArray(_useCursor, 2),\n      recordCursor = _useCursor2[0],\n      restoreCursor = _useCursor2[1]; // ============================= Data =============================\n\n  /**\n   * Find target value closet within range.\n   * e.g. [11, 28]:\n   *    3  => 11\n   *    23 => 23\n   *    99 => 28\n   */\n\n\n  var getRangeValue = function getRangeValue(target) {\n    // target > max\n    if (maxDecimal && !target.lessEquals(maxDecimal)) {\n      return maxDecimal;\n    } // target < min\n\n\n    if (minDecimal && !minDecimal.lessEquals(target)) {\n      return minDecimal;\n    }\n\n    return null;\n  };\n  /**\n   * Check value is in [min, max] range\n   */\n\n\n  var isInRange = function isInRange(target) {\n    return !getRangeValue(target);\n  };\n  /**\n   * Trigger `onChange` if value validated and not equals of origin.\n   * Return the value that re-align in range.\n   */\n\n\n  var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {\n    var updateValue = newValue;\n    var isRangeValidate = isInRange(updateValue) || updateValue.isEmpty(); // Skip align value when trigger value is empty.\n    // We just trigger onChange(null)\n    // This should not block user typing\n\n    if (!updateValue.isEmpty() && !userTyping) {\n      // Revert value in range if needed\n      updateValue = getRangeValue(updateValue) || updateValue;\n      isRangeValidate = true;\n    }\n\n    if (!readOnly && !disabled && isRangeValidate) {\n      var numStr = updateValue.toString();\n      var mergedPrecision = getPrecision(numStr, userTyping);\n\n      if (mergedPrecision >= 0) {\n        updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision)); // When to fixed. The value may out of min & max range.\n        // 4 in [0, 3.8] => 3.8 => 4 (toFixed)\n\n        if (!isInRange(updateValue)) {\n          updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision, true));\n        }\n      } // Trigger event\n\n\n      if (!updateValue.equals(decimalValue)) {\n        setUncontrolledDecimalValue(updateValue);\n        onChange === null || onChange === void 0 || onChange(updateValue.isEmpty() ? null : getDecimalValue(stringMode, updateValue)); // Reformat input if value is not controlled\n\n        if (value === undefined) {\n          setInputValue(updateValue, userTyping);\n        }\n      }\n\n      return updateValue;\n    }\n\n    return decimalValue;\n  }; // ========================== User Input ==========================\n\n\n  var onNextPromise = useFrame(); // >>> Collect input value\n\n  var collectInputValue = function collectInputValue(inputStr) {\n    recordCursor(); // Update inputValue in case input can not parse as number\n    // Refresh ref value immediately since it may used by formatter\n\n    inputValueRef.current = inputStr;\n    setInternalInputValue(inputStr); // Parse number\n\n    if (!compositionRef.current) {\n      var finalValue = mergedParser(inputStr);\n      var finalDecimal = getMiniDecimal(finalValue);\n\n      if (!finalDecimal.isNaN()) {\n        triggerValueUpdate(finalDecimal, true);\n      }\n    } // Trigger onInput later to let user customize value if they want to handle something after onChange\n\n\n    onInput === null || onInput === void 0 || onInput(inputStr); // optimize for chinese input experience\n    // https://github.com/ant-design/ant-design/issues/8196\n\n    onNextPromise(function () {\n      var nextInputStr = inputStr;\n\n      if (!parser) {\n        nextInputStr = inputStr.replace(/。/g, '.');\n      }\n\n      if (nextInputStr !== inputStr) {\n        collectInputValue(nextInputStr);\n      }\n    });\n  }; // >>> Composition\n\n\n  var onCompositionStart = function onCompositionStart() {\n    compositionRef.current = true;\n  };\n\n  var onCompositionEnd = function onCompositionEnd() {\n    compositionRef.current = false;\n    collectInputValue(inputRef.current.value);\n  }; // >>> Input\n\n\n  var onInternalInput = function onInternalInput(e) {\n    collectInputValue(e.target.value);\n  }; // ============================= Step =============================\n\n\n  var onInternalStep = function onInternalStep(up) {\n    var _inputRef$current; // Ignore step since out of range\n\n\n    if (up && upDisabled || !up && downDisabled) {\n      return;\n    } // Clear typing status since it may be caused by up & down key.\n    // We should sync with input value.\n\n\n    userTypingRef.current = false;\n    var stepDecimal = getMiniDecimal(shiftKeyRef.current ? getDecupleSteps(step) : step);\n\n    if (!up) {\n      stepDecimal = stepDecimal.negate();\n    }\n\n    var target = (decimalValue || getMiniDecimal(0)).add(stepDecimal.toString());\n    var updatedValue = triggerValueUpdate(target, false);\n    onStep === null || onStep === void 0 || onStep(getDecimalValue(stringMode, updatedValue), {\n      offset: shiftKeyRef.current ? getDecupleSteps(step) : step,\n      type: up ? 'up' : 'down'\n    });\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();\n  }; // ============================ Flush =============================\n\n  /**\n   * Flush current input content to trigger value change & re-formatter input if needed.\n   * This will always flush input value for update.\n   * If it's invalidate, will fallback to last validate value.\n   */\n\n\n  var flushInputValue = function flushInputValue(userTyping) {\n    var parsedValue = getMiniDecimal(mergedParser(inputValue));\n    var formatValue = parsedValue;\n\n    if (!parsedValue.isNaN()) {\n      // Only validate value or empty value can be re-fill to inputValue\n      // Reassign the formatValue within ranged of trigger control\n      formatValue = triggerValueUpdate(parsedValue, userTyping);\n    } else {\n      formatValue = triggerValueUpdate(decimalValue, userTyping);\n    }\n\n    if (value !== undefined) {\n      // Reset back with controlled value first\n      setInputValue(decimalValue, false);\n    } else if (!formatValue.isNaN()) {\n      // Reset input back since no validate value\n      setInputValue(formatValue, false);\n    }\n  }; // Solve the issue of the event triggering sequence when entering numbers in chinese input (Safari)\n\n\n  var onBeforeInput = function onBeforeInput() {\n    userTypingRef.current = true;\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    var key = event.key,\n        shiftKey = event.shiftKey;\n    userTypingRef.current = true;\n    shiftKeyRef.current = shiftKey;\n\n    if (key === 'Enter') {\n      if (!compositionRef.current) {\n        userTypingRef.current = false;\n      }\n\n      flushInputValue(false);\n      onPressEnter === null || onPressEnter === void 0 || onPressEnter(event);\n    }\n\n    if (keyboard === false) {\n      return;\n    } // Do step\n\n\n    if (!compositionRef.current && ['Up', 'ArrowUp', 'Down', 'ArrowDown'].includes(key)) {\n      onInternalStep(key === 'Up' || key === 'ArrowUp');\n      event.preventDefault();\n    }\n  };\n\n  var onKeyUp = function onKeyUp() {\n    userTypingRef.current = false;\n    shiftKeyRef.current = false;\n  };\n\n  React.useEffect(function () {\n    if (changeOnWheel && focus) {\n      var onWheel = function onWheel(event) {\n        // moving mouse wheel rises wheel event with deltaY < 0\n        // scroll value grows from top to bottom, as screen Y coordinate\n        onInternalStep(event.deltaY < 0);\n        event.preventDefault();\n      };\n\n      var input = inputRef.current;\n\n      if (input) {\n        // React onWheel is passive and we can't preventDefault() in it.\n        // That's why we should subscribe with DOM listener\n        // https://stackoverflow.com/questions/63663025/react-onwheel-handler-cant-preventdefault-because-its-a-passive-event-listenev\n        input.addEventListener('wheel', onWheel, {\n          passive: false\n        });\n        return function () {\n          return input.removeEventListener('wheel', onWheel);\n        };\n      }\n    }\n  }); // >>> Focus & Blur\n\n  var onBlur = function onBlur() {\n    if (changeOnBlur) {\n      flushInputValue(false);\n    }\n\n    setFocus(false);\n    userTypingRef.current = false;\n  }; // ========================== Controlled ==========================\n  // Input by precision & formatter\n\n\n  useLayoutUpdateEffect(function () {\n    if (!decimalValue.isInvalidate()) {\n      setInputValue(decimalValue, false);\n    }\n  }, [precision, formatter]); // Input by value\n\n  useLayoutUpdateEffect(function () {\n    var newValue = getMiniDecimal(value);\n    setDecimalValue(newValue);\n    var currentParsedValue = getMiniDecimal(mergedParser(inputValue)); // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.\n    // But let it go if user set `formatter`\n\n    if (!newValue.equals(currentParsedValue) || !userTypingRef.current || formatter) {\n      // Update value as effect\n      setInputValue(newValue, userTypingRef.current);\n    }\n  }, [value]); // ============================ Cursor ============================\n\n  useLayoutUpdateEffect(function () {\n    if (formatter) {\n      restoreCursor();\n    }\n  }, [inputValue]); // ============================ Render ============================\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(prefixCls, className, (_clsx = {}, _defineProperty(_clsx, \"\".concat(prefixCls, \"-focused\"), focus), _defineProperty(_clsx, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_clsx, \"\".concat(prefixCls, \"-readonly\"), readOnly), _defineProperty(_clsx, \"\".concat(prefixCls, \"-not-a-number\"), decimalValue.isNaN()), _defineProperty(_clsx, \"\".concat(prefixCls, \"-out-of-range\"), !decimalValue.isInvalidate() && !isInRange(decimalValue)), _clsx)),\n    style: style,\n    onFocus: function onFocus() {\n      setFocus(true);\n    },\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    onBeforeInput: onBeforeInput\n  }, controls && /*#__PURE__*/React.createElement(StepHandler, {\n    prefixCls: prefixCls,\n    upNode: upHandler,\n    downNode: downHandler,\n    upDisabled: upDisabled,\n    downDisabled: downDisabled,\n    onStep: onInternalStep\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(inputClassName, \"-wrap\")\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({\n    autoComplete: \"off\",\n    role: \"spinbutton\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": decimalValue.isInvalidate() ? null : decimalValue.toString(),\n    step: step\n  }, inputProps, {\n    ref: composeRef(inputRef, ref),\n    className: inputClassName,\n    value: inputValue,\n    onChange: onInternalInput,\n    disabled: disabled,\n    readOnly: readOnly\n  }))));\n});\nvar InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var disabled = props.disabled,\n      style = props.style,\n      prefixCls = props.prefixCls,\n      value = props.value,\n      prefix = props.prefix,\n      suffix = props.suffix,\n      addonBefore = props.addonBefore,\n      addonAfter = props.addonAfter,\n      className = props.className,\n      classNames = props.classNames,\n      rest = _objectWithoutProperties(props, _excluded2);\n\n  var inputFocusRef = React.useRef(null);\n\n  var focus = function focus(option) {\n    if (inputFocusRef.current) {\n      triggerFocus(inputFocusRef.current, option);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(BaseInput, {\n    className: className,\n    triggerFocus: focus,\n    prefixCls: prefixCls,\n    value: value,\n    disabled: disabled,\n    style: style,\n    prefix: prefix,\n    suffix: suffix,\n    addonAfter: addonAfter,\n    addonBefore: addonBefore,\n    classNames: classNames,\n    components: {\n      affixWrapper: 'div',\n      groupWrapper: 'div',\n      wrapper: 'div',\n      groupAddon: 'div'\n    }\n  }, /*#__PURE__*/React.createElement(InternalInputNumber, _extends({\n    prefixCls: prefixCls,\n    disabled: disabled,\n    ref: composeRef(inputFocusRef, ref),\n    className: classNames === null || classNames === void 0 ? void 0 : classNames.input\n  }, rest)));\n});\nInputNumber.displayName = 'InputNumber';\nexport default InputNumber;","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/rc-input-number/es/InputNumber.js"],"names":["_extends","_defineProperty","_typeof","_slicedToArray","_objectWithoutProperties","_excluded","_excluded2","getMiniDecimal","getNumberPrecision","num2str","toFixed","validateNumber","clsx","BaseInput","useLayoutUpdateEffect","composeRef","React","useCursor","StepHandler","getDecupleSteps","triggerFocus","useFrame","getDecimalValue","stringMode","decimalValue","isEmpty","toString","toNumber","getDecimalIfValidate","value","decimal","isInvalidate","InternalInputNumber","forwardRef","props","ref","_clsx","_props$prefixCls","prefixCls","className","style","min","max","_props$step","step","defaultValue","disabled","readOnly","upHandler","downHandler","keyboard","_props$changeOnWheel","changeOnWheel","_props$controls","controls","classNames","parser","formatter","precision","decimalSeparator","onChange","onInput","onPressEnter","onStep","_props$changeOnBlur","changeOnBlur","inputProps","inputClassName","concat","inputRef","useRef","_React$useState","useState","_React$useState2","focus","setFocus","userTypingRef","compositionRef","shiftKeyRef","_React$useState3","_React$useState4","setDecimalValue","setUncontrolledDecimalValue","newDecimal","undefined","getPrecision","useCallback","numStr","userTyping","Math","mergedParser","num","String","parsedStr","replace","inputValueRef","mergedFormatter","number","input","current","str","mergedPrecision","separatorStr","_React$useState5","initValue","includes","Number","isNaN","_React$useState6","inputValue","setInternalInputValue","setInputValue","newValue","maxDecimal","useMemo","minDecimal","upDisabled","lessEquals","downDisabled","_useCursor","_useCursor2","recordCursor","restoreCursor","getRangeValue","target","isInRange","triggerValueUpdate","updateValue","isRangeValidate","equals","onNextPromise","collectInputValue","inputStr","finalValue","finalDecimal","nextInputStr","onCompositionStart","onCompositionEnd","onInternalInput","e","onInternalStep","up","_inputRef$current","stepDecimal","negate","add","updatedValue","offset","type","flushInputValue","parsedValue","formatValue","onBeforeInput","onKeyDown","event","key","shiftKey","preventDefault","onKeyUp","useEffect","onWheel","deltaY","addEventListener","passive","removeEventListener","onBlur","currentParsedValue","createElement","onFocus","upNode","downNode","autoComplete","role","InputNumber","prefix","suffix","addonBefore","addonAfter","rest","inputFocusRef","option","components","affixWrapper","groupWrapper","wrapper","groupAddon","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"prefixCls\", \"className\", \"style\", \"min\", \"max\", \"step\", \"defaultValue\", \"value\", \"disabled\", \"readOnly\", \"upHandler\", \"downHandler\", \"keyboard\", \"changeOnWheel\", \"controls\", \"classNames\", \"stringMode\", \"parser\", \"formatter\", \"precision\", \"decimalSeparator\", \"onChange\", \"onInput\", \"onPressEnter\", \"onStep\", \"changeOnBlur\"],\n  _excluded2 = [\"disabled\", \"style\", \"prefixCls\", \"value\", \"prefix\", \"suffix\", \"addonBefore\", \"addonAfter\", \"className\", \"classNames\"];\nimport getMiniDecimal, { getNumberPrecision, num2str, toFixed, validateNumber } from '@rc-component/mini-decimal';\nimport clsx from 'classnames';\nimport { BaseInput } from 'rc-input';\nimport { useLayoutUpdateEffect } from \"rc-util/es/hooks/useLayoutEffect\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport * as React from 'react';\nimport useCursor from \"./hooks/useCursor\";\nimport StepHandler from \"./StepHandler\";\nimport { getDecupleSteps } from \"./utils/numberUtil\";\nimport { triggerFocus } from \"rc-input/es/utils/commonUtils\";\nimport useFrame from \"./hooks/useFrame\";\n/**\n * We support `stringMode` which need handle correct type when user call in onChange\n * format max or min value\n * 1. if isInvalid return null\n * 2. if precision is undefined, return decimal\n * 3. format with precision\n *    I. if max > 0, round down with precision. Example: max= 3.5, precision=0  afterFormat: 3\n *    II. if max < 0, round up with precision. Example: max= -3.5, precision=0  afterFormat: -4\n *    III. if min > 0, round up with precision. Example: min= 3.5, precision=0  afterFormat: 4\n *    IV. if min < 0, round down with precision. Example: max= -3.5, precision=0  afterFormat: -3\n */\nvar getDecimalValue = function getDecimalValue(stringMode, decimalValue) {\n  if (stringMode || decimalValue.isEmpty()) {\n    return decimalValue.toString();\n  }\n  return decimalValue.toNumber();\n};\nvar getDecimalIfValidate = function getDecimalIfValidate(value) {\n  var decimal = getMiniDecimal(value);\n  return decimal.isInvalidate() ? null : decimal;\n};\nvar InternalInputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _clsx;\n  var _props$prefixCls = props.prefixCls,\n    prefixCls = _props$prefixCls === void 0 ? 'rc-input-number' : _props$prefixCls,\n    className = props.className,\n    style = props.style,\n    min = props.min,\n    max = props.max,\n    _props$step = props.step,\n    step = _props$step === void 0 ? 1 : _props$step,\n    defaultValue = props.defaultValue,\n    value = props.value,\n    disabled = props.disabled,\n    readOnly = props.readOnly,\n    upHandler = props.upHandler,\n    downHandler = props.downHandler,\n    keyboard = props.keyboard,\n    _props$changeOnWheel = props.changeOnWheel,\n    changeOnWheel = _props$changeOnWheel === void 0 ? false : _props$changeOnWheel,\n    _props$controls = props.controls,\n    controls = _props$controls === void 0 ? true : _props$controls,\n    classNames = props.classNames,\n    stringMode = props.stringMode,\n    parser = props.parser,\n    formatter = props.formatter,\n    precision = props.precision,\n    decimalSeparator = props.decimalSeparator,\n    onChange = props.onChange,\n    onInput = props.onInput,\n    onPressEnter = props.onPressEnter,\n    onStep = props.onStep,\n    _props$changeOnBlur = props.changeOnBlur,\n    changeOnBlur = _props$changeOnBlur === void 0 ? true : _props$changeOnBlur,\n    inputProps = _objectWithoutProperties(props, _excluded);\n  var inputClassName = \"\".concat(prefixCls, \"-input\");\n  var inputRef = React.useRef(null);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    focus = _React$useState2[0],\n    setFocus = _React$useState2[1];\n  var userTypingRef = React.useRef(false);\n  var compositionRef = React.useRef(false);\n  var shiftKeyRef = React.useRef(false);\n\n  // ============================ Value =============================\n  // Real value control\n  var _React$useState3 = React.useState(function () {\n      return getMiniDecimal(value !== null && value !== void 0 ? value : defaultValue);\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    decimalValue = _React$useState4[0],\n    setDecimalValue = _React$useState4[1];\n  function setUncontrolledDecimalValue(newDecimal) {\n    if (value === undefined) {\n      setDecimalValue(newDecimal);\n    }\n  }\n\n  // ====================== Parser & Formatter ======================\n  /**\n   * `precision` is used for formatter & onChange.\n   * It will auto generate by `value` & `step`.\n   * But it will not block user typing.\n   *\n   * Note: Auto generate `precision` is used for legacy logic.\n   * We should remove this since we already support high precision with BigInt.\n   *\n   * @param number  Provide which number should calculate precision\n   * @param userTyping  Change by user typing\n   */\n  var getPrecision = React.useCallback(function (numStr, userTyping) {\n    if (userTyping) {\n      return undefined;\n    }\n    if (precision >= 0) {\n      return precision;\n    }\n    return Math.max(getNumberPrecision(numStr), getNumberPrecision(step));\n  }, [precision, step]);\n\n  // >>> Parser\n  var mergedParser = React.useCallback(function (num) {\n    var numStr = String(num);\n    if (parser) {\n      return parser(numStr);\n    }\n    var parsedStr = numStr;\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(decimalSeparator, '.');\n    }\n\n    // [Legacy] We still support auto convert `$ 123,456` to `123456`\n    return parsedStr.replace(/[^\\w.-]+/g, '');\n  }, [parser, decimalSeparator]);\n\n  // >>> Formatter\n  var inputValueRef = React.useRef('');\n  var mergedFormatter = React.useCallback(function (number, userTyping) {\n    if (formatter) {\n      return formatter(number, {\n        userTyping: userTyping,\n        input: String(inputValueRef.current)\n      });\n    }\n    var str = typeof number === 'number' ? num2str(number) : number;\n\n    // User typing will not auto format with precision directly\n    if (!userTyping) {\n      var mergedPrecision = getPrecision(str, userTyping);\n      if (validateNumber(str) && (decimalSeparator || mergedPrecision >= 0)) {\n        // Separator\n        var separatorStr = decimalSeparator || '.';\n        str = toFixed(str, separatorStr, mergedPrecision);\n      }\n    }\n    return str;\n  }, [formatter, getPrecision, decimalSeparator]);\n\n  // ========================== InputValue ==========================\n  /**\n   * Input text value control\n   *\n   * User can not update input content directly. It updates with follow rules by priority:\n   *  1. controlled `value` changed\n   *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`\n   *  2. User typing with format (not precision)\n   *  3. Blur or Enter trigger revalidate\n   */\n  var _React$useState5 = React.useState(function () {\n      var initValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : value;\n      if (decimalValue.isInvalidate() && ['string', 'number'].includes(_typeof(initValue))) {\n        return Number.isNaN(initValue) ? '' : initValue;\n      }\n      return mergedFormatter(decimalValue.toString(), false);\n    }),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    inputValue = _React$useState6[0],\n    setInternalInputValue = _React$useState6[1];\n  inputValueRef.current = inputValue;\n\n  // Should always be string\n  function setInputValue(newValue, userTyping) {\n    setInternalInputValue(mergedFormatter(\n    // Invalidate number is sometime passed by external control, we should let it go\n    // Otherwise is controlled by internal interactive logic which check by userTyping\n    // You can ref 'show limited value when input is not focused' test for more info.\n    newValue.isInvalidate() ? newValue.toString(false) : newValue.toString(!userTyping), userTyping));\n  }\n\n  // >>> Max & Min limit\n  var maxDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(max);\n  }, [max, precision]);\n  var minDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(min);\n  }, [min, precision]);\n  var upDisabled = React.useMemo(function () {\n    if (!maxDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n    return maxDecimal.lessEquals(decimalValue);\n  }, [maxDecimal, decimalValue]);\n  var downDisabled = React.useMemo(function () {\n    if (!minDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n    return decimalValue.lessEquals(minDecimal);\n  }, [minDecimal, decimalValue]);\n\n  // Cursor controller\n  var _useCursor = useCursor(inputRef.current, focus),\n    _useCursor2 = _slicedToArray(_useCursor, 2),\n    recordCursor = _useCursor2[0],\n    restoreCursor = _useCursor2[1];\n\n  // ============================= Data =============================\n  /**\n   * Find target value closet within range.\n   * e.g. [11, 28]:\n   *    3  => 11\n   *    23 => 23\n   *    99 => 28\n   */\n  var getRangeValue = function getRangeValue(target) {\n    // target > max\n    if (maxDecimal && !target.lessEquals(maxDecimal)) {\n      return maxDecimal;\n    }\n\n    // target < min\n    if (minDecimal && !minDecimal.lessEquals(target)) {\n      return minDecimal;\n    }\n    return null;\n  };\n\n  /**\n   * Check value is in [min, max] range\n   */\n  var isInRange = function isInRange(target) {\n    return !getRangeValue(target);\n  };\n\n  /**\n   * Trigger `onChange` if value validated and not equals of origin.\n   * Return the value that re-align in range.\n   */\n  var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {\n    var updateValue = newValue;\n    var isRangeValidate = isInRange(updateValue) || updateValue.isEmpty();\n\n    // Skip align value when trigger value is empty.\n    // We just trigger onChange(null)\n    // This should not block user typing\n    if (!updateValue.isEmpty() && !userTyping) {\n      // Revert value in range if needed\n      updateValue = getRangeValue(updateValue) || updateValue;\n      isRangeValidate = true;\n    }\n    if (!readOnly && !disabled && isRangeValidate) {\n      var numStr = updateValue.toString();\n      var mergedPrecision = getPrecision(numStr, userTyping);\n      if (mergedPrecision >= 0) {\n        updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision));\n\n        // When to fixed. The value may out of min & max range.\n        // 4 in [0, 3.8] => 3.8 => 4 (toFixed)\n        if (!isInRange(updateValue)) {\n          updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision, true));\n        }\n      }\n\n      // Trigger event\n      if (!updateValue.equals(decimalValue)) {\n        setUncontrolledDecimalValue(updateValue);\n        onChange === null || onChange === void 0 || onChange(updateValue.isEmpty() ? null : getDecimalValue(stringMode, updateValue));\n\n        // Reformat input if value is not controlled\n        if (value === undefined) {\n          setInputValue(updateValue, userTyping);\n        }\n      }\n      return updateValue;\n    }\n    return decimalValue;\n  };\n\n  // ========================== User Input ==========================\n  var onNextPromise = useFrame();\n\n  // >>> Collect input value\n  var collectInputValue = function collectInputValue(inputStr) {\n    recordCursor();\n\n    // Update inputValue in case input can not parse as number\n    // Refresh ref value immediately since it may used by formatter\n    inputValueRef.current = inputStr;\n    setInternalInputValue(inputStr);\n\n    // Parse number\n    if (!compositionRef.current) {\n      var finalValue = mergedParser(inputStr);\n      var finalDecimal = getMiniDecimal(finalValue);\n      if (!finalDecimal.isNaN()) {\n        triggerValueUpdate(finalDecimal, true);\n      }\n    }\n\n    // Trigger onInput later to let user customize value if they want to handle something after onChange\n    onInput === null || onInput === void 0 || onInput(inputStr);\n\n    // optimize for chinese input experience\n    // https://github.com/ant-design/ant-design/issues/8196\n    onNextPromise(function () {\n      var nextInputStr = inputStr;\n      if (!parser) {\n        nextInputStr = inputStr.replace(/。/g, '.');\n      }\n      if (nextInputStr !== inputStr) {\n        collectInputValue(nextInputStr);\n      }\n    });\n  };\n\n  // >>> Composition\n  var onCompositionStart = function onCompositionStart() {\n    compositionRef.current = true;\n  };\n  var onCompositionEnd = function onCompositionEnd() {\n    compositionRef.current = false;\n    collectInputValue(inputRef.current.value);\n  };\n\n  // >>> Input\n  var onInternalInput = function onInternalInput(e) {\n    collectInputValue(e.target.value);\n  };\n\n  // ============================= Step =============================\n  var onInternalStep = function onInternalStep(up) {\n    var _inputRef$current;\n    // Ignore step since out of range\n    if (up && upDisabled || !up && downDisabled) {\n      return;\n    }\n\n    // Clear typing status since it may be caused by up & down key.\n    // We should sync with input value.\n    userTypingRef.current = false;\n    var stepDecimal = getMiniDecimal(shiftKeyRef.current ? getDecupleSteps(step) : step);\n    if (!up) {\n      stepDecimal = stepDecimal.negate();\n    }\n    var target = (decimalValue || getMiniDecimal(0)).add(stepDecimal.toString());\n    var updatedValue = triggerValueUpdate(target, false);\n    onStep === null || onStep === void 0 || onStep(getDecimalValue(stringMode, updatedValue), {\n      offset: shiftKeyRef.current ? getDecupleSteps(step) : step,\n      type: up ? 'up' : 'down'\n    });\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();\n  };\n\n  // ============================ Flush =============================\n  /**\n   * Flush current input content to trigger value change & re-formatter input if needed.\n   * This will always flush input value for update.\n   * If it's invalidate, will fallback to last validate value.\n   */\n  var flushInputValue = function flushInputValue(userTyping) {\n    var parsedValue = getMiniDecimal(mergedParser(inputValue));\n    var formatValue = parsedValue;\n    if (!parsedValue.isNaN()) {\n      // Only validate value or empty value can be re-fill to inputValue\n      // Reassign the formatValue within ranged of trigger control\n      formatValue = triggerValueUpdate(parsedValue, userTyping);\n    } else {\n      formatValue = triggerValueUpdate(decimalValue, userTyping);\n    }\n    if (value !== undefined) {\n      // Reset back with controlled value first\n      setInputValue(decimalValue, false);\n    } else if (!formatValue.isNaN()) {\n      // Reset input back since no validate value\n      setInputValue(formatValue, false);\n    }\n  };\n\n  // Solve the issue of the event triggering sequence when entering numbers in chinese input (Safari)\n  var onBeforeInput = function onBeforeInput() {\n    userTypingRef.current = true;\n  };\n  var onKeyDown = function onKeyDown(event) {\n    var key = event.key,\n      shiftKey = event.shiftKey;\n    userTypingRef.current = true;\n    shiftKeyRef.current = shiftKey;\n    if (key === 'Enter') {\n      if (!compositionRef.current) {\n        userTypingRef.current = false;\n      }\n      flushInputValue(false);\n      onPressEnter === null || onPressEnter === void 0 || onPressEnter(event);\n    }\n    if (keyboard === false) {\n      return;\n    }\n\n    // Do step\n    if (!compositionRef.current && ['Up', 'ArrowUp', 'Down', 'ArrowDown'].includes(key)) {\n      onInternalStep(key === 'Up' || key === 'ArrowUp');\n      event.preventDefault();\n    }\n  };\n  var onKeyUp = function onKeyUp() {\n    userTypingRef.current = false;\n    shiftKeyRef.current = false;\n  };\n  React.useEffect(function () {\n    if (changeOnWheel && focus) {\n      var onWheel = function onWheel(event) {\n        // moving mouse wheel rises wheel event with deltaY < 0\n        // scroll value grows from top to bottom, as screen Y coordinate\n        onInternalStep(event.deltaY < 0);\n        event.preventDefault();\n      };\n      var input = inputRef.current;\n      if (input) {\n        // React onWheel is passive and we can't preventDefault() in it.\n        // That's why we should subscribe with DOM listener\n        // https://stackoverflow.com/questions/63663025/react-onwheel-handler-cant-preventdefault-because-its-a-passive-event-listenev\n        input.addEventListener('wheel', onWheel, {\n          passive: false\n        });\n        return function () {\n          return input.removeEventListener('wheel', onWheel);\n        };\n      }\n    }\n  });\n\n  // >>> Focus & Blur\n  var onBlur = function onBlur() {\n    if (changeOnBlur) {\n      flushInputValue(false);\n    }\n    setFocus(false);\n    userTypingRef.current = false;\n  };\n\n  // ========================== Controlled ==========================\n  // Input by precision & formatter\n  useLayoutUpdateEffect(function () {\n    if (!decimalValue.isInvalidate()) {\n      setInputValue(decimalValue, false);\n    }\n  }, [precision, formatter]);\n\n  // Input by value\n  useLayoutUpdateEffect(function () {\n    var newValue = getMiniDecimal(value);\n    setDecimalValue(newValue);\n    var currentParsedValue = getMiniDecimal(mergedParser(inputValue));\n\n    // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.\n    // But let it go if user set `formatter`\n    if (!newValue.equals(currentParsedValue) || !userTypingRef.current || formatter) {\n      // Update value as effect\n      setInputValue(newValue, userTypingRef.current);\n    }\n  }, [value]);\n\n  // ============================ Cursor ============================\n  useLayoutUpdateEffect(function () {\n    if (formatter) {\n      restoreCursor();\n    }\n  }, [inputValue]);\n\n  // ============================ Render ============================\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(prefixCls, className, (_clsx = {}, _defineProperty(_clsx, \"\".concat(prefixCls, \"-focused\"), focus), _defineProperty(_clsx, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_clsx, \"\".concat(prefixCls, \"-readonly\"), readOnly), _defineProperty(_clsx, \"\".concat(prefixCls, \"-not-a-number\"), decimalValue.isNaN()), _defineProperty(_clsx, \"\".concat(prefixCls, \"-out-of-range\"), !decimalValue.isInvalidate() && !isInRange(decimalValue)), _clsx)),\n    style: style,\n    onFocus: function onFocus() {\n      setFocus(true);\n    },\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    onBeforeInput: onBeforeInput\n  }, controls && /*#__PURE__*/React.createElement(StepHandler, {\n    prefixCls: prefixCls,\n    upNode: upHandler,\n    downNode: downHandler,\n    upDisabled: upDisabled,\n    downDisabled: downDisabled,\n    onStep: onInternalStep\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(inputClassName, \"-wrap\")\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({\n    autoComplete: \"off\",\n    role: \"spinbutton\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": decimalValue.isInvalidate() ? null : decimalValue.toString(),\n    step: step\n  }, inputProps, {\n    ref: composeRef(inputRef, ref),\n    className: inputClassName,\n    value: inputValue,\n    onChange: onInternalInput,\n    disabled: disabled,\n    readOnly: readOnly\n  }))));\n});\nvar InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var disabled = props.disabled,\n    style = props.style,\n    prefixCls = props.prefixCls,\n    value = props.value,\n    prefix = props.prefix,\n    suffix = props.suffix,\n    addonBefore = props.addonBefore,\n    addonAfter = props.addonAfter,\n    className = props.className,\n    classNames = props.classNames,\n    rest = _objectWithoutProperties(props, _excluded2);\n  var inputFocusRef = React.useRef(null);\n  var focus = function focus(option) {\n    if (inputFocusRef.current) {\n      triggerFocus(inputFocusRef.current, option);\n    }\n  };\n  return /*#__PURE__*/React.createElement(BaseInput, {\n    className: className,\n    triggerFocus: focus,\n    prefixCls: prefixCls,\n    value: value,\n    disabled: disabled,\n    style: style,\n    prefix: prefix,\n    suffix: suffix,\n    addonAfter: addonAfter,\n    addonBefore: addonBefore,\n    classNames: classNames,\n    components: {\n      affixWrapper: 'div',\n      groupWrapper: 'div',\n      wrapper: 'div',\n      groupAddon: 'div'\n    }\n  }, /*#__PURE__*/React.createElement(InternalInputNumber, _extends({\n    prefixCls: prefixCls,\n    disabled: disabled,\n    ref: composeRef(inputFocusRef, ref),\n    className: classNames === null || classNames === void 0 ? void 0 : classNames.input\n  }, rest)));\n});\nInputNumber.displayName = 'InputNumber';\nexport default InputNumber;"]},"metadata":{},"sourceType":"module"}