{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\"; // import canUseDom from 'rc-util/lib/Dom/canUseDom';\n\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport * as React from 'react'; // We need fully clone React function here\n// to avoid webpack warning React 17 do not export `useId`\n\nvar fullClone = _objectSpread({}, React);\n\nvar useInsertionEffect = fullClone.useInsertionEffect;\n/**\n * Polyfill `useInsertionEffect` for React < 18\n * @param renderEffect will be executed in `useMemo`, and do not have callback\n * @param effect will be executed in `useLayoutEffect`\n * @param deps\n */\n\nvar useInsertionEffectPolyfill = function useInsertionEffectPolyfill(renderEffect, effect, deps) {\n  React.useMemo(renderEffect, deps);\n  useLayoutEffect(function () {\n    return effect(true);\n  }, deps);\n};\n/**\n * Compatible `useInsertionEffect`\n * will use `useInsertionEffect` if React version >= 18,\n * otherwise use `useInsertionEffectPolyfill`.\n */\n\n\nvar useCompatibleInsertionEffect = useInsertionEffect ? function (renderEffect, effect, deps) {\n  return useInsertionEffect(function () {\n    renderEffect();\n    return effect();\n  }, deps);\n} : useInsertionEffectPolyfill;\nexport default useCompatibleInsertionEffect;","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/@ant-design/cssinjs/es/hooks/useCompatibleInsertionEffect.js"],"names":["_objectSpread","useLayoutEffect","React","fullClone","useInsertionEffect","useInsertionEffectPolyfill","renderEffect","effect","deps","useMemo","useCompatibleInsertionEffect"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,0CAA1B,C,CACA;;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CAEA;AACA;;AACA,IAAIC,SAAS,GAAGH,aAAa,CAAC,EAAD,EAAKE,KAAL,CAA7B;;AACA,IAAIE,kBAAkB,GAAGD,SAAS,CAACC,kBAAnC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,0BAA0B,GAAG,SAASA,0BAAT,CAAoCC,YAApC,EAAkDC,MAAlD,EAA0DC,IAA1D,EAAgE;AAC/FN,EAAAA,KAAK,CAACO,OAAN,CAAcH,YAAd,EAA4BE,IAA5B;AACAP,EAAAA,eAAe,CAAC,YAAY;AAC1B,WAAOM,MAAM,CAAC,IAAD,CAAb;AACD,GAFc,EAEZC,IAFY,CAAf;AAGD,CALD;AAOA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,4BAA4B,GAAGN,kBAAkB,GAAG,UAAUE,YAAV,EAAwBC,MAAxB,EAAgCC,IAAhC,EAAsC;AAC5F,SAAOJ,kBAAkB,CAAC,YAAY;AACpCE,IAAAA,YAAY;AACZ,WAAOC,MAAM,EAAb;AACD,GAHwB,EAGtBC,IAHsB,CAAzB;AAID,CALoD,GAKjDH,0BALJ;AAMA,eAAeK,4BAAf","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// import canUseDom from 'rc-util/lib/Dom/canUseDom';\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport * as React from 'react';\n\n// We need fully clone React function here\n// to avoid webpack warning React 17 do not export `useId`\nvar fullClone = _objectSpread({}, React);\nvar useInsertionEffect = fullClone.useInsertionEffect;\n/**\n * Polyfill `useInsertionEffect` for React < 18\n * @param renderEffect will be executed in `useMemo`, and do not have callback\n * @param effect will be executed in `useLayoutEffect`\n * @param deps\n */\nvar useInsertionEffectPolyfill = function useInsertionEffectPolyfill(renderEffect, effect, deps) {\n  React.useMemo(renderEffect, deps);\n  useLayoutEffect(function () {\n    return effect(true);\n  }, deps);\n};\n\n/**\n * Compatible `useInsertionEffect`\n * will use `useInsertionEffect` if React version >= 18,\n * otherwise use `useInsertionEffectPolyfill`.\n */\nvar useCompatibleInsertionEffect = useInsertionEffect ? function (renderEffect, effect, deps) {\n  return useInsertionEffect(function () {\n    renderEffect();\n    return effect();\n  }, deps);\n} : useInsertionEffectPolyfill;\nexport default useCompatibleInsertionEffect;"]},"metadata":{},"sourceType":"module"}