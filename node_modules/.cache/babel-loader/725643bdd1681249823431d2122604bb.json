{"ast":null,"code":"import { useEvent } from 'rc-util';\nimport { isSame } from \"../../utils/dateUtil\";\n/**\n * Merge `disabledDate` with `minDate` & `maxDate`.\n */\n\nexport default function useDisabledBoundary(generateConfig, locale, disabledDate, minDate, maxDate) {\n  var mergedDisabledDate = useEvent(function (date, info) {\n    if (disabledDate && disabledDate(date, info)) {\n      return true;\n    }\n\n    if (minDate && generateConfig.isAfter(minDate, date) && !isSame(generateConfig, locale, minDate, date, info.type)) {\n      return true;\n    }\n\n    if (maxDate && generateConfig.isAfter(date, maxDate) && !isSame(generateConfig, locale, maxDate, date, info.type)) {\n      return true;\n    }\n\n    return false;\n  }); // const isInValidBoundary: IsInvalidBoundary<DateType> = (date, type, from) => {\n  //   const toBoundaryDate = (boundary?: LimitDate<DateType>) =>\n  //     typeof boundary === 'function'\n  //       ? boundary({\n  //           from,\n  //         })\n  //       : boundary;\n  //   const mergedMinDate = toBoundaryDate(minDate);\n  //   const mergedMaxDate = toBoundaryDate(maxDate);\n  //   if (\n  //     mergedMinDate &&\n  //     generateConfig.isAfter(mergedMinDate, date) &&\n  //     !isSame(generateConfig, locale, mergedMinDate, date, type)\n  //   ) {\n  //     return true;\n  //   }\n  //   if (\n  //     mergedMaxDate &&\n  //     generateConfig.isAfter(date, mergedMaxDate) &&\n  //     !isSame(generateConfig, locale, mergedMaxDate, date, type)\n  //   ) {\n  //     return true;\n  //   }\n  //   return false;\n  // };\n\n  return mergedDisabledDate;\n}","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/rc-picker/es/PickerInput/hooks/useDisabledBoundary.js"],"names":["useEvent","isSame","useDisabledBoundary","generateConfig","locale","disabledDate","minDate","maxDate","mergedDisabledDate","date","info","isAfter","type"],"mappings":"AAAA,SAASA,QAAT,QAAyB,SAAzB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA;AACA;AACA;;AACA,eAAe,SAASC,mBAAT,CAA6BC,cAA7B,EAA6CC,MAA7C,EAAqDC,YAArD,EAAmEC,OAAnE,EAA4EC,OAA5E,EAAqF;AAClG,MAAIC,kBAAkB,GAAGR,QAAQ,CAAC,UAAUS,IAAV,EAAgBC,IAAhB,EAAsB;AACtD,QAAIL,YAAY,IAAIA,YAAY,CAACI,IAAD,EAAOC,IAAP,CAAhC,EAA8C;AAC5C,aAAO,IAAP;AACD;;AACD,QAAIJ,OAAO,IAAIH,cAAc,CAACQ,OAAf,CAAuBL,OAAvB,EAAgCG,IAAhC,CAAX,IAAoD,CAACR,MAAM,CAACE,cAAD,EAAiBC,MAAjB,EAAyBE,OAAzB,EAAkCG,IAAlC,EAAwCC,IAAI,CAACE,IAA7C,CAA/D,EAAmH;AACjH,aAAO,IAAP;AACD;;AACD,QAAIL,OAAO,IAAIJ,cAAc,CAACQ,OAAf,CAAuBF,IAAvB,EAA6BF,OAA7B,CAAX,IAAoD,CAACN,MAAM,CAACE,cAAD,EAAiBC,MAAjB,EAAyBG,OAAzB,EAAkCE,IAAlC,EAAwCC,IAAI,CAACE,IAA7C,CAA/D,EAAmH;AACjH,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GAXgC,CAAjC,CADkG,CAclG;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,SAAOJ,kBAAP;AACD","sourcesContent":["import { useEvent } from 'rc-util';\nimport { isSame } from \"../../utils/dateUtil\";\n/**\n * Merge `disabledDate` with `minDate` & `maxDate`.\n */\nexport default function useDisabledBoundary(generateConfig, locale, disabledDate, minDate, maxDate) {\n  var mergedDisabledDate = useEvent(function (date, info) {\n    if (disabledDate && disabledDate(date, info)) {\n      return true;\n    }\n    if (minDate && generateConfig.isAfter(minDate, date) && !isSame(generateConfig, locale, minDate, date, info.type)) {\n      return true;\n    }\n    if (maxDate && generateConfig.isAfter(date, maxDate) && !isSame(generateConfig, locale, maxDate, date, info.type)) {\n      return true;\n    }\n    return false;\n  });\n\n  // const isInValidBoundary: IsInvalidBoundary<DateType> = (date, type, from) => {\n  //   const toBoundaryDate = (boundary?: LimitDate<DateType>) =>\n  //     typeof boundary === 'function'\n  //       ? boundary({\n  //           from,\n  //         })\n  //       : boundary;\n\n  //   const mergedMinDate = toBoundaryDate(minDate);\n  //   const mergedMaxDate = toBoundaryDate(maxDate);\n\n  //   if (\n  //     mergedMinDate &&\n  //     generateConfig.isAfter(mergedMinDate, date) &&\n  //     !isSame(generateConfig, locale, mergedMinDate, date, type)\n  //   ) {\n  //     return true;\n  //   }\n\n  //   if (\n  //     mergedMaxDate &&\n  //     generateConfig.isAfter(date, mergedMaxDate) &&\n  //     !isSame(generateConfig, locale, mergedMaxDate, date, type)\n  //   ) {\n  //     return true;\n  //   }\n\n  //   return false;\n  // };\n\n  return mergedDisabledDate;\n}"]},"metadata":{},"sourceType":"module"}