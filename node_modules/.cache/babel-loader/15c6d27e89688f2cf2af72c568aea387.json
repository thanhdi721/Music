{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useMergedState } from 'rc-util';\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport * as React from 'react';\nimport { fillTime, isSame } from \"../../utils/dateUtil\";\nexport function offsetPanelDate(generateConfig, picker, date, offset) {\n  switch (picker) {\n    case 'date':\n    case 'week':\n      return generateConfig.addMonth(date, offset);\n\n    case 'month':\n    case 'quarter':\n      return generateConfig.addYear(date, offset);\n\n    case 'year':\n      return generateConfig.addYear(date, offset * 10);\n\n    case 'decade':\n      return generateConfig.addYear(date, offset * 100);\n\n    default:\n      return date;\n  }\n}\nvar EMPTY_LIST = [];\nexport default function useRangePickerValue(generateConfig, locale, calendarValue, modes, open, activeIndex, pickerMode, multiplePanel) {\n  var defaultPickerValue = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : EMPTY_LIST;\n  var pickerValue = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : EMPTY_LIST;\n  var timeDefaultValue = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : EMPTY_LIST;\n  var onPickerValueChange = arguments.length > 11 ? arguments[11] : undefined;\n  var minDate = arguments.length > 12 ? arguments[12] : undefined;\n  var maxDate = arguments.length > 13 ? arguments[13] : undefined;\n  var isTimePicker = pickerMode === 'time'; // ======================== Active ========================\n  // `activeIndex` must be valid to avoid getting empty `pickerValue`\n\n  var mergedActiveIndex = activeIndex || 0; // ===================== Picker Value =====================\n\n  var getDefaultPickerValue = function getDefaultPickerValue(index) {\n    var now = generateConfig.getNow();\n\n    if (isTimePicker) {\n      now = fillTime(generateConfig, now);\n    }\n\n    return defaultPickerValue[index] || calendarValue[index] || now;\n  }; // Align `pickerValue` with `showTime.defaultValue`\n\n\n  var _pickerValue = _slicedToArray(pickerValue, 2),\n      startPickerValue = _pickerValue[0],\n      endPickerValue = _pickerValue[1]; // PickerValue state\n\n\n  var _useMergedState = useMergedState(function () {\n    return getDefaultPickerValue(0);\n  }, {\n    value: startPickerValue\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedStartPickerValue = _useMergedState2[0],\n      setStartPickerValue = _useMergedState2[1];\n\n  var _useMergedState3 = useMergedState(function () {\n    return getDefaultPickerValue(1);\n  }, {\n    value: endPickerValue\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      mergedEndPickerValue = _useMergedState4[0],\n      setEndPickerValue = _useMergedState4[1]; // Current PickerValue\n\n\n  var currentPickerValue = React.useMemo(function () {\n    var current = [mergedStartPickerValue, mergedEndPickerValue][mergedActiveIndex]; // Merge the `showTime.defaultValue` into `pickerValue`\n\n    return isTimePicker ? current : fillTime(generateConfig, current, timeDefaultValue[mergedActiveIndex]);\n  }, [isTimePicker, mergedStartPickerValue, mergedEndPickerValue, mergedActiveIndex, generateConfig, timeDefaultValue]);\n\n  var setCurrentPickerValue = function setCurrentPickerValue(nextPickerValue) {\n    var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'panel';\n    var updater = [setStartPickerValue, setEndPickerValue][mergedActiveIndex];\n    updater(nextPickerValue);\n    var clone = [mergedStartPickerValue, mergedEndPickerValue];\n    clone[mergedActiveIndex] = nextPickerValue;\n\n    if (onPickerValueChange && (!isSame(generateConfig, locale, mergedStartPickerValue, clone[0], pickerMode) || !isSame(generateConfig, locale, mergedEndPickerValue, clone[1], pickerMode))) {\n      onPickerValueChange(clone, {\n        source: source,\n        range: mergedActiveIndex === 1 ? 'end' : 'start',\n        mode: modes\n      });\n    }\n  }; // ======================== Effect ========================\n\n  /**\n   * EndDate pickerValue is little different. It should be:\n   * - If date picker (without time), endDate is not same year & month as startDate\n   *   - pickerValue minus one month\n   * - Else pass directly\n   */\n\n\n  var getEndDatePickerValue = function getEndDatePickerValue(startDate, endDate) {\n    if (multiplePanel) {\n      // Basic offset\n      var SAME_CHECKER = {\n        date: 'month',\n        week: 'month',\n        month: 'year',\n        quarter: 'year'\n      };\n      var mode = SAME_CHECKER[pickerMode];\n\n      if (mode && !isSame(generateConfig, locale, startDate, endDate, mode)) {\n        return offsetPanelDate(generateConfig, pickerMode, endDate, -1);\n      } // Year offset\n\n\n      if (pickerMode === 'year') {\n        var srcYear = Math.floor(generateConfig.getYear(startDate) / 10);\n        var tgtYear = Math.floor(generateConfig.getYear(endDate) / 10);\n\n        if (srcYear !== tgtYear) {\n          return offsetPanelDate(generateConfig, pickerMode, endDate, -1);\n        }\n      }\n    }\n\n    return endDate;\n  }; // >>> When switch field, reset the picker value as prev field picker value\n\n\n  var prevActiveIndexRef = React.useRef(null);\n  useLayoutEffect(function () {\n    if (open) {\n      if (!defaultPickerValue[mergedActiveIndex]) {\n        var nextPickerValue = isTimePicker ? null : generateConfig.getNow();\n        /**\n         * 1. If has prevActiveIndex, use it to avoid panel jump\n         * 2. If current field has value\n         *    - If `activeIndex` is 1 and `calendarValue[0]` is not same panel as `calendarValue[1]`,\n         *      offset `calendarValue[1]` and set it\n         *    - Else use `calendarValue[activeIndex]`\n         * 3. If current field has no value but another field has value, use another field value\n         * 4. Else use now (not any `calendarValue` can ref)\n         */\n\n        if (prevActiveIndexRef.current !== null && prevActiveIndexRef.current !== mergedActiveIndex) {\n          // If from another field, not jump picker value\n          nextPickerValue = [mergedStartPickerValue, mergedEndPickerValue][mergedActiveIndex ^ 1];\n        } else if (calendarValue[mergedActiveIndex]) {\n          // Current field has value\n          nextPickerValue = mergedActiveIndex === 0 ? calendarValue[0] : getEndDatePickerValue(calendarValue[0], calendarValue[1]);\n        } else if (calendarValue[mergedActiveIndex ^ 1]) {\n          // Current field has no value but another field has value\n          nextPickerValue = calendarValue[mergedActiveIndex ^ 1];\n        } // Only sync when has value, this will sync in the `min-max` logic\n\n\n        if (nextPickerValue) {\n          // nextPickerValue < minDate\n          if (minDate && generateConfig.isAfter(minDate, nextPickerValue)) {\n            nextPickerValue = minDate;\n          } // maxDate < nextPickerValue\n\n\n          var offsetPickerValue = multiplePanel ? offsetPanelDate(generateConfig, pickerMode, nextPickerValue, 1) : nextPickerValue;\n\n          if (maxDate && generateConfig.isAfter(offsetPickerValue, maxDate)) {\n            nextPickerValue = multiplePanel ? offsetPanelDate(generateConfig, pickerMode, maxDate, -1) : maxDate;\n          }\n\n          setCurrentPickerValue(nextPickerValue, 'reset');\n        }\n      }\n    }\n  }, [open, mergedActiveIndex, calendarValue[mergedActiveIndex]]); // >>> Reset prevActiveIndex when panel closed\n\n  React.useEffect(function () {\n    if (open) {\n      prevActiveIndexRef.current = mergedActiveIndex;\n    } else {\n      prevActiveIndexRef.current = null;\n    }\n  }, [open, mergedActiveIndex]); // >>> defaultPickerValue: Resync to `defaultPickerValue` for each panel focused\n\n  useLayoutEffect(function () {\n    if (open && defaultPickerValue) {\n      if (defaultPickerValue[mergedActiveIndex]) {\n        setCurrentPickerValue(defaultPickerValue[mergedActiveIndex], 'reset');\n      }\n    }\n  }, [open, mergedActiveIndex]);\n  return [currentPickerValue, setCurrentPickerValue];\n}","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/rc-picker/es/PickerInput/hooks/useRangePickerValue.js"],"names":["_slicedToArray","useMergedState","useLayoutEffect","React","fillTime","isSame","offsetPanelDate","generateConfig","picker","date","offset","addMonth","addYear","EMPTY_LIST","useRangePickerValue","locale","calendarValue","modes","open","activeIndex","pickerMode","multiplePanel","defaultPickerValue","arguments","length","undefined","pickerValue","timeDefaultValue","onPickerValueChange","minDate","maxDate","isTimePicker","mergedActiveIndex","getDefaultPickerValue","index","now","getNow","_pickerValue","startPickerValue","endPickerValue","_useMergedState","value","_useMergedState2","mergedStartPickerValue","setStartPickerValue","_useMergedState3","_useMergedState4","mergedEndPickerValue","setEndPickerValue","currentPickerValue","useMemo","current","setCurrentPickerValue","nextPickerValue","source","updater","clone","range","mode","getEndDatePickerValue","startDate","endDate","SAME_CHECKER","week","month","quarter","srcYear","Math","floor","getYear","tgtYear","prevActiveIndexRef","useRef","isAfter","offsetPickerValue","useEffect"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useMergedState } from 'rc-util';\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport * as React from 'react';\nimport { fillTime, isSame } from \"../../utils/dateUtil\";\nexport function offsetPanelDate(generateConfig, picker, date, offset) {\n  switch (picker) {\n    case 'date':\n    case 'week':\n      return generateConfig.addMonth(date, offset);\n    case 'month':\n    case 'quarter':\n      return generateConfig.addYear(date, offset);\n    case 'year':\n      return generateConfig.addYear(date, offset * 10);\n    case 'decade':\n      return generateConfig.addYear(date, offset * 100);\n    default:\n      return date;\n  }\n}\nvar EMPTY_LIST = [];\nexport default function useRangePickerValue(generateConfig, locale, calendarValue, modes, open, activeIndex, pickerMode, multiplePanel) {\n  var defaultPickerValue = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : EMPTY_LIST;\n  var pickerValue = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : EMPTY_LIST;\n  var timeDefaultValue = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : EMPTY_LIST;\n  var onPickerValueChange = arguments.length > 11 ? arguments[11] : undefined;\n  var minDate = arguments.length > 12 ? arguments[12] : undefined;\n  var maxDate = arguments.length > 13 ? arguments[13] : undefined;\n  var isTimePicker = pickerMode === 'time';\n\n  // ======================== Active ========================\n  // `activeIndex` must be valid to avoid getting empty `pickerValue`\n  var mergedActiveIndex = activeIndex || 0;\n\n  // ===================== Picker Value =====================\n  var getDefaultPickerValue = function getDefaultPickerValue(index) {\n    var now = generateConfig.getNow();\n    if (isTimePicker) {\n      now = fillTime(generateConfig, now);\n    }\n    return defaultPickerValue[index] || calendarValue[index] || now;\n  };\n\n  // Align `pickerValue` with `showTime.defaultValue`\n  var _pickerValue = _slicedToArray(pickerValue, 2),\n    startPickerValue = _pickerValue[0],\n    endPickerValue = _pickerValue[1];\n\n  // PickerValue state\n  var _useMergedState = useMergedState(function () {\n      return getDefaultPickerValue(0);\n    }, {\n      value: startPickerValue\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    mergedStartPickerValue = _useMergedState2[0],\n    setStartPickerValue = _useMergedState2[1];\n  var _useMergedState3 = useMergedState(function () {\n      return getDefaultPickerValue(1);\n    }, {\n      value: endPickerValue\n    }),\n    _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n    mergedEndPickerValue = _useMergedState4[0],\n    setEndPickerValue = _useMergedState4[1];\n\n  // Current PickerValue\n  var currentPickerValue = React.useMemo(function () {\n    var current = [mergedStartPickerValue, mergedEndPickerValue][mergedActiveIndex];\n\n    // Merge the `showTime.defaultValue` into `pickerValue`\n    return isTimePicker ? current : fillTime(generateConfig, current, timeDefaultValue[mergedActiveIndex]);\n  }, [isTimePicker, mergedStartPickerValue, mergedEndPickerValue, mergedActiveIndex, generateConfig, timeDefaultValue]);\n  var setCurrentPickerValue = function setCurrentPickerValue(nextPickerValue) {\n    var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'panel';\n    var updater = [setStartPickerValue, setEndPickerValue][mergedActiveIndex];\n    updater(nextPickerValue);\n    var clone = [mergedStartPickerValue, mergedEndPickerValue];\n    clone[mergedActiveIndex] = nextPickerValue;\n    if (onPickerValueChange && (!isSame(generateConfig, locale, mergedStartPickerValue, clone[0], pickerMode) || !isSame(generateConfig, locale, mergedEndPickerValue, clone[1], pickerMode))) {\n      onPickerValueChange(clone, {\n        source: source,\n        range: mergedActiveIndex === 1 ? 'end' : 'start',\n        mode: modes\n      });\n    }\n  };\n\n  // ======================== Effect ========================\n  /**\n   * EndDate pickerValue is little different. It should be:\n   * - If date picker (without time), endDate is not same year & month as startDate\n   *   - pickerValue minus one month\n   * - Else pass directly\n   */\n  var getEndDatePickerValue = function getEndDatePickerValue(startDate, endDate) {\n    if (multiplePanel) {\n      // Basic offset\n      var SAME_CHECKER = {\n        date: 'month',\n        week: 'month',\n        month: 'year',\n        quarter: 'year'\n      };\n      var mode = SAME_CHECKER[pickerMode];\n      if (mode && !isSame(generateConfig, locale, startDate, endDate, mode)) {\n        return offsetPanelDate(generateConfig, pickerMode, endDate, -1);\n      }\n\n      // Year offset\n      if (pickerMode === 'year') {\n        var srcYear = Math.floor(generateConfig.getYear(startDate) / 10);\n        var tgtYear = Math.floor(generateConfig.getYear(endDate) / 10);\n        if (srcYear !== tgtYear) {\n          return offsetPanelDate(generateConfig, pickerMode, endDate, -1);\n        }\n      }\n    }\n    return endDate;\n  };\n\n  // >>> When switch field, reset the picker value as prev field picker value\n  var prevActiveIndexRef = React.useRef(null);\n  useLayoutEffect(function () {\n    if (open) {\n      if (!defaultPickerValue[mergedActiveIndex]) {\n        var nextPickerValue = isTimePicker ? null : generateConfig.getNow();\n\n        /**\n         * 1. If has prevActiveIndex, use it to avoid panel jump\n         * 2. If current field has value\n         *    - If `activeIndex` is 1 and `calendarValue[0]` is not same panel as `calendarValue[1]`,\n         *      offset `calendarValue[1]` and set it\n         *    - Else use `calendarValue[activeIndex]`\n         * 3. If current field has no value but another field has value, use another field value\n         * 4. Else use now (not any `calendarValue` can ref)\n         */\n\n        if (prevActiveIndexRef.current !== null && prevActiveIndexRef.current !== mergedActiveIndex) {\n          // If from another field, not jump picker value\n          nextPickerValue = [mergedStartPickerValue, mergedEndPickerValue][mergedActiveIndex ^ 1];\n        } else if (calendarValue[mergedActiveIndex]) {\n          // Current field has value\n          nextPickerValue = mergedActiveIndex === 0 ? calendarValue[0] : getEndDatePickerValue(calendarValue[0], calendarValue[1]);\n        } else if (calendarValue[mergedActiveIndex ^ 1]) {\n          // Current field has no value but another field has value\n          nextPickerValue = calendarValue[mergedActiveIndex ^ 1];\n        }\n\n        // Only sync when has value, this will sync in the `min-max` logic\n        if (nextPickerValue) {\n          // nextPickerValue < minDate\n          if (minDate && generateConfig.isAfter(minDate, nextPickerValue)) {\n            nextPickerValue = minDate;\n          }\n\n          // maxDate < nextPickerValue\n          var offsetPickerValue = multiplePanel ? offsetPanelDate(generateConfig, pickerMode, nextPickerValue, 1) : nextPickerValue;\n          if (maxDate && generateConfig.isAfter(offsetPickerValue, maxDate)) {\n            nextPickerValue = multiplePanel ? offsetPanelDate(generateConfig, pickerMode, maxDate, -1) : maxDate;\n          }\n          setCurrentPickerValue(nextPickerValue, 'reset');\n        }\n      }\n    }\n  }, [open, mergedActiveIndex, calendarValue[mergedActiveIndex]]);\n\n  // >>> Reset prevActiveIndex when panel closed\n  React.useEffect(function () {\n    if (open) {\n      prevActiveIndexRef.current = mergedActiveIndex;\n    } else {\n      prevActiveIndexRef.current = null;\n    }\n  }, [open, mergedActiveIndex]);\n\n  // >>> defaultPickerValue: Resync to `defaultPickerValue` for each panel focused\n  useLayoutEffect(function () {\n    if (open && defaultPickerValue) {\n      if (defaultPickerValue[mergedActiveIndex]) {\n        setCurrentPickerValue(defaultPickerValue[mergedActiveIndex], 'reset');\n      }\n    }\n  }, [open, mergedActiveIndex]);\n  return [currentPickerValue, setCurrentPickerValue];\n}"]},"metadata":{},"sourceType":"module"}