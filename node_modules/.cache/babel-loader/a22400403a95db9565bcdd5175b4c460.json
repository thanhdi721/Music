{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"active\", \"showActiveCls\", \"suffixIcon\", \"format\", \"validateFormat\", \"onChange\", \"onInput\", \"helped\", \"onHelp\", \"onSubmit\", \"onKeyDown\", \"preserveInvalidOnBlur\", \"invalid\", \"clearIcon\"];\nimport classNames from 'classnames';\nimport { useEvent } from 'rc-util';\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport raf from \"rc-util/es/raf\";\nimport * as React from 'react';\nimport { leftPad } from \"../../utils/miscUtil\";\nimport PickerContext from \"../context\";\nimport useLockEffect from \"../hooks/useLockEffect\";\nimport Icon from \"./Icon\";\nimport MaskFormat from \"./MaskFormat\";\nimport { getMaskRange } from \"./util\"; // Format logic\n//\n// First time on focus:\n//  1. check if the text is valid, if not fill with format\n//  2. set highlight cell to the first cell\n// Cells\n//  1. Selection the index cell, set inner `cacheValue` to ''\n//  2. Key input filter non-number char, patch after the `cacheValue`\n//    1. Replace the `cacheValue` with input align the cell length\n//    2. Re-selection the mask cell\n//  3. If `cacheValue` match the limit length or cell format (like 1 ~ 12 month), go to next cell\n\nvar Input = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var active = props.active,\n      _props$showActiveCls = props.showActiveCls,\n      showActiveCls = _props$showActiveCls === void 0 ? true : _props$showActiveCls,\n      suffixIcon = props.suffixIcon,\n      format = props.format,\n      validateFormat = props.validateFormat,\n      onChange = props.onChange,\n      onInput = props.onInput,\n      helped = props.helped,\n      onHelp = props.onHelp,\n      onSubmit = props.onSubmit,\n      onKeyDown = props.onKeyDown,\n      _props$preserveInvali = props.preserveInvalidOnBlur,\n      preserveInvalidOnBlur = _props$preserveInvali === void 0 ? false : _props$preserveInvali,\n      invalid = props.invalid,\n      clearIcon = props.clearIcon,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var value = props.value,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      onMouseUp = props.onMouseUp;\n\n  var _React$useContext = React.useContext(PickerContext),\n      prefixCls = _React$useContext.prefixCls,\n      _React$useContext$inp = _React$useContext.input,\n      Component = _React$useContext$inp === void 0 ? 'input' : _React$useContext$inp;\n\n  var inputPrefixCls = \"\".concat(prefixCls, \"-input\"); // ======================== Value =========================\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focused = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var _React$useState3 = React.useState(value),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      internalInputValue = _React$useState4[0],\n      setInputValue = _React$useState4[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      focusCellText = _React$useState6[0],\n      setFocusCellText = _React$useState6[1];\n\n  var _React$useState7 = React.useState(null),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      focusCellIndex = _React$useState8[0],\n      setFocusCellIndex = _React$useState8[1];\n\n  var _React$useState9 = React.useState(null),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      forceSelectionSyncMark = _React$useState10[0],\n      forceSelectionSync = _React$useState10[1];\n\n  var inputValue = internalInputValue || ''; // Sync value if needed\n\n  React.useEffect(function () {\n    setInputValue(value);\n  }, [value]); // ========================= Refs =========================\n\n  var holderRef = React.useRef();\n  var inputRef = React.useRef();\n  React.useImperativeHandle(ref, function () {\n    return {\n      nativeElement: holderRef.current,\n      inputElement: inputRef.current,\n      focus: function focus(options) {\n        inputRef.current.focus(options);\n      },\n      blur: function blur() {\n        inputRef.current.blur();\n      }\n    };\n  }); // ======================== Format ========================\n\n  var maskFormat = React.useMemo(function () {\n    return new MaskFormat(format || '');\n  }, [format]);\n\n  var _React$useMemo = React.useMemo(function () {\n    if (helped) {\n      return [0, 0];\n    }\n\n    return maskFormat.getSelection(focusCellIndex);\n  }, [maskFormat, focusCellIndex, helped]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      selectionStart = _React$useMemo2[0],\n      selectionEnd = _React$useMemo2[1]; // ======================== Modify ========================\n  // When input modify content, trigger `onHelp` if is not the format\n\n\n  var onModify = function onModify(text) {\n    if (text && text !== format && text !== value) {\n      onHelp();\n    }\n  }; // ======================== Change ========================\n\n  /**\n   * Triggered by paste, keyDown and focus to show format\n   */\n\n\n  var triggerInputChange = useEvent(function (text) {\n    if (validateFormat(text)) {\n      onChange(text);\n    }\n\n    setInputValue(text);\n    onModify(text);\n  }); // Directly trigger `onChange` if `format` is empty\n\n  var onInternalChange = function onInternalChange(event) {\n    // Hack `onChange` with format to do nothing\n    if (!format) {\n      var text = event.target.value;\n      onModify(text);\n      setInputValue(text);\n      onChange(text);\n    }\n  };\n\n  var onFormatPaste = function onFormatPaste(event) {\n    // Get paste text\n    var pasteText = event.clipboardData.getData('text');\n\n    if (validateFormat(pasteText)) {\n      triggerInputChange(pasteText);\n    }\n  }; // ======================== Mouse =========================\n  // When `mouseDown` get focus, it's better to not to change the selection\n  // Since the up position maybe not is the first cell\n\n\n  var mouseDownRef = React.useRef(false);\n\n  var onFormatMouseDown = function onFormatMouseDown() {\n    mouseDownRef.current = true;\n  };\n\n  var onFormatMouseUp = function onFormatMouseUp(event) {\n    var _ref = event.target,\n        start = _ref.selectionStart;\n    var closeMaskIndex = maskFormat.getMaskCellIndex(start);\n    setFocusCellIndex(closeMaskIndex); // Force update the selection\n\n    forceSelectionSync({});\n    onMouseUp === null || onMouseUp === void 0 || onMouseUp(event);\n    mouseDownRef.current = false;\n  }; // ====================== Focus Blur ======================\n\n\n  var onFormatFocus = function onFormatFocus(event) {\n    setFocused(true);\n    setFocusCellIndex(0);\n    setFocusCellText('');\n    onFocus(event);\n  };\n\n  var onSharedBlur = function onSharedBlur(event) {\n    onBlur(event);\n  };\n\n  var onFormatBlur = function onFormatBlur(event) {\n    setFocused(false);\n    onSharedBlur(event);\n  }; // ======================== Active ========================\n  // Check if blur need reset input value\n\n\n  useLockEffect(active, function () {\n    if (!active && !preserveInvalidOnBlur) {\n      setInputValue(value);\n    }\n  }); // ======================= Keyboard =======================\n\n  var onSharedKeyDown = function onSharedKeyDown(event) {\n    if (event.key === 'Enter' && validateFormat(inputValue)) {\n      onSubmit();\n    }\n\n    onKeyDown === null || onKeyDown === void 0 || onKeyDown(event);\n  };\n\n  var onFormatKeyDown = function onFormatKeyDown(event) {\n    onSharedKeyDown(event);\n    var key = event.key; // Save the cache with cell text\n\n    var nextCellText = null; // Fill in the input\n\n    var nextFillText = null;\n    var maskCellLen = selectionEnd - selectionStart;\n    var cellFormat = format.slice(selectionStart, selectionEnd); // Cell Index\n\n    var offsetCellIndex = function offsetCellIndex(offset) {\n      setFocusCellIndex(function (idx) {\n        var nextIndex = idx + offset;\n        nextIndex = Math.max(nextIndex, 0);\n        nextIndex = Math.min(nextIndex, maskFormat.size() - 1);\n        return nextIndex;\n      });\n    }; // Range\n\n\n    var offsetCellValue = function offsetCellValue(offset) {\n      var _getMaskRange = getMaskRange(cellFormat),\n          _getMaskRange2 = _slicedToArray(_getMaskRange, 3),\n          rangeStart = _getMaskRange2[0],\n          rangeEnd = _getMaskRange2[1],\n          rangeDefault = _getMaskRange2[2];\n\n      var currentText = inputValue.slice(selectionStart, selectionEnd);\n      var currentTextNum = Number(currentText);\n\n      if (isNaN(currentTextNum)) {\n        return String(rangeDefault ? rangeDefault : offset > 0 ? rangeStart : rangeEnd);\n      }\n\n      var num = currentTextNum + offset;\n      var range = rangeEnd - rangeStart + 1;\n      return String(rangeStart + (range + num - rangeStart) % range);\n    };\n\n    switch (key) {\n      // =============== Remove ===============\n      case 'Backspace':\n      case 'Delete':\n        nextCellText = '';\n        nextFillText = cellFormat;\n        break;\n      // =============== Arrows ===============\n      // Left key\n\n      case 'ArrowLeft':\n        nextCellText = '';\n        offsetCellIndex(-1);\n        break;\n      // Right key\n\n      case 'ArrowRight':\n        nextCellText = '';\n        offsetCellIndex(1);\n        break;\n      // Up key\n\n      case 'ArrowUp':\n        nextCellText = '';\n        nextFillText = offsetCellValue(1);\n        break;\n      // Down key\n\n      case 'ArrowDown':\n        nextCellText = '';\n        nextFillText = offsetCellValue(-1);\n        break;\n      // =============== Number ===============\n\n      default:\n        if (!isNaN(Number(key))) {\n          nextCellText = focusCellText + key;\n          nextFillText = nextCellText;\n        }\n\n        break;\n    } // Update cell text\n\n\n    if (nextCellText !== null) {\n      setFocusCellText(nextCellText);\n\n      if (nextCellText.length >= maskCellLen) {\n        // Go to next cell\n        offsetCellIndex(1);\n        setFocusCellText('');\n      }\n    } // Update the input text\n\n\n    if (nextFillText !== null) {\n      // Replace selection range with `nextCellText`\n      var nextFocusValue = // before\n      inputValue.slice(0, selectionStart) + // replace\n      leftPad(nextFillText, maskCellLen) + // after\n      inputValue.slice(selectionEnd);\n      triggerInputChange(nextFocusValue.slice(0, format.length));\n    } // Always trigger selection sync after key down\n\n\n    forceSelectionSync({});\n  }; // ======================== Format ========================\n\n\n  var rafRef = React.useRef();\n  useLayoutEffect(function () {\n    if (!focused || !format || mouseDownRef.current) {\n      return;\n    } // Reset with format if not match\n\n\n    if (!maskFormat.match(inputValue)) {\n      triggerInputChange(format);\n      return;\n    } // Match the selection range\n\n\n    inputRef.current.setSelectionRange(selectionStart, selectionEnd); // Chrome has the bug anchor position looks not correct but actually correct\n\n    rafRef.current = raf(function () {\n      inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n    });\n    return function () {\n      raf.cancel(rafRef.current);\n    };\n  }, [maskFormat, format, focused, inputValue, focusCellIndex, selectionStart, selectionEnd, forceSelectionSyncMark, triggerInputChange]); // ======================== Render ========================\n  // Input props for format\n\n  var inputProps = format ? {\n    onFocus: onFormatFocus,\n    onBlur: onFormatBlur,\n    onKeyDown: onFormatKeyDown,\n    onMouseDown: onFormatMouseDown,\n    onMouseUp: onFormatMouseUp,\n    onPaste: onFormatPaste\n  } : {};\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: holderRef,\n    className: classNames(inputPrefixCls, _defineProperty(_defineProperty({}, \"\".concat(inputPrefixCls, \"-active\"), active && showActiveCls), \"\".concat(inputPrefixCls, \"-placeholder\"), helped))\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    ref: inputRef,\n    \"aria-invalid\": invalid,\n    autoComplete: \"off\"\n  }, restProps, {\n    onKeyDown: onSharedKeyDown,\n    onBlur: onSharedBlur // Replace with format\n\n  }, inputProps, {\n    // Value\n    value: inputValue,\n    onChange: onInternalChange\n  })), /*#__PURE__*/React.createElement(Icon, {\n    type: \"suffix\",\n    icon: suffixIcon\n  }), clearIcon);\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  Input.displayName = 'Input';\n}\n\nexport default Input;","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/rc-picker/es/PickerInput/Selector/Input.js"],"names":["_extends","_defineProperty","_slicedToArray","_objectWithoutProperties","_excluded","classNames","useEvent","useLayoutEffect","raf","React","leftPad","PickerContext","useLockEffect","Icon","MaskFormat","getMaskRange","Input","forwardRef","props","ref","active","_props$showActiveCls","showActiveCls","suffixIcon","format","validateFormat","onChange","onInput","helped","onHelp","onSubmit","onKeyDown","_props$preserveInvali","preserveInvalidOnBlur","invalid","clearIcon","restProps","value","onFocus","onBlur","onMouseUp","_React$useContext","useContext","prefixCls","_React$useContext$inp","input","Component","inputPrefixCls","concat","_React$useState","useState","_React$useState2","focused","setFocused","_React$useState3","_React$useState4","internalInputValue","setInputValue","_React$useState5","_React$useState6","focusCellText","setFocusCellText","_React$useState7","_React$useState8","focusCellIndex","setFocusCellIndex","_React$useState9","_React$useState10","forceSelectionSyncMark","forceSelectionSync","inputValue","useEffect","holderRef","useRef","inputRef","useImperativeHandle","nativeElement","current","inputElement","focus","options","blur","maskFormat","useMemo","_React$useMemo","getSelection","_React$useMemo2","selectionStart","selectionEnd","onModify","text","triggerInputChange","onInternalChange","event","target","onFormatPaste","pasteText","clipboardData","getData","mouseDownRef","onFormatMouseDown","onFormatMouseUp","_ref","start","closeMaskIndex","getMaskCellIndex","onFormatFocus","onSharedBlur","onFormatBlur","onSharedKeyDown","key","onFormatKeyDown","nextCellText","nextFillText","maskCellLen","cellFormat","slice","offsetCellIndex","offset","idx","nextIndex","Math","max","min","size","offsetCellValue","_getMaskRange","_getMaskRange2","rangeStart","rangeEnd","rangeDefault","currentText","currentTextNum","Number","isNaN","String","num","range","length","nextFocusValue","rafRef","match","setSelectionRange","cancel","inputProps","onMouseDown","onPaste","createElement","className","autoComplete","type","icon","process","env","NODE_ENV","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"active\", \"showActiveCls\", \"suffixIcon\", \"format\", \"validateFormat\", \"onChange\", \"onInput\", \"helped\", \"onHelp\", \"onSubmit\", \"onKeyDown\", \"preserveInvalidOnBlur\", \"invalid\", \"clearIcon\"];\nimport classNames from 'classnames';\nimport { useEvent } from 'rc-util';\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport raf from \"rc-util/es/raf\";\nimport * as React from 'react';\nimport { leftPad } from \"../../utils/miscUtil\";\nimport PickerContext from \"../context\";\nimport useLockEffect from \"../hooks/useLockEffect\";\nimport Icon from \"./Icon\";\nimport MaskFormat from \"./MaskFormat\";\nimport { getMaskRange } from \"./util\";\n\n// Format logic\n//\n// First time on focus:\n//  1. check if the text is valid, if not fill with format\n//  2. set highlight cell to the first cell\n// Cells\n//  1. Selection the index cell, set inner `cacheValue` to ''\n//  2. Key input filter non-number char, patch after the `cacheValue`\n//    1. Replace the `cacheValue` with input align the cell length\n//    2. Re-selection the mask cell\n//  3. If `cacheValue` match the limit length or cell format (like 1 ~ 12 month), go to next cell\n\nvar Input = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var active = props.active,\n    _props$showActiveCls = props.showActiveCls,\n    showActiveCls = _props$showActiveCls === void 0 ? true : _props$showActiveCls,\n    suffixIcon = props.suffixIcon,\n    format = props.format,\n    validateFormat = props.validateFormat,\n    onChange = props.onChange,\n    onInput = props.onInput,\n    helped = props.helped,\n    onHelp = props.onHelp,\n    onSubmit = props.onSubmit,\n    onKeyDown = props.onKeyDown,\n    _props$preserveInvali = props.preserveInvalidOnBlur,\n    preserveInvalidOnBlur = _props$preserveInvali === void 0 ? false : _props$preserveInvali,\n    invalid = props.invalid,\n    clearIcon = props.clearIcon,\n    restProps = _objectWithoutProperties(props, _excluded);\n  var value = props.value,\n    onFocus = props.onFocus,\n    onBlur = props.onBlur,\n    onMouseUp = props.onMouseUp;\n  var _React$useContext = React.useContext(PickerContext),\n    prefixCls = _React$useContext.prefixCls,\n    _React$useContext$inp = _React$useContext.input,\n    Component = _React$useContext$inp === void 0 ? 'input' : _React$useContext$inp;\n  var inputPrefixCls = \"\".concat(prefixCls, \"-input\");\n\n  // ======================== Value =========================\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    focused = _React$useState2[0],\n    setFocused = _React$useState2[1];\n  var _React$useState3 = React.useState(value),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    internalInputValue = _React$useState4[0],\n    setInputValue = _React$useState4[1];\n  var _React$useState5 = React.useState(''),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    focusCellText = _React$useState6[0],\n    setFocusCellText = _React$useState6[1];\n  var _React$useState7 = React.useState(null),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    focusCellIndex = _React$useState8[0],\n    setFocusCellIndex = _React$useState8[1];\n  var _React$useState9 = React.useState(null),\n    _React$useState10 = _slicedToArray(_React$useState9, 2),\n    forceSelectionSyncMark = _React$useState10[0],\n    forceSelectionSync = _React$useState10[1];\n  var inputValue = internalInputValue || '';\n\n  // Sync value if needed\n  React.useEffect(function () {\n    setInputValue(value);\n  }, [value]);\n\n  // ========================= Refs =========================\n  var holderRef = React.useRef();\n  var inputRef = React.useRef();\n  React.useImperativeHandle(ref, function () {\n    return {\n      nativeElement: holderRef.current,\n      inputElement: inputRef.current,\n      focus: function focus(options) {\n        inputRef.current.focus(options);\n      },\n      blur: function blur() {\n        inputRef.current.blur();\n      }\n    };\n  });\n\n  // ======================== Format ========================\n  var maskFormat = React.useMemo(function () {\n    return new MaskFormat(format || '');\n  }, [format]);\n  var _React$useMemo = React.useMemo(function () {\n      if (helped) {\n        return [0, 0];\n      }\n      return maskFormat.getSelection(focusCellIndex);\n    }, [maskFormat, focusCellIndex, helped]),\n    _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n    selectionStart = _React$useMemo2[0],\n    selectionEnd = _React$useMemo2[1];\n\n  // ======================== Modify ========================\n  // When input modify content, trigger `onHelp` if is not the format\n  var onModify = function onModify(text) {\n    if (text && text !== format && text !== value) {\n      onHelp();\n    }\n  };\n\n  // ======================== Change ========================\n  /**\n   * Triggered by paste, keyDown and focus to show format\n   */\n  var triggerInputChange = useEvent(function (text) {\n    if (validateFormat(text)) {\n      onChange(text);\n    }\n    setInputValue(text);\n    onModify(text);\n  });\n\n  // Directly trigger `onChange` if `format` is empty\n  var onInternalChange = function onInternalChange(event) {\n    // Hack `onChange` with format to do nothing\n    if (!format) {\n      var text = event.target.value;\n      onModify(text);\n      setInputValue(text);\n      onChange(text);\n    }\n  };\n  var onFormatPaste = function onFormatPaste(event) {\n    // Get paste text\n    var pasteText = event.clipboardData.getData('text');\n    if (validateFormat(pasteText)) {\n      triggerInputChange(pasteText);\n    }\n  };\n\n  // ======================== Mouse =========================\n  // When `mouseDown` get focus, it's better to not to change the selection\n  // Since the up position maybe not is the first cell\n  var mouseDownRef = React.useRef(false);\n  var onFormatMouseDown = function onFormatMouseDown() {\n    mouseDownRef.current = true;\n  };\n  var onFormatMouseUp = function onFormatMouseUp(event) {\n    var _ref = event.target,\n      start = _ref.selectionStart;\n    var closeMaskIndex = maskFormat.getMaskCellIndex(start);\n    setFocusCellIndex(closeMaskIndex);\n\n    // Force update the selection\n    forceSelectionSync({});\n    onMouseUp === null || onMouseUp === void 0 || onMouseUp(event);\n    mouseDownRef.current = false;\n  };\n\n  // ====================== Focus Blur ======================\n  var onFormatFocus = function onFormatFocus(event) {\n    setFocused(true);\n    setFocusCellIndex(0);\n    setFocusCellText('');\n    onFocus(event);\n  };\n  var onSharedBlur = function onSharedBlur(event) {\n    onBlur(event);\n  };\n  var onFormatBlur = function onFormatBlur(event) {\n    setFocused(false);\n    onSharedBlur(event);\n  };\n\n  // ======================== Active ========================\n  // Check if blur need reset input value\n  useLockEffect(active, function () {\n    if (!active && !preserveInvalidOnBlur) {\n      setInputValue(value);\n    }\n  });\n\n  // ======================= Keyboard =======================\n  var onSharedKeyDown = function onSharedKeyDown(event) {\n    if (event.key === 'Enter' && validateFormat(inputValue)) {\n      onSubmit();\n    }\n    onKeyDown === null || onKeyDown === void 0 || onKeyDown(event);\n  };\n  var onFormatKeyDown = function onFormatKeyDown(event) {\n    onSharedKeyDown(event);\n    var key = event.key;\n\n    // Save the cache with cell text\n    var nextCellText = null;\n\n    // Fill in the input\n    var nextFillText = null;\n    var maskCellLen = selectionEnd - selectionStart;\n    var cellFormat = format.slice(selectionStart, selectionEnd);\n\n    // Cell Index\n    var offsetCellIndex = function offsetCellIndex(offset) {\n      setFocusCellIndex(function (idx) {\n        var nextIndex = idx + offset;\n        nextIndex = Math.max(nextIndex, 0);\n        nextIndex = Math.min(nextIndex, maskFormat.size() - 1);\n        return nextIndex;\n      });\n    };\n\n    // Range\n    var offsetCellValue = function offsetCellValue(offset) {\n      var _getMaskRange = getMaskRange(cellFormat),\n        _getMaskRange2 = _slicedToArray(_getMaskRange, 3),\n        rangeStart = _getMaskRange2[0],\n        rangeEnd = _getMaskRange2[1],\n        rangeDefault = _getMaskRange2[2];\n      var currentText = inputValue.slice(selectionStart, selectionEnd);\n      var currentTextNum = Number(currentText);\n      if (isNaN(currentTextNum)) {\n        return String(rangeDefault ? rangeDefault : offset > 0 ? rangeStart : rangeEnd);\n      }\n      var num = currentTextNum + offset;\n      var range = rangeEnd - rangeStart + 1;\n      return String(rangeStart + (range + num - rangeStart) % range);\n    };\n    switch (key) {\n      // =============== Remove ===============\n      case 'Backspace':\n      case 'Delete':\n        nextCellText = '';\n        nextFillText = cellFormat;\n        break;\n\n      // =============== Arrows ===============\n      // Left key\n      case 'ArrowLeft':\n        nextCellText = '';\n        offsetCellIndex(-1);\n        break;\n\n      // Right key\n      case 'ArrowRight':\n        nextCellText = '';\n        offsetCellIndex(1);\n        break;\n\n      // Up key\n      case 'ArrowUp':\n        nextCellText = '';\n        nextFillText = offsetCellValue(1);\n        break;\n\n      // Down key\n      case 'ArrowDown':\n        nextCellText = '';\n        nextFillText = offsetCellValue(-1);\n        break;\n\n      // =============== Number ===============\n      default:\n        if (!isNaN(Number(key))) {\n          nextCellText = focusCellText + key;\n          nextFillText = nextCellText;\n        }\n        break;\n    }\n\n    // Update cell text\n    if (nextCellText !== null) {\n      setFocusCellText(nextCellText);\n      if (nextCellText.length >= maskCellLen) {\n        // Go to next cell\n        offsetCellIndex(1);\n        setFocusCellText('');\n      }\n    }\n\n    // Update the input text\n    if (nextFillText !== null) {\n      // Replace selection range with `nextCellText`\n      var nextFocusValue =\n      // before\n      inputValue.slice(0, selectionStart) +\n      // replace\n      leftPad(nextFillText, maskCellLen) +\n      // after\n      inputValue.slice(selectionEnd);\n      triggerInputChange(nextFocusValue.slice(0, format.length));\n    }\n\n    // Always trigger selection sync after key down\n    forceSelectionSync({});\n  };\n\n  // ======================== Format ========================\n  var rafRef = React.useRef();\n  useLayoutEffect(function () {\n    if (!focused || !format || mouseDownRef.current) {\n      return;\n    }\n\n    // Reset with format if not match\n    if (!maskFormat.match(inputValue)) {\n      triggerInputChange(format);\n      return;\n    }\n\n    // Match the selection range\n    inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n\n    // Chrome has the bug anchor position looks not correct but actually correct\n    rafRef.current = raf(function () {\n      inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n    });\n    return function () {\n      raf.cancel(rafRef.current);\n    };\n  }, [maskFormat, format, focused, inputValue, focusCellIndex, selectionStart, selectionEnd, forceSelectionSyncMark, triggerInputChange]);\n\n  // ======================== Render ========================\n  // Input props for format\n  var inputProps = format ? {\n    onFocus: onFormatFocus,\n    onBlur: onFormatBlur,\n    onKeyDown: onFormatKeyDown,\n    onMouseDown: onFormatMouseDown,\n    onMouseUp: onFormatMouseUp,\n    onPaste: onFormatPaste\n  } : {};\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: holderRef,\n    className: classNames(inputPrefixCls, _defineProperty(_defineProperty({}, \"\".concat(inputPrefixCls, \"-active\"), active && showActiveCls), \"\".concat(inputPrefixCls, \"-placeholder\"), helped))\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    ref: inputRef,\n    \"aria-invalid\": invalid,\n    autoComplete: \"off\"\n  }, restProps, {\n    onKeyDown: onSharedKeyDown,\n    onBlur: onSharedBlur\n    // Replace with format\n  }, inputProps, {\n    // Value\n    value: inputValue,\n    onChange: onInternalChange\n  })), /*#__PURE__*/React.createElement(Icon, {\n    type: \"suffix\",\n    icon: suffixIcon\n  }), clearIcon);\n});\nif (process.env.NODE_ENV !== 'production') {\n  Input.displayName = 'Input';\n}\nexport default Input;"]},"metadata":{},"sourceType":"module"}