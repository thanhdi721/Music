{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { toPathKey, toPathKeys } from \"../utils/commonUtil\";\nimport { formatStrategyValues } from \"../utils/treeUtil\";\nexport default function useSelect(multiple, triggerChange, checkedValues, halfCheckedValues, missingCheckedValues, getPathKeyEntities, getValueByKeyPath, showCheckedStrategy) {\n  return function (valuePath) {\n    if (!multiple) {\n      triggerChange(valuePath);\n    } else {\n      // Prepare conduct required info\n      var pathKey = toPathKey(valuePath);\n      var checkedPathKeys = toPathKeys(checkedValues);\n      var halfCheckedPathKeys = toPathKeys(halfCheckedValues);\n      var existInChecked = checkedPathKeys.includes(pathKey);\n      var existInMissing = missingCheckedValues.some(function (valueCells) {\n        return toPathKey(valueCells) === pathKey;\n      }); // Do update\n\n      var nextCheckedValues = checkedValues;\n      var nextMissingValues = missingCheckedValues;\n\n      if (existInMissing && !existInChecked) {\n        // Missing value only do filter\n        nextMissingValues = missingCheckedValues.filter(function (valueCells) {\n          return toPathKey(valueCells) !== pathKey;\n        });\n      } else {\n        // Update checked key first\n        var nextRawCheckedKeys = existInChecked ? checkedPathKeys.filter(function (key) {\n          return key !== pathKey;\n        }) : [].concat(_toConsumableArray(checkedPathKeys), [pathKey]);\n        var pathKeyEntities = getPathKeyEntities(); // Conduction by selected or not\n\n        var checkedKeys;\n\n        if (existInChecked) {\n          var _conductCheck = conductCheck(nextRawCheckedKeys, {\n            checked: false,\n            halfCheckedKeys: halfCheckedPathKeys\n          }, pathKeyEntities);\n\n          checkedKeys = _conductCheck.checkedKeys;\n        } else {\n          var _conductCheck2 = conductCheck(nextRawCheckedKeys, true, pathKeyEntities);\n\n          checkedKeys = _conductCheck2.checkedKeys;\n        } // Roll up to parent level keys\n\n\n        var deDuplicatedKeys = formatStrategyValues(checkedKeys, getPathKeyEntities, showCheckedStrategy);\n        nextCheckedValues = getValueByKeyPath(deDuplicatedKeys);\n      }\n\n      triggerChange([].concat(_toConsumableArray(nextMissingValues), _toConsumableArray(nextCheckedValues)));\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/rc-cascader/es/hooks/useSelect.js"],"names":["_toConsumableArray","conductCheck","toPathKey","toPathKeys","formatStrategyValues","useSelect","multiple","triggerChange","checkedValues","halfCheckedValues","missingCheckedValues","getPathKeyEntities","getValueByKeyPath","showCheckedStrategy","valuePath","pathKey","checkedPathKeys","halfCheckedPathKeys","existInChecked","includes","existInMissing","some","valueCells","nextCheckedValues","nextMissingValues","filter","nextRawCheckedKeys","key","concat","pathKeyEntities","checkedKeys","_conductCheck","checked","halfCheckedKeys","_conductCheck2","deDuplicatedKeys"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,8CAA/B;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,qBAAtC;AACA,SAASC,oBAAT,QAAqC,mBAArC;AACA,eAAe,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,aAA7B,EAA4CC,aAA5C,EAA2DC,iBAA3D,EAA8EC,oBAA9E,EAAoGC,kBAApG,EAAwHC,iBAAxH,EAA2IC,mBAA3I,EAAgK;AAC7K,SAAO,UAAUC,SAAV,EAAqB;AAC1B,QAAI,CAACR,QAAL,EAAe;AACbC,MAAAA,aAAa,CAACO,SAAD,CAAb;AACD,KAFD,MAEO;AACL;AACA,UAAIC,OAAO,GAAGb,SAAS,CAACY,SAAD,CAAvB;AACA,UAAIE,eAAe,GAAGb,UAAU,CAACK,aAAD,CAAhC;AACA,UAAIS,mBAAmB,GAAGd,UAAU,CAACM,iBAAD,CAApC;AACA,UAAIS,cAAc,GAAGF,eAAe,CAACG,QAAhB,CAAyBJ,OAAzB,CAArB;AACA,UAAIK,cAAc,GAAGV,oBAAoB,CAACW,IAArB,CAA0B,UAAUC,UAAV,EAAsB;AACnE,eAAOpB,SAAS,CAACoB,UAAD,CAAT,KAA0BP,OAAjC;AACD,OAFoB,CAArB,CANK,CAUL;;AACA,UAAIQ,iBAAiB,GAAGf,aAAxB;AACA,UAAIgB,iBAAiB,GAAGd,oBAAxB;;AACA,UAAIU,cAAc,IAAI,CAACF,cAAvB,EAAuC;AACrC;AACAM,QAAAA,iBAAiB,GAAGd,oBAAoB,CAACe,MAArB,CAA4B,UAAUH,UAAV,EAAsB;AACpE,iBAAOpB,SAAS,CAACoB,UAAD,CAAT,KAA0BP,OAAjC;AACD,SAFmB,CAApB;AAGD,OALD,MAKO;AACL;AACA,YAAIW,kBAAkB,GAAGR,cAAc,GAAGF,eAAe,CAACS,MAAhB,CAAuB,UAAUE,GAAV,EAAe;AAC9E,iBAAOA,GAAG,KAAKZ,OAAf;AACD,SAFyC,CAAH,GAElC,GAAGa,MAAH,CAAU5B,kBAAkB,CAACgB,eAAD,CAA5B,EAA+C,CAACD,OAAD,CAA/C,CAFL;AAGA,YAAIc,eAAe,GAAGlB,kBAAkB,EAAxC,CALK,CAOL;;AACA,YAAImB,WAAJ;;AACA,YAAIZ,cAAJ,EAAoB;AAClB,cAAIa,aAAa,GAAG9B,YAAY,CAACyB,kBAAD,EAAqB;AACnDM,YAAAA,OAAO,EAAE,KAD0C;AAEnDC,YAAAA,eAAe,EAAEhB;AAFkC,WAArB,EAG7BY,eAH6B,CAAhC;;AAIAC,UAAAA,WAAW,GAAGC,aAAa,CAACD,WAA5B;AACD,SAND,MAMO;AACL,cAAII,cAAc,GAAGjC,YAAY,CAACyB,kBAAD,EAAqB,IAArB,EAA2BG,eAA3B,CAAjC;;AACAC,UAAAA,WAAW,GAAGI,cAAc,CAACJ,WAA7B;AACD,SAlBI,CAoBL;;;AACA,YAAIK,gBAAgB,GAAG/B,oBAAoB,CAAC0B,WAAD,EAAcnB,kBAAd,EAAkCE,mBAAlC,CAA3C;AACAU,QAAAA,iBAAiB,GAAGX,iBAAiB,CAACuB,gBAAD,CAArC;AACD;;AACD5B,MAAAA,aAAa,CAAC,GAAGqB,MAAH,CAAU5B,kBAAkB,CAACwB,iBAAD,CAA5B,EAAiDxB,kBAAkB,CAACuB,iBAAD,CAAnE,CAAD,CAAb;AACD;AACF,GA/CD;AAgDD","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { toPathKey, toPathKeys } from \"../utils/commonUtil\";\nimport { formatStrategyValues } from \"../utils/treeUtil\";\nexport default function useSelect(multiple, triggerChange, checkedValues, halfCheckedValues, missingCheckedValues, getPathKeyEntities, getValueByKeyPath, showCheckedStrategy) {\n  return function (valuePath) {\n    if (!multiple) {\n      triggerChange(valuePath);\n    } else {\n      // Prepare conduct required info\n      var pathKey = toPathKey(valuePath);\n      var checkedPathKeys = toPathKeys(checkedValues);\n      var halfCheckedPathKeys = toPathKeys(halfCheckedValues);\n      var existInChecked = checkedPathKeys.includes(pathKey);\n      var existInMissing = missingCheckedValues.some(function (valueCells) {\n        return toPathKey(valueCells) === pathKey;\n      });\n\n      // Do update\n      var nextCheckedValues = checkedValues;\n      var nextMissingValues = missingCheckedValues;\n      if (existInMissing && !existInChecked) {\n        // Missing value only do filter\n        nextMissingValues = missingCheckedValues.filter(function (valueCells) {\n          return toPathKey(valueCells) !== pathKey;\n        });\n      } else {\n        // Update checked key first\n        var nextRawCheckedKeys = existInChecked ? checkedPathKeys.filter(function (key) {\n          return key !== pathKey;\n        }) : [].concat(_toConsumableArray(checkedPathKeys), [pathKey]);\n        var pathKeyEntities = getPathKeyEntities();\n\n        // Conduction by selected or not\n        var checkedKeys;\n        if (existInChecked) {\n          var _conductCheck = conductCheck(nextRawCheckedKeys, {\n            checked: false,\n            halfCheckedKeys: halfCheckedPathKeys\n          }, pathKeyEntities);\n          checkedKeys = _conductCheck.checkedKeys;\n        } else {\n          var _conductCheck2 = conductCheck(nextRawCheckedKeys, true, pathKeyEntities);\n          checkedKeys = _conductCheck2.checkedKeys;\n        }\n\n        // Roll up to parent level keys\n        var deDuplicatedKeys = formatStrategyValues(checkedKeys, getPathKeyEntities, showCheckedStrategy);\n        nextCheckedValues = getValueByKeyPath(deDuplicatedKeys);\n      }\n      triggerChange([].concat(_toConsumableArray(nextMissingValues), _toConsumableArray(nextCheckedValues)));\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}