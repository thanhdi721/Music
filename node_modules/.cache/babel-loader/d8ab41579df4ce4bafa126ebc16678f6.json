{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\n\nfunction parseColWidth(totalWidth) {\n  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  if (typeof width === 'number') {\n    return width;\n  }\n\n  if (width.endsWith('%')) {\n    return totalWidth * parseFloat(width) / 100;\n  }\n\n  return null;\n}\n/**\n * Fill all column with width\n */\n\n\nexport default function useWidthColumns(flattenColumns, scrollWidth, clientWidth) {\n  return React.useMemo(function () {\n    // Fill width if needed\n    if (scrollWidth && scrollWidth > 0) {\n      var totalWidth = 0;\n      var missWidthCount = 0; // collect not given width column\n\n      flattenColumns.forEach(function (col) {\n        var colWidth = parseColWidth(scrollWidth, col.width);\n\n        if (colWidth) {\n          totalWidth += colWidth;\n        } else {\n          missWidthCount += 1;\n        }\n      }); // Fill width\n\n      var maxFitWidth = Math.max(scrollWidth, clientWidth);\n      var restWidth = Math.max(maxFitWidth - totalWidth, missWidthCount);\n      var restCount = missWidthCount;\n      var avgWidth = restWidth / missWidthCount;\n      var realTotal = 0;\n      var filledColumns = flattenColumns.map(function (col) {\n        var clone = _objectSpread({}, col);\n\n        var colWidth = parseColWidth(scrollWidth, clone.width);\n\n        if (colWidth) {\n          clone.width = colWidth;\n        } else {\n          var colAvgWidth = Math.floor(avgWidth);\n          clone.width = restCount === 1 ? restWidth : colAvgWidth;\n          restWidth -= colAvgWidth;\n          restCount -= 1;\n        }\n\n        realTotal += clone.width;\n        return clone;\n      }); // If realTotal is less than clientWidth,\n      // We need extend column width\n\n      if (realTotal < maxFitWidth) {\n        var scale = maxFitWidth / realTotal;\n        restWidth = maxFitWidth;\n        filledColumns.forEach(function (col, index) {\n          var colWidth = Math.floor(col.width * scale);\n          col.width = index === filledColumns.length - 1 ? restWidth : colWidth;\n          restWidth -= colWidth;\n        });\n      }\n\n      return [filledColumns, Math.max(realTotal, maxFitWidth)];\n    }\n\n    return [flattenColumns, scrollWidth];\n  }, [flattenColumns, scrollWidth, clientWidth]);\n}","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/rc-table/es/hooks/useColumns/useWidthColumns.js"],"names":["_objectSpread","React","parseColWidth","totalWidth","width","arguments","length","undefined","endsWith","parseFloat","useWidthColumns","flattenColumns","scrollWidth","clientWidth","useMemo","missWidthCount","forEach","col","colWidth","maxFitWidth","Math","max","restWidth","restCount","avgWidth","realTotal","filledColumns","map","clone","colAvgWidth","floor","scale","index"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nfunction parseColWidth(totalWidth) {\n  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (width.endsWith('%')) {\n    return totalWidth * parseFloat(width) / 100;\n  }\n  return null;\n}\n\n/**\n * Fill all column with width\n */\nexport default function useWidthColumns(flattenColumns, scrollWidth, clientWidth) {\n  return React.useMemo(function () {\n    // Fill width if needed\n    if (scrollWidth && scrollWidth > 0) {\n      var totalWidth = 0;\n      var missWidthCount = 0;\n\n      // collect not given width column\n      flattenColumns.forEach(function (col) {\n        var colWidth = parseColWidth(scrollWidth, col.width);\n        if (colWidth) {\n          totalWidth += colWidth;\n        } else {\n          missWidthCount += 1;\n        }\n      });\n\n      // Fill width\n      var maxFitWidth = Math.max(scrollWidth, clientWidth);\n      var restWidth = Math.max(maxFitWidth - totalWidth, missWidthCount);\n      var restCount = missWidthCount;\n      var avgWidth = restWidth / missWidthCount;\n      var realTotal = 0;\n      var filledColumns = flattenColumns.map(function (col) {\n        var clone = _objectSpread({}, col);\n        var colWidth = parseColWidth(scrollWidth, clone.width);\n        if (colWidth) {\n          clone.width = colWidth;\n        } else {\n          var colAvgWidth = Math.floor(avgWidth);\n          clone.width = restCount === 1 ? restWidth : colAvgWidth;\n          restWidth -= colAvgWidth;\n          restCount -= 1;\n        }\n        realTotal += clone.width;\n        return clone;\n      });\n\n      // If realTotal is less than clientWidth,\n      // We need extend column width\n      if (realTotal < maxFitWidth) {\n        var scale = maxFitWidth / realTotal;\n        restWidth = maxFitWidth;\n        filledColumns.forEach(function (col, index) {\n          var colWidth = Math.floor(col.width * scale);\n          col.width = index === filledColumns.length - 1 ? restWidth : colWidth;\n          restWidth -= colWidth;\n        });\n      }\n      return [filledColumns, Math.max(realTotal, maxFitWidth)];\n    }\n    return [flattenColumns, scrollWidth];\n  }, [flattenColumns, scrollWidth, clientWidth]);\n}"]},"metadata":{},"sourceType":"module"}