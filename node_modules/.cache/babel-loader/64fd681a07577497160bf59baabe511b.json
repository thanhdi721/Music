{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { useContext } from '@rc-component/context';\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { getCellProps } from \"../Body/BodyRow\";\nimport Cell from \"../Cell\";\nimport { GridContext } from \"./context\";\n/**\n * Return the width of the column by `colSpan`.\n * When `colSpan` is `0` will be trade as `1`.\n */\n\nexport function getColumnWidth(colIndex, colSpan, columnsOffset) {\n  var mergedColSpan = colSpan || 1;\n  return columnsOffset[colIndex + mergedColSpan] - (columnsOffset[colIndex] || 0);\n}\n\nfunction VirtualCell(props) {\n  var rowInfo = props.rowInfo,\n      column = props.column,\n      colIndex = props.colIndex,\n      indent = props.indent,\n      index = props.index,\n      component = props.component,\n      renderIndex = props.renderIndex,\n      record = props.record,\n      style = props.style,\n      className = props.className,\n      inverse = props.inverse,\n      getHeight = props.getHeight;\n  var render = column.render,\n      dataIndex = column.dataIndex,\n      columnClassName = column.className,\n      colWidth = column.width;\n\n  var _useContext = useContext(GridContext, ['columnsOffset']),\n      columnsOffset = _useContext.columnsOffset;\n\n  var _getCellProps = getCellProps(rowInfo, column, colIndex, indent, index),\n      key = _getCellProps.key,\n      fixedInfo = _getCellProps.fixedInfo,\n      appendCellNode = _getCellProps.appendCellNode,\n      additionalCellProps = _getCellProps.additionalCellProps;\n\n  var cellStyle = additionalCellProps.style,\n      _additionalCellProps$ = additionalCellProps.colSpan,\n      colSpan = _additionalCellProps$ === void 0 ? 1 : _additionalCellProps$,\n      _additionalCellProps$2 = additionalCellProps.rowSpan,\n      rowSpan = _additionalCellProps$2 === void 0 ? 1 : _additionalCellProps$2; // ========================= ColWidth =========================\n  // column width\n\n  var startColIndex = colIndex - 1;\n  var concatColWidth = getColumnWidth(startColIndex, colSpan, columnsOffset); // margin offset\n\n  var marginOffset = colSpan > 1 ? colWidth - concatColWidth : 0; // ========================== Style ===========================\n\n  var mergedStyle = _objectSpread(_objectSpread(_objectSpread({}, cellStyle), style), {}, {\n    flex: \"0 0 \".concat(concatColWidth, \"px\"),\n    width: \"\".concat(concatColWidth, \"px\"),\n    marginRight: marginOffset,\n    pointerEvents: 'auto'\n  }); // When `colSpan` or `rowSpan` is `0`, should skip render.\n\n\n  var needHide = React.useMemo(function () {\n    if (inverse) {\n      return rowSpan <= 1;\n    } else {\n      return colSpan === 0 || rowSpan === 0 || rowSpan > 1;\n    }\n  }, [rowSpan, colSpan, inverse]); // 0 rowSpan or colSpan should not render\n\n  if (needHide) {\n    mergedStyle.visibility = 'hidden';\n  } else if (inverse) {\n    mergedStyle.height = getHeight === null || getHeight === void 0 ? void 0 : getHeight(rowSpan);\n  }\n\n  var mergedRender = needHide ? function () {\n    return null;\n  } : render; // ========================== Render ==========================\n\n  var cellSpan = {}; // Virtual should reset `colSpan` & `rowSpan`\n\n  if (rowSpan === 0 || colSpan === 0) {\n    cellSpan.rowSpan = 1;\n    cellSpan.colSpan = 1;\n  }\n\n  return /*#__PURE__*/React.createElement(Cell, _extends({\n    className: classNames(columnClassName, className),\n    ellipsis: column.ellipsis,\n    align: column.align,\n    scope: column.rowScope,\n    component: component,\n    prefixCls: rowInfo.prefixCls,\n    key: key,\n    record: record,\n    index: index,\n    renderIndex: renderIndex,\n    dataIndex: dataIndex,\n    render: mergedRender,\n    shouldCellUpdate: column.shouldCellUpdate\n  }, fixedInfo, {\n    appendNode: appendCellNode,\n    additionalProps: _objectSpread(_objectSpread({}, additionalCellProps), {}, {\n      style: mergedStyle\n    }, cellSpan)\n  }));\n}\n\nexport default VirtualCell;","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/rc-table/es/VirtualTable/VirtualCell.js"],"names":["_extends","_objectSpread","useContext","classNames","React","getCellProps","Cell","GridContext","getColumnWidth","colIndex","colSpan","columnsOffset","mergedColSpan","VirtualCell","props","rowInfo","column","indent","index","component","renderIndex","record","style","className","inverse","getHeight","render","dataIndex","columnClassName","colWidth","width","_useContext","_getCellProps","key","fixedInfo","appendCellNode","additionalCellProps","cellStyle","_additionalCellProps$","_additionalCellProps$2","rowSpan","startColIndex","concatColWidth","marginOffset","mergedStyle","flex","concat","marginRight","pointerEvents","needHide","useMemo","visibility","height","mergedRender","cellSpan","createElement","ellipsis","align","scope","rowScope","prefixCls","shouldCellUpdate","appendNode","additionalProps"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { useContext } from '@rc-component/context';\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { getCellProps } from \"../Body/BodyRow\";\nimport Cell from \"../Cell\";\nimport { GridContext } from \"./context\";\n/**\n * Return the width of the column by `colSpan`.\n * When `colSpan` is `0` will be trade as `1`.\n */\nexport function getColumnWidth(colIndex, colSpan, columnsOffset) {\n  var mergedColSpan = colSpan || 1;\n  return columnsOffset[colIndex + mergedColSpan] - (columnsOffset[colIndex] || 0);\n}\nfunction VirtualCell(props) {\n  var rowInfo = props.rowInfo,\n    column = props.column,\n    colIndex = props.colIndex,\n    indent = props.indent,\n    index = props.index,\n    component = props.component,\n    renderIndex = props.renderIndex,\n    record = props.record,\n    style = props.style,\n    className = props.className,\n    inverse = props.inverse,\n    getHeight = props.getHeight;\n  var render = column.render,\n    dataIndex = column.dataIndex,\n    columnClassName = column.className,\n    colWidth = column.width;\n  var _useContext = useContext(GridContext, ['columnsOffset']),\n    columnsOffset = _useContext.columnsOffset;\n  var _getCellProps = getCellProps(rowInfo, column, colIndex, indent, index),\n    key = _getCellProps.key,\n    fixedInfo = _getCellProps.fixedInfo,\n    appendCellNode = _getCellProps.appendCellNode,\n    additionalCellProps = _getCellProps.additionalCellProps;\n  var cellStyle = additionalCellProps.style,\n    _additionalCellProps$ = additionalCellProps.colSpan,\n    colSpan = _additionalCellProps$ === void 0 ? 1 : _additionalCellProps$,\n    _additionalCellProps$2 = additionalCellProps.rowSpan,\n    rowSpan = _additionalCellProps$2 === void 0 ? 1 : _additionalCellProps$2;\n\n  // ========================= ColWidth =========================\n  // column width\n  var startColIndex = colIndex - 1;\n  var concatColWidth = getColumnWidth(startColIndex, colSpan, columnsOffset);\n\n  // margin offset\n  var marginOffset = colSpan > 1 ? colWidth - concatColWidth : 0;\n\n  // ========================== Style ===========================\n  var mergedStyle = _objectSpread(_objectSpread(_objectSpread({}, cellStyle), style), {}, {\n    flex: \"0 0 \".concat(concatColWidth, \"px\"),\n    width: \"\".concat(concatColWidth, \"px\"),\n    marginRight: marginOffset,\n    pointerEvents: 'auto'\n  });\n\n  // When `colSpan` or `rowSpan` is `0`, should skip render.\n  var needHide = React.useMemo(function () {\n    if (inverse) {\n      return rowSpan <= 1;\n    } else {\n      return colSpan === 0 || rowSpan === 0 || rowSpan > 1;\n    }\n  }, [rowSpan, colSpan, inverse]);\n\n  // 0 rowSpan or colSpan should not render\n  if (needHide) {\n    mergedStyle.visibility = 'hidden';\n  } else if (inverse) {\n    mergedStyle.height = getHeight === null || getHeight === void 0 ? void 0 : getHeight(rowSpan);\n  }\n  var mergedRender = needHide ? function () {\n    return null;\n  } : render;\n\n  // ========================== Render ==========================\n  var cellSpan = {};\n\n  // Virtual should reset `colSpan` & `rowSpan`\n  if (rowSpan === 0 || colSpan === 0) {\n    cellSpan.rowSpan = 1;\n    cellSpan.colSpan = 1;\n  }\n  return /*#__PURE__*/React.createElement(Cell, _extends({\n    className: classNames(columnClassName, className),\n    ellipsis: column.ellipsis,\n    align: column.align,\n    scope: column.rowScope,\n    component: component,\n    prefixCls: rowInfo.prefixCls,\n    key: key,\n    record: record,\n    index: index,\n    renderIndex: renderIndex,\n    dataIndex: dataIndex,\n    render: mergedRender,\n    shouldCellUpdate: column.shouldCellUpdate\n  }, fixedInfo, {\n    appendNode: appendCellNode,\n    additionalProps: _objectSpread(_objectSpread({}, additionalCellProps), {}, {\n      style: mergedStyle\n    }, cellSpan)\n  }));\n}\nexport default VirtualCell;"]},"metadata":{},"sourceType":"module"}