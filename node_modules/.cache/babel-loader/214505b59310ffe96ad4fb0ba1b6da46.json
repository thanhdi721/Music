{"ast":null,"code":"\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { generateColor, getAlphaColor } from '../util';\nimport ColorSteppers from './ColorSteppers';\n\nconst ColorAlphaInput = _ref => {\n  let {\n    prefixCls,\n    value,\n    onChange\n  } = _ref;\n  const colorAlphaInputPrefixCls = `${prefixCls}-alpha-input`;\n  const [alphaValue, setAlphaValue] = useState(generateColor(value || '#000')); // Update step value\n\n  useEffect(() => {\n    if (value) {\n      setAlphaValue(value);\n    }\n  }, [value]);\n\n  const handleAlphaChange = step => {\n    const hsba = alphaValue.toHsb();\n    hsba.a = (step || 0) / 100;\n    const genColor = generateColor(hsba);\n\n    if (!value) {\n      setAlphaValue(genColor);\n    }\n\n    onChange === null || onChange === void 0 ? void 0 : onChange(genColor);\n  };\n\n  return /*#__PURE__*/React.createElement(ColorSteppers, {\n    value: getAlphaColor(alphaValue),\n    prefixCls: prefixCls,\n    formatter: step => `${step}%`,\n    className: colorAlphaInputPrefixCls,\n    onChange: handleAlphaChange\n  });\n};\n\nexport default ColorAlphaInput;","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/antd/es/color-picker/components/ColorAlphaInput.js"],"names":["React","useEffect","useState","generateColor","getAlphaColor","ColorSteppers","ColorAlphaInput","_ref","prefixCls","value","onChange","colorAlphaInputPrefixCls","alphaValue","setAlphaValue","handleAlphaChange","step","hsba","toHsb","a","genColor","createElement","formatter","className"],"mappings":"AAAA;;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,SAA7C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AACA,MAAMC,eAAe,GAAGC,IAAI,IAAI;AAC9B,MAAI;AACFC,IAAAA,SADE;AAEFC,IAAAA,KAFE;AAGFC,IAAAA;AAHE,MAIAH,IAJJ;AAKA,QAAMI,wBAAwB,GAAI,GAAEH,SAAU,cAA9C;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAACC,aAAa,CAACM,KAAK,IAAI,MAAV,CAAd,CAA5C,CAP8B,CAQ9B;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,KAAJ,EAAW;AACTI,MAAAA,aAAa,CAACJ,KAAD,CAAb;AACD;AACF,GAJQ,EAIN,CAACA,KAAD,CAJM,CAAT;;AAKA,QAAMK,iBAAiB,GAAGC,IAAI,IAAI;AAChC,UAAMC,IAAI,GAAGJ,UAAU,CAACK,KAAX,EAAb;AACAD,IAAAA,IAAI,CAACE,CAAL,GAAS,CAACH,IAAI,IAAI,CAAT,IAAc,GAAvB;AACA,UAAMI,QAAQ,GAAGhB,aAAa,CAACa,IAAD,CAA9B;;AACA,QAAI,CAACP,KAAL,EAAY;AACVI,MAAAA,aAAa,CAACM,QAAD,CAAb;AACD;;AACDT,IAAAA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACS,QAAD,CAA5D;AACD,GARD;;AASA,SAAO,aAAanB,KAAK,CAACoB,aAAN,CAAoBf,aAApB,EAAmC;AACrDI,IAAAA,KAAK,EAAEL,aAAa,CAACQ,UAAD,CADiC;AAErDJ,IAAAA,SAAS,EAAEA,SAF0C;AAGrDa,IAAAA,SAAS,EAAEN,IAAI,IAAK,GAAEA,IAAK,GAH0B;AAIrDO,IAAAA,SAAS,EAAEX,wBAJ0C;AAKrDD,IAAAA,QAAQ,EAAEI;AAL2C,GAAnC,CAApB;AAOD,CA9BD;;AA+BA,eAAeR,eAAf","sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { generateColor, getAlphaColor } from '../util';\nimport ColorSteppers from './ColorSteppers';\nconst ColorAlphaInput = _ref => {\n  let {\n    prefixCls,\n    value,\n    onChange\n  } = _ref;\n  const colorAlphaInputPrefixCls = `${prefixCls}-alpha-input`;\n  const [alphaValue, setAlphaValue] = useState(generateColor(value || '#000'));\n  // Update step value\n  useEffect(() => {\n    if (value) {\n      setAlphaValue(value);\n    }\n  }, [value]);\n  const handleAlphaChange = step => {\n    const hsba = alphaValue.toHsb();\n    hsba.a = (step || 0) / 100;\n    const genColor = generateColor(hsba);\n    if (!value) {\n      setAlphaValue(genColor);\n    }\n    onChange === null || onChange === void 0 ? void 0 : onChange(genColor);\n  };\n  return /*#__PURE__*/React.createElement(ColorSteppers, {\n    value: getAlphaColor(alphaValue),\n    prefixCls: prefixCls,\n    formatter: step => `${step}%`,\n    className: colorAlphaInputPrefixCls,\n    onChange: handleAlphaChange\n  });\n};\nexport default ColorAlphaInput;"]},"metadata":{},"sourceType":"module"}