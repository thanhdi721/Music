{"ast":null,"code":"import KeyCode from \"rc-util/es/KeyCode\";\nimport raf from \"rc-util/es/raf\";\nimport * as React from \"react\";\nvar ESC = KeyCode.ESC,\n    TAB = KeyCode.TAB;\nexport default function useAccessibility(_ref) {\n  var visible = _ref.visible,\n      triggerRef = _ref.triggerRef,\n      onVisibleChange = _ref.onVisibleChange,\n      autoFocus = _ref.autoFocus,\n      overlayRef = _ref.overlayRef;\n  var focusMenuRef = React.useRef(false);\n\n  var handleCloseMenuAndReturnFocus = function handleCloseMenuAndReturnFocus() {\n    if (visible) {\n      var _triggerRef$current, _triggerRef$current$f;\n\n      (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 || (_triggerRef$current$f = _triggerRef$current.focus) === null || _triggerRef$current$f === void 0 || _triggerRef$current$f.call(_triggerRef$current);\n      onVisibleChange === null || onVisibleChange === void 0 || onVisibleChange(false);\n    }\n  };\n\n  var focusMenu = function focusMenu() {\n    var _overlayRef$current;\n\n    if ((_overlayRef$current = overlayRef.current) !== null && _overlayRef$current !== void 0 && _overlayRef$current.focus) {\n      overlayRef.current.focus();\n      focusMenuRef.current = true;\n      return true;\n    }\n\n    return false;\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    switch (event.keyCode) {\n      case ESC:\n        handleCloseMenuAndReturnFocus();\n        break;\n\n      case TAB:\n        {\n          var focusResult = false;\n\n          if (!focusMenuRef.current) {\n            focusResult = focusMenu();\n          }\n\n          if (focusResult) {\n            event.preventDefault();\n          } else {\n            handleCloseMenuAndReturnFocus();\n          }\n\n          break;\n        }\n    }\n  };\n\n  React.useEffect(function () {\n    if (visible) {\n      window.addEventListener(\"keydown\", handleKeyDown);\n\n      if (autoFocus) {\n        // FIXME: hack with raf\n        raf(focusMenu, 3);\n      }\n\n      return function () {\n        window.removeEventListener(\"keydown\", handleKeyDown);\n        focusMenuRef.current = false;\n      };\n    }\n\n    return function () {\n      focusMenuRef.current = false;\n    };\n  }, [visible]); // eslint-disable-line react-hooks/exhaustive-deps\n}","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/rc-dropdown/es/hooks/useAccessibility.js"],"names":["KeyCode","raf","React","ESC","TAB","useAccessibility","_ref","visible","triggerRef","onVisibleChange","autoFocus","overlayRef","focusMenuRef","useRef","handleCloseMenuAndReturnFocus","_triggerRef$current","_triggerRef$current$f","current","focus","call","focusMenu","_overlayRef$current","handleKeyDown","event","keyCode","focusResult","preventDefault","useEffect","window","addEventListener","removeEventListener"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,IAAIC,GAAG,GAAGH,OAAO,CAACG,GAAlB;AAAA,IACEC,GAAG,GAAGJ,OAAO,CAACI,GADhB;AAEA,eAAe,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC7C,MAAIC,OAAO,GAAGD,IAAI,CAACC,OAAnB;AAAA,MACEC,UAAU,GAAGF,IAAI,CAACE,UADpB;AAAA,MAEEC,eAAe,GAAGH,IAAI,CAACG,eAFzB;AAAA,MAGEC,SAAS,GAAGJ,IAAI,CAACI,SAHnB;AAAA,MAIEC,UAAU,GAAGL,IAAI,CAACK,UAJpB;AAKA,MAAIC,YAAY,GAAGV,KAAK,CAACW,MAAN,CAAa,KAAb,CAAnB;;AACA,MAAIC,6BAA6B,GAAG,SAASA,6BAAT,GAAyC;AAC3E,QAAIP,OAAJ,EAAa;AACX,UAAIQ,mBAAJ,EAAyBC,qBAAzB;;AACA,OAACD,mBAAmB,GAAGP,UAAU,CAACS,OAAlC,MAA+C,IAA/C,IAAuDF,mBAAmB,KAAK,KAAK,CAApF,IAAyF,CAACC,qBAAqB,GAAGD,mBAAmB,CAACG,KAA7C,MAAwD,IAAjJ,IAAyJF,qBAAqB,KAAK,KAAK,CAAxL,IAA6LA,qBAAqB,CAACG,IAAtB,CAA2BJ,mBAA3B,CAA7L;AACAN,MAAAA,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAArD,IAA0DA,eAAe,CAAC,KAAD,CAAzE;AACD;AACF,GAND;;AAOA,MAAIW,SAAS,GAAG,SAASA,SAAT,GAAqB;AACnC,QAAIC,mBAAJ;;AACA,QAAI,CAACA,mBAAmB,GAAGV,UAAU,CAACM,OAAlC,MAA+C,IAA/C,IAAuDI,mBAAmB,KAAK,KAAK,CAApF,IAAyFA,mBAAmB,CAACH,KAAjH,EAAwH;AACtHP,MAAAA,UAAU,CAACM,OAAX,CAAmBC,KAAnB;AACAN,MAAAA,YAAY,CAACK,OAAb,GAAuB,IAAvB;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GARD;;AASA,MAAIK,aAAa,GAAG,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAChD,YAAQA,KAAK,CAACC,OAAd;AACE,WAAKrB,GAAL;AACEW,QAAAA,6BAA6B;AAC7B;;AACF,WAAKV,GAAL;AACE;AACE,cAAIqB,WAAW,GAAG,KAAlB;;AACA,cAAI,CAACb,YAAY,CAACK,OAAlB,EAA2B;AACzBQ,YAAAA,WAAW,GAAGL,SAAS,EAAvB;AACD;;AACD,cAAIK,WAAJ,EAAiB;AACfF,YAAAA,KAAK,CAACG,cAAN;AACD,WAFD,MAEO;AACLZ,YAAAA,6BAA6B;AAC9B;;AACD;AACD;AAhBL;AAkBD,GAnBD;;AAoBAZ,EAAAA,KAAK,CAACyB,SAAN,CAAgB,YAAY;AAC1B,QAAIpB,OAAJ,EAAa;AACXqB,MAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCP,aAAnC;;AACA,UAAIZ,SAAJ,EAAe;AACb;AACAT,QAAAA,GAAG,CAACmB,SAAD,EAAY,CAAZ,CAAH;AACD;;AACD,aAAO,YAAY;AACjBQ,QAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCR,aAAtC;AACAV,QAAAA,YAAY,CAACK,OAAb,GAAuB,KAAvB;AACD,OAHD;AAID;;AACD,WAAO,YAAY;AACjBL,MAAAA,YAAY,CAACK,OAAb,GAAuB,KAAvB;AACD,KAFD;AAGD,GAfD,EAeG,CAACV,OAAD,CAfH,EA3C6C,CA0D9B;AAChB","sourcesContent":["import KeyCode from \"rc-util/es/KeyCode\";\nimport raf from \"rc-util/es/raf\";\nimport * as React from \"react\";\nvar ESC = KeyCode.ESC,\n  TAB = KeyCode.TAB;\nexport default function useAccessibility(_ref) {\n  var visible = _ref.visible,\n    triggerRef = _ref.triggerRef,\n    onVisibleChange = _ref.onVisibleChange,\n    autoFocus = _ref.autoFocus,\n    overlayRef = _ref.overlayRef;\n  var focusMenuRef = React.useRef(false);\n  var handleCloseMenuAndReturnFocus = function handleCloseMenuAndReturnFocus() {\n    if (visible) {\n      var _triggerRef$current, _triggerRef$current$f;\n      (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 || (_triggerRef$current$f = _triggerRef$current.focus) === null || _triggerRef$current$f === void 0 || _triggerRef$current$f.call(_triggerRef$current);\n      onVisibleChange === null || onVisibleChange === void 0 || onVisibleChange(false);\n    }\n  };\n  var focusMenu = function focusMenu() {\n    var _overlayRef$current;\n    if ((_overlayRef$current = overlayRef.current) !== null && _overlayRef$current !== void 0 && _overlayRef$current.focus) {\n      overlayRef.current.focus();\n      focusMenuRef.current = true;\n      return true;\n    }\n    return false;\n  };\n  var handleKeyDown = function handleKeyDown(event) {\n    switch (event.keyCode) {\n      case ESC:\n        handleCloseMenuAndReturnFocus();\n        break;\n      case TAB:\n        {\n          var focusResult = false;\n          if (!focusMenuRef.current) {\n            focusResult = focusMenu();\n          }\n          if (focusResult) {\n            event.preventDefault();\n          } else {\n            handleCloseMenuAndReturnFocus();\n          }\n          break;\n        }\n    }\n  };\n  React.useEffect(function () {\n    if (visible) {\n      window.addEventListener(\"keydown\", handleKeyDown);\n      if (autoFocus) {\n        // FIXME: hack with raf\n        raf(focusMenu, 3);\n      }\n      return function () {\n        window.removeEventListener(\"keydown\", handleKeyDown);\n        focusMenuRef.current = false;\n      };\n    }\n    return function () {\n      focusMenuRef.current = false;\n    };\n  }, [visible]); // eslint-disable-line react-hooks/exhaustive-deps\n}"]},"metadata":{},"sourceType":"module"}