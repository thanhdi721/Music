{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Color as RcColor } from '@rc-component/color-picker';\nexport const toHexFormat = (value, alpha) => (value === null || value === void 0 ? void 0 : value.replace(/[^\\w/]/gi, '').slice(0, alpha ? 8 : 6)) || '';\nexport const getHex = (value, alpha) => value ? toHexFormat(value, alpha) : '';\nexport let ColorFactory = /*#__PURE__*/function () {\n  function ColorFactory(color) {\n    _classCallCheck(this, ColorFactory);\n\n    this.cleared = false;\n    this.metaColor = new RcColor(color);\n\n    if (!color) {\n      this.metaColor.setAlpha(0);\n      this.cleared = true;\n    }\n  }\n\n  return _createClass(ColorFactory, [{\n    key: \"toHsb\",\n    value: function toHsb() {\n      return this.metaColor.toHsb();\n    }\n  }, {\n    key: \"toHsbString\",\n    value: function toHsbString() {\n      return this.metaColor.toHsbString();\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return getHex(this.toHexString(), this.metaColor.getAlpha() < 1);\n    }\n  }, {\n    key: \"toHexString\",\n    value: function toHexString() {\n      return this.metaColor.getAlpha() === 1 ? this.metaColor.toHexString() : this.metaColor.toHex8String();\n    }\n  }, {\n    key: \"toRgb\",\n    value: function toRgb() {\n      return this.metaColor.toRgb();\n    }\n  }, {\n    key: \"toRgbString\",\n    value: function toRgbString() {\n      return this.metaColor.toRgbString();\n    }\n  }]);\n}();","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/antd/es/color-picker/color.js"],"names":["_classCallCheck","_createClass","Color","RcColor","toHexFormat","value","alpha","replace","slice","getHex","ColorFactory","color","cleared","metaColor","setAlpha","key","toHsb","toHsbString","toHex","toHexString","getAlpha","toHex8String","toRgb","toRgbString"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,SAASC,KAAK,IAAIC,OAAlB,QAAiC,4BAAjC;AACA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB,CAACD,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACE,OAAN,CAAc,UAAd,EAA0B,EAA1B,EAA8BC,KAA9B,CAAoC,CAApC,EAAuCF,KAAK,GAAG,CAAH,GAAO,CAAnD,CAA/C,KAAyG,EAA/I;AACP,OAAO,MAAMG,MAAM,GAAG,CAACJ,KAAD,EAAQC,KAAR,KAAkBD,KAAK,GAAGD,WAAW,CAACC,KAAD,EAAQC,KAAR,CAAd,GAA+B,EAArE;AACP,OAAO,IAAII,YAAY,GAAG,aAAa,YAAY;AACjD,WAASA,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BX,IAAAA,eAAe,CAAC,IAAD,EAAOU,YAAP,CAAf;;AACA,SAAKE,OAAL,GAAe,KAAf;AACA,SAAKC,SAAL,GAAiB,IAAIV,OAAJ,CAAYQ,KAAZ,CAAjB;;AACA,QAAI,CAACA,KAAL,EAAY;AACV,WAAKE,SAAL,CAAeC,QAAf,CAAwB,CAAxB;AACA,WAAKF,OAAL,GAAe,IAAf;AACD;AACF;;AACD,SAAOX,YAAY,CAACS,YAAD,EAAe,CAAC;AACjCK,IAAAA,GAAG,EAAE,OAD4B;AAEjCV,IAAAA,KAAK,EAAE,SAASW,KAAT,GAAiB;AACtB,aAAO,KAAKH,SAAL,CAAeG,KAAf,EAAP;AACD;AAJgC,GAAD,EAK/B;AACDD,IAAAA,GAAG,EAAE,aADJ;AAEDV,IAAAA,KAAK,EAAE,SAASY,WAAT,GAAuB;AAC5B,aAAO,KAAKJ,SAAL,CAAeI,WAAf,EAAP;AACD;AAJA,GAL+B,EAU/B;AACDF,IAAAA,GAAG,EAAE,OADJ;AAEDV,IAAAA,KAAK,EAAE,SAASa,KAAT,GAAiB;AACtB,aAAOT,MAAM,CAAC,KAAKU,WAAL,EAAD,EAAqB,KAAKN,SAAL,CAAeO,QAAf,KAA4B,CAAjD,CAAb;AACD;AAJA,GAV+B,EAe/B;AACDL,IAAAA,GAAG,EAAE,aADJ;AAEDV,IAAAA,KAAK,EAAE,SAASc,WAAT,GAAuB;AAC5B,aAAO,KAAKN,SAAL,CAAeO,QAAf,OAA8B,CAA9B,GAAkC,KAAKP,SAAL,CAAeM,WAAf,EAAlC,GAAiE,KAAKN,SAAL,CAAeQ,YAAf,EAAxE;AACD;AAJA,GAf+B,EAoB/B;AACDN,IAAAA,GAAG,EAAE,OADJ;AAEDV,IAAAA,KAAK,EAAE,SAASiB,KAAT,GAAiB;AACtB,aAAO,KAAKT,SAAL,CAAeS,KAAf,EAAP;AACD;AAJA,GApB+B,EAyB/B;AACDP,IAAAA,GAAG,EAAE,aADJ;AAEDV,IAAAA,KAAK,EAAE,SAASkB,WAAT,GAAuB;AAC5B,aAAO,KAAKV,SAAL,CAAeU,WAAf,EAAP;AACD;AAJA,GAzB+B,CAAf,CAAnB;AA+BD,CAzCsC,EAAhC","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Color as RcColor } from '@rc-component/color-picker';\nexport const toHexFormat = (value, alpha) => (value === null || value === void 0 ? void 0 : value.replace(/[^\\w/]/gi, '').slice(0, alpha ? 8 : 6)) || '';\nexport const getHex = (value, alpha) => value ? toHexFormat(value, alpha) : '';\nexport let ColorFactory = /*#__PURE__*/function () {\n  function ColorFactory(color) {\n    _classCallCheck(this, ColorFactory);\n    this.cleared = false;\n    this.metaColor = new RcColor(color);\n    if (!color) {\n      this.metaColor.setAlpha(0);\n      this.cleared = true;\n    }\n  }\n  return _createClass(ColorFactory, [{\n    key: \"toHsb\",\n    value: function toHsb() {\n      return this.metaColor.toHsb();\n    }\n  }, {\n    key: \"toHsbString\",\n    value: function toHsbString() {\n      return this.metaColor.toHsbString();\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return getHex(this.toHexString(), this.metaColor.getAlpha() < 1);\n    }\n  }, {\n    key: \"toHexString\",\n    value: function toHexString() {\n      return this.metaColor.getAlpha() === 1 ? this.metaColor.toHexString() : this.metaColor.toHex8String();\n    }\n  }, {\n    key: \"toRgb\",\n    value: function toRgb() {\n      return this.metaColor.toRgb();\n    }\n  }, {\n    key: \"toRgbString\",\n    value: function toRgbString() {\n      return this.metaColor.toRgbString();\n    }\n  }]);\n}();"]},"metadata":{},"sourceType":"module"}