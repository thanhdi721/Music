{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport LoadingOutlined from \"@ant-design/icons/es/icons/LoadingOutlined\";\nimport CheckOutlined from \"@ant-design/icons/es/icons/CheckOutlined\";\nimport CopyOutlined from \"@ant-design/icons/es/icons/CopyOutlined\";\nimport classNames from 'classnames';\nimport TransButton from '../../_util/transButton';\nimport Tooltip from '../../tooltip';\nimport { getNode, toList } from './util';\nexport default function CopyBtn(props) {\n  const {\n    prefixCls,\n    copied,\n    locale = {},\n    onCopy,\n    iconOnly,\n    tooltips,\n    icon,\n    loading\n  } = props;\n  const tooltipNodes = toList(tooltips);\n  const iconNodes = toList(icon);\n  const {\n    copied: copiedText,\n    copy: copyText\n  } = locale;\n  const copyTitle = copied ? getNode(tooltipNodes[1], copiedText) : getNode(tooltipNodes[0], copyText);\n  const systemStr = copied ? copiedText : copyText;\n  const ariaLabel = typeof copyTitle === 'string' ? copyTitle : systemStr;\n  return /*#__PURE__*/React.createElement(Tooltip, {\n    key: \"copy\",\n    title: copyTitle\n  }, /*#__PURE__*/React.createElement(TransButton, {\n    className: classNames(`${prefixCls}-copy`, {\n      [`${prefixCls}-copy-success`]: copied,\n      [`${prefixCls}-copy-icon-only`]: iconOnly\n    }),\n    onClick: onCopy,\n    \"aria-label\": ariaLabel\n  }, copied ? getNode(iconNodes[1], /*#__PURE__*/React.createElement(CheckOutlined, null), true) : getNode(iconNodes[0], loading ? /*#__PURE__*/React.createElement(LoadingOutlined, null) : /*#__PURE__*/React.createElement(CopyOutlined, null), true)));\n}","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/antd/es/typography/Base/CopyBtn.js"],"names":["React","LoadingOutlined","CheckOutlined","CopyOutlined","classNames","TransButton","Tooltip","getNode","toList","CopyBtn","props","prefixCls","copied","locale","onCopy","iconOnly","tooltips","icon","loading","tooltipNodes","iconNodes","copiedText","copy","copyText","copyTitle","systemStr","ariaLabel","createElement","key","title","className","onClick"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,eAAP,MAA4B,4CAA5B;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,YAAP,MAAyB,yCAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,QAAhC;AACA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACrC,QAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,MAAM,GAAG,EAHL;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,QANI;AAOJC,IAAAA,IAPI;AAQJC,IAAAA;AARI,MASFR,KATJ;AAUA,QAAMS,YAAY,GAAGX,MAAM,CAACQ,QAAD,CAA3B;AACA,QAAMI,SAAS,GAAGZ,MAAM,CAACS,IAAD,CAAxB;AACA,QAAM;AACJL,IAAAA,MAAM,EAAES,UADJ;AAEJC,IAAAA,IAAI,EAAEC;AAFF,MAGFV,MAHJ;AAIA,QAAMW,SAAS,GAAGZ,MAAM,GAAGL,OAAO,CAACY,YAAY,CAAC,CAAD,CAAb,EAAkBE,UAAlB,CAAV,GAA0Cd,OAAO,CAACY,YAAY,CAAC,CAAD,CAAb,EAAkBI,QAAlB,CAAzE;AACA,QAAME,SAAS,GAAGb,MAAM,GAAGS,UAAH,GAAgBE,QAAxC;AACA,QAAMG,SAAS,GAAG,OAAOF,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA4CC,SAA9D;AACA,SAAO,aAAazB,KAAK,CAAC2B,aAAN,CAAoBrB,OAApB,EAA6B;AAC/CsB,IAAAA,GAAG,EAAE,MAD0C;AAE/CC,IAAAA,KAAK,EAAEL;AAFwC,GAA7B,EAGjB,aAAaxB,KAAK,CAAC2B,aAAN,CAAoBtB,WAApB,EAAiC;AAC/CyB,IAAAA,SAAS,EAAE1B,UAAU,CAAE,GAAEO,SAAU,OAAd,EAAsB;AACzC,OAAE,GAAEA,SAAU,eAAd,GAA+BC,MADU;AAEzC,OAAE,GAAED,SAAU,iBAAd,GAAiCI;AAFQ,KAAtB,CAD0B;AAK/CgB,IAAAA,OAAO,EAAEjB,MALsC;AAM/C,kBAAcY;AANiC,GAAjC,EAObd,MAAM,GAAGL,OAAO,CAACa,SAAS,CAAC,CAAD,CAAV,EAAe,aAAapB,KAAK,CAAC2B,aAAN,CAAoBzB,aAApB,EAAmC,IAAnC,CAA5B,EAAsE,IAAtE,CAAV,GAAwFK,OAAO,CAACa,SAAS,CAAC,CAAD,CAAV,EAAeF,OAAO,GAAG,aAAalB,KAAK,CAAC2B,aAAN,CAAoB1B,eAApB,EAAqC,IAArC,CAAhB,GAA6D,aAAaD,KAAK,CAAC2B,aAAN,CAAoBxB,YAApB,EAAkC,IAAlC,CAAhG,EAAyI,IAAzI,CAPxF,CAHI,CAApB;AAWD","sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport LoadingOutlined from \"@ant-design/icons/es/icons/LoadingOutlined\";\nimport CheckOutlined from \"@ant-design/icons/es/icons/CheckOutlined\";\nimport CopyOutlined from \"@ant-design/icons/es/icons/CopyOutlined\";\nimport classNames from 'classnames';\nimport TransButton from '../../_util/transButton';\nimport Tooltip from '../../tooltip';\nimport { getNode, toList } from './util';\nexport default function CopyBtn(props) {\n  const {\n    prefixCls,\n    copied,\n    locale = {},\n    onCopy,\n    iconOnly,\n    tooltips,\n    icon,\n    loading\n  } = props;\n  const tooltipNodes = toList(tooltips);\n  const iconNodes = toList(icon);\n  const {\n    copied: copiedText,\n    copy: copyText\n  } = locale;\n  const copyTitle = copied ? getNode(tooltipNodes[1], copiedText) : getNode(tooltipNodes[0], copyText);\n  const systemStr = copied ? copiedText : copyText;\n  const ariaLabel = typeof copyTitle === 'string' ? copyTitle : systemStr;\n  return /*#__PURE__*/React.createElement(Tooltip, {\n    key: \"copy\",\n    title: copyTitle\n  }, /*#__PURE__*/React.createElement(TransButton, {\n    className: classNames(`${prefixCls}-copy`, {\n      [`${prefixCls}-copy-success`]: copied,\n      [`${prefixCls}-copy-icon-only`]: iconOnly\n    }),\n    onClick: onCopy,\n    \"aria-label\": ariaLabel\n  }, copied ? getNode(iconNodes[1], /*#__PURE__*/React.createElement(CheckOutlined, null), true) : getNode(iconNodes[0], loading ? /*#__PURE__*/React.createElement(LoadingOutlined, null) : /*#__PURE__*/React.createElement(CopyOutlined, null), true)));\n}"]},"metadata":{},"sourceType":"module"}