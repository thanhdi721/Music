{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar SPLIT = '__@field_split__';\n/**\n * Convert name path into string to fast the fetch speed of Map.\n */\n\nfunction normalize(namePath) {\n  return namePath.map(function (cell) {\n    return \"\".concat(_typeof(cell), \":\").concat(cell);\n  }) // Magic split\n  .join(SPLIT);\n}\n/**\n * NameMap like a `Map` but accepts `string[]` as key.\n */\n\n\nvar NameMap = /*#__PURE__*/function () {\n  function NameMap() {\n    _classCallCheck(this, NameMap);\n\n    _defineProperty(this, \"kvs\", new Map());\n  }\n\n  _createClass(NameMap, [{\n    key: \"set\",\n    value: function set(key, value) {\n      this.kvs.set(normalize(key), value);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this.kvs.get(normalize(key));\n    }\n  }, {\n    key: \"update\",\n    value: function update(key, updater) {\n      var origin = this.get(key);\n      var next = updater(origin);\n\n      if (!next) {\n        this.delete(key);\n      } else {\n        this.set(key, next);\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      this.kvs.delete(normalize(key));\n    } // Since we only use this in test, let simply realize this\n\n  }, {\n    key: \"map\",\n    value: function map(callback) {\n      return _toConsumableArray(this.kvs.entries()).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        var cells = key.split(SPLIT);\n        return callback({\n          key: cells.map(function (cell) {\n            var _cell$match = cell.match(/^([^:]*):(.*)$/),\n                _cell$match2 = _slicedToArray(_cell$match, 3),\n                type = _cell$match2[1],\n                unit = _cell$match2[2];\n\n            return type === 'number' ? Number(unit) : unit;\n          }),\n          value: value\n        });\n      });\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var json = {};\n      this.map(function (_ref3) {\n        var key = _ref3.key,\n            value = _ref3.value;\n        json[key.join('.')] = value;\n        return null;\n      });\n      return json;\n    }\n  }]);\n\n  return NameMap;\n}();\n\nexport default NameMap;","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/rc-field-form/es/utils/NameMap.js"],"names":["_slicedToArray","_toConsumableArray","_classCallCheck","_createClass","_defineProperty","_typeof","SPLIT","normalize","namePath","map","cell","concat","join","NameMap","Map","key","value","set","kvs","get","update","updater","origin","next","delete","_delete","callback","entries","_ref","_ref2","cells","split","_cell$match","match","_cell$match2","type","unit","Number","toJSON","json","_ref3"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar SPLIT = '__@field_split__';\n\n/**\n * Convert name path into string to fast the fetch speed of Map.\n */\nfunction normalize(namePath) {\n  return namePath.map(function (cell) {\n    return \"\".concat(_typeof(cell), \":\").concat(cell);\n  })\n  // Magic split\n  .join(SPLIT);\n}\n\n/**\n * NameMap like a `Map` but accepts `string[]` as key.\n */\nvar NameMap = /*#__PURE__*/function () {\n  function NameMap() {\n    _classCallCheck(this, NameMap);\n    _defineProperty(this, \"kvs\", new Map());\n  }\n  _createClass(NameMap, [{\n    key: \"set\",\n    value: function set(key, value) {\n      this.kvs.set(normalize(key), value);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this.kvs.get(normalize(key));\n    }\n  }, {\n    key: \"update\",\n    value: function update(key, updater) {\n      var origin = this.get(key);\n      var next = updater(origin);\n      if (!next) {\n        this.delete(key);\n      } else {\n        this.set(key, next);\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      this.kvs.delete(normalize(key));\n    }\n\n    // Since we only use this in test, let simply realize this\n  }, {\n    key: \"map\",\n    value: function map(callback) {\n      return _toConsumableArray(this.kvs.entries()).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        var cells = key.split(SPLIT);\n        return callback({\n          key: cells.map(function (cell) {\n            var _cell$match = cell.match(/^([^:]*):(.*)$/),\n              _cell$match2 = _slicedToArray(_cell$match, 3),\n              type = _cell$match2[1],\n              unit = _cell$match2[2];\n            return type === 'number' ? Number(unit) : unit;\n          }),\n          value: value\n        });\n      });\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var json = {};\n      this.map(function (_ref3) {\n        var key = _ref3.key,\n          value = _ref3.value;\n        json[key.join('.')] = value;\n        return null;\n      });\n      return json;\n    }\n  }]);\n  return NameMap;\n}();\nexport default NameMap;"]},"metadata":{},"sourceType":"module"}