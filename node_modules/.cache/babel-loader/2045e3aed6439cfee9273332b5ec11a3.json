{"ast":null,"code":"\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React, { useContext } from 'react';\nimport { render } from \"rc-util/es/React/render\";\nimport { AppConfigContext } from '../app/context';\nimport ConfigProvider, { ConfigContext, globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useMessage, { useInternalMessage } from './useMessage';\nimport { wrapPromiseFn } from './util';\nlet message = null;\n\nlet act = callback => callback();\n\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\n\nfunction getGlobalContext() {\n  const {\n    getContainer,\n    duration,\n    rtl,\n    maxCount,\n    top\n  } = defaultGlobalConfig;\n  const mergedContainer = (getContainer === null || getContainer === void 0 ? void 0 : getContainer()) || document.body;\n  return {\n    getContainer: () => mergedContainer,\n    duration,\n    rtl,\n    maxCount,\n    top\n  };\n}\n\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    messageConfig,\n    sync\n  } = props;\n  const {\n    getPrefixCls\n  } = useContext(ConfigContext);\n  const prefixCls = defaultGlobalConfig.prefixCls || getPrefixCls('message');\n  const appConfig = useContext(AppConfigContext);\n  const [api, holder] = useInternalMessage(Object.assign(Object.assign(Object.assign({}, messageConfig), {\n    prefixCls\n  }), appConfig.message));\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return holder;\n});\nconst GlobalHolderWrapper = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const [messageConfig, setMessageConfig] = React.useState(getGlobalContext);\n\n  const sync = () => {\n    setMessageConfig(getGlobalContext);\n  };\n\n  React.useEffect(sync, []);\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const theme = global.getTheme();\n  const dom = /*#__PURE__*/React.createElement(GlobalHolder, {\n    ref: ref,\n    sync: sync,\n    messageConfig: messageConfig\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, global.holderRender ? global.holderRender(dom) : dom);\n});\n\nfunction flushNotice() {\n  if (!message) {\n    const holderFragment = document.createDocumentFragment();\n    const newMessage = {\n      fragment: holderFragment\n    };\n    message = newMessage; // Delay render to avoid sync issue\n\n    act(() => {\n      render( /*#__PURE__*/React.createElement(GlobalHolderWrapper, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {}; // React 18 test env will throw if call immediately in ref\n\n          Promise.resolve().then(() => {\n            if (!newMessage.instance && instance) {\n              newMessage.instance = instance;\n              newMessage.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  } // Notification not ready\n\n\n  if (!message.instance) {\n    return;\n  } // >>> Execute task\n\n\n  taskQueue.forEach(task => {\n    const {\n      type,\n      skipped\n    } = task; // Only `skipped` when user call notice but cancel it immediately\n    // and instance not ready\n\n    if (!skipped) {\n      switch (type) {\n        case 'open':\n          {\n            act(() => {\n              const closeFn = message.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n              closeFn === null || closeFn === void 0 ? void 0 : closeFn.then(task.resolve);\n              task.setCloseFn(closeFn);\n            });\n            break;\n          }\n\n        case 'destroy':\n          act(() => {\n            message === null || message === void 0 ? void 0 : message.instance.destroy(task.key);\n          });\n          break;\n        // Other type open\n\n        default:\n          {\n            act(() => {\n              var _message$instance;\n\n              const closeFn = (_message$instance = message.instance)[type].apply(_message$instance, _toConsumableArray(task.args));\n\n              closeFn === null || closeFn === void 0 ? void 0 : closeFn.then(task.resolve);\n              task.setCloseFn(closeFn);\n            });\n          }\n      }\n    }\n  }); // Clean up\n\n  taskQueue = [];\n} // ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\n\n\nfunction setMessageGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config); // Trigger sync for it\n\n  act(() => {\n    var _a;\n\n    (_a = message === null || message === void 0 ? void 0 : message.sync) === null || _a === void 0 ? void 0 : _a.call(message);\n  });\n}\n\nfunction open(config) {\n  const result = wrapPromiseFn(resolve => {\n    let closeFn;\n    const task = {\n      type: 'open',\n      config,\n      resolve,\n      setCloseFn: fn => {\n        closeFn = fn;\n      }\n    };\n    taskQueue.push(task);\n    return () => {\n      if (closeFn) {\n        act(() => {\n          closeFn();\n        });\n      } else {\n        task.skipped = true;\n      }\n    };\n  });\n  flushNotice();\n  return result;\n}\n\nfunction typeOpen(type, args) {\n  const global = globalConfig();\n\n  if (process.env.NODE_ENV !== 'production' && !global.holderRender) {\n    warnContext('message');\n  }\n\n  const result = wrapPromiseFn(resolve => {\n    let closeFn;\n    const task = {\n      type,\n      args,\n      resolve,\n      setCloseFn: fn => {\n        closeFn = fn;\n      }\n    };\n    taskQueue.push(task);\n    return () => {\n      if (closeFn) {\n        act(() => {\n          closeFn();\n        });\n      } else {\n        task.skipped = true;\n      }\n    };\n  });\n  flushNotice();\n  return result;\n}\n\nconst destroy = key => {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n};\n\nconst methods = ['success', 'info', 'warning', 'error', 'loading'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setMessageGlobalConfig,\n  useMessage,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return typeOpen(type, args);\n  };\n}); // ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\n\nconst noop = () => {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\n\n\nexport let actWrapper = noop;\n\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\n\n\nexport let actDestroy = noop;\n\nif (process.env.NODE_ENV === 'test') {\n  actDestroy = () => {\n    message = null;\n  };\n}\n\nexport default staticMethods;","map":{"version":3,"sources":["D:/WED/SpotifyProject-master/node_modules/antd/es/message/index.js"],"names":["_toConsumableArray","React","useContext","render","AppConfigContext","ConfigProvider","ConfigContext","globalConfig","warnContext","PurePanel","useMessage","useInternalMessage","wrapPromiseFn","message","act","callback","taskQueue","defaultGlobalConfig","getGlobalContext","getContainer","duration","rtl","maxCount","top","mergedContainer","document","body","GlobalHolder","forwardRef","props","ref","messageConfig","sync","getPrefixCls","prefixCls","appConfig","api","holder","Object","assign","useImperativeHandle","instance","keys","forEach","method","apply","arguments","GlobalHolderWrapper","_","setMessageConfig","useState","useEffect","global","rootPrefixCls","getRootPrefixCls","rootIconPrefixCls","getIconPrefixCls","theme","getTheme","dom","createElement","iconPrefixCls","holderRender","flushNotice","holderFragment","createDocumentFragment","newMessage","fragment","node","Promise","resolve","then","task","type","skipped","closeFn","open","config","setCloseFn","destroy","key","_message$instance","args","setMessageGlobalConfig","_a","call","result","fn","push","typeOpen","process","env","NODE_ENV","methods","baseStaticMethods","_InternalPanelDoNotUseOrYouWillBeFired","staticMethods","_len","length","Array","_key","noop","actWrapper","wrapper","actDestroy"],"mappings":"AAAA;;AAEA,OAAOA,kBAAP,MAA+B,8CAA/B;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,gBAAT,QAAiC,gBAAjC;AACA,OAAOC,cAAP,IAAyBC,aAAzB,EAAwCC,YAAxC,EAAsDC,WAAtD,QAAyE,oBAAzE;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,IAAqBC,kBAArB,QAA+C,cAA/C;AACA,SAASC,aAAT,QAA8B,QAA9B;AACA,IAAIC,OAAO,GAAG,IAAd;;AACA,IAAIC,GAAG,GAAGC,QAAQ,IAAIA,QAAQ,EAA9B;;AACA,IAAIC,SAAS,GAAG,EAAhB;AACA,IAAIC,mBAAmB,GAAG,EAA1B;;AACA,SAASC,gBAAT,GAA4B;AAC1B,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,GAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA;AALI,MAMFN,mBANJ;AAOA,QAAMO,eAAe,GAAG,CAACL,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,EAAzE,KAAgFM,QAAQ,CAACC,IAAjH;AACA,SAAO;AACLP,IAAAA,YAAY,EAAE,MAAMK,eADf;AAELJ,IAAAA,QAFK;AAGLC,IAAAA,GAHK;AAILC,IAAAA,QAJK;AAKLC,IAAAA;AALK,GAAP;AAOD;;AACD,MAAMI,YAAY,GAAG,aAAa1B,KAAK,CAAC2B,UAAN,CAAiB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACjE,QAAM;AACJC,IAAAA,aADI;AAEJC,IAAAA;AAFI,MAGFH,KAHJ;AAIA,QAAM;AACJI,IAAAA;AADI,MAEF/B,UAAU,CAACI,aAAD,CAFd;AAGA,QAAM4B,SAAS,GAAGjB,mBAAmB,CAACiB,SAApB,IAAiCD,YAAY,CAAC,SAAD,CAA/D;AACA,QAAME,SAAS,GAAGjC,UAAU,CAACE,gBAAD,CAA5B;AACA,QAAM,CAACgC,GAAD,EAAMC,MAAN,IAAgB1B,kBAAkB,CAAC2B,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,aAAlB,CAAd,EAAgD;AACrGG,IAAAA;AADqG,GAAhD,CAAd,EAErCC,SAAS,CAACtB,OAF2B,CAAD,CAAxC;AAGAZ,EAAAA,KAAK,CAACuC,mBAAN,CAA0BV,GAA1B,EAA+B,MAAM;AACnC,UAAMW,QAAQ,GAAGH,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,GAAlB,CAAjB;AACAE,IAAAA,MAAM,CAACI,IAAP,CAAYD,QAAZ,EAAsBE,OAAtB,CAA8BC,MAAM,IAAI;AACtCH,MAAAA,QAAQ,CAACG,MAAD,CAAR,GAAmB,YAAY;AAC7BZ,QAAAA,IAAI;AACJ,eAAOI,GAAG,CAACQ,MAAD,CAAH,CAAYC,KAAZ,CAAkBT,GAAlB,EAAuBU,SAAvB,CAAP;AACD,OAHD;AAID,KALD;AAMA,WAAO;AACLL,MAAAA,QADK;AAELT,MAAAA;AAFK,KAAP;AAID,GAZD;AAaA,SAAOK,MAAP;AACD,CA3BiC,CAAlC;AA4BA,MAAMU,mBAAmB,GAAG,aAAa9C,KAAK,CAAC2B,UAAN,CAAiB,CAACoB,CAAD,EAAIlB,GAAJ,KAAY;AACpE,QAAM,CAACC,aAAD,EAAgBkB,gBAAhB,IAAoChD,KAAK,CAACiD,QAAN,CAAehC,gBAAf,CAA1C;;AACA,QAAMc,IAAI,GAAG,MAAM;AACjBiB,IAAAA,gBAAgB,CAAC/B,gBAAD,CAAhB;AACD,GAFD;;AAGAjB,EAAAA,KAAK,CAACkD,SAAN,CAAgBnB,IAAhB,EAAsB,EAAtB;AACA,QAAMoB,MAAM,GAAG7C,YAAY,EAA3B;AACA,QAAM8C,aAAa,GAAGD,MAAM,CAACE,gBAAP,EAAtB;AACA,QAAMC,iBAAiB,GAAGH,MAAM,CAACI,gBAAP,EAA1B;AACA,QAAMC,KAAK,GAAGL,MAAM,CAACM,QAAP,EAAd;AACA,QAAMC,GAAG,GAAG,aAAa1D,KAAK,CAAC2D,aAAN,CAAoBjC,YAApB,EAAkC;AACzDG,IAAAA,GAAG,EAAEA,GADoD;AAEzDE,IAAAA,IAAI,EAAEA,IAFmD;AAGzDD,IAAAA,aAAa,EAAEA;AAH0C,GAAlC,CAAzB;AAKA,SAAO,aAAa9B,KAAK,CAAC2D,aAAN,CAAoBvD,cAApB,EAAoC;AACtD6B,IAAAA,SAAS,EAAEmB,aAD2C;AAEtDQ,IAAAA,aAAa,EAAEN,iBAFuC;AAGtDE,IAAAA,KAAK,EAAEA;AAH+C,GAApC,EAIjBL,MAAM,CAACU,YAAP,GAAsBV,MAAM,CAACU,YAAP,CAAoBH,GAApB,CAAtB,GAAiDA,GAJhC,CAApB;AAKD,CApBwC,CAAzC;;AAqBA,SAASI,WAAT,GAAuB;AACrB,MAAI,CAAClD,OAAL,EAAc;AACZ,UAAMmD,cAAc,GAAGvC,QAAQ,CAACwC,sBAAT,EAAvB;AACA,UAAMC,UAAU,GAAG;AACjBC,MAAAA,QAAQ,EAAEH;AADO,KAAnB;AAGAnD,IAAAA,OAAO,GAAGqD,UAAV,CALY,CAMZ;;AACApD,IAAAA,GAAG,CAAC,MAAM;AACRX,MAAAA,MAAM,EAAE,aAAaF,KAAK,CAAC2D,aAAN,CAAoBb,mBAApB,EAAyC;AAC5DjB,QAAAA,GAAG,EAAEsC,IAAI,IAAI;AACX,gBAAM;AACJ3B,YAAAA,QADI;AAEJT,YAAAA;AAFI,cAGFoC,IAAI,IAAI,EAHZ,CADW,CAKX;;AACAC,UAAAA,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM;AAC3B,gBAAI,CAACL,UAAU,CAACzB,QAAZ,IAAwBA,QAA5B,EAAsC;AACpCyB,cAAAA,UAAU,CAACzB,QAAX,GAAsBA,QAAtB;AACAyB,cAAAA,UAAU,CAAClC,IAAX,GAAkBA,IAAlB;AACA+B,cAAAA,WAAW;AACZ;AACF,WAND;AAOD;AAd2D,OAAzC,CAAf,EAeFC,cAfE,CAAN;AAgBD,KAjBE,CAAH;AAkBA;AACD,GA3BoB,CA4BrB;;;AACA,MAAI,CAACnD,OAAO,CAAC4B,QAAb,EAAuB;AACrB;AACD,GA/BoB,CAgCrB;;;AACAzB,EAAAA,SAAS,CAAC2B,OAAV,CAAkB6B,IAAI,IAAI;AACxB,UAAM;AACJC,MAAAA,IADI;AAEJC,MAAAA;AAFI,QAGFF,IAHJ,CADwB,CAKxB;AACA;;AACA,QAAI,CAACE,OAAL,EAAc;AACZ,cAAQD,IAAR;AACE,aAAK,MAAL;AACE;AACE3D,YAAAA,GAAG,CAAC,MAAM;AACR,oBAAM6D,OAAO,GAAG9D,OAAO,CAAC4B,QAAR,CAAiBmC,IAAjB,CAAsBtC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBtB,mBAAlB,CAAd,EAAsDuD,IAAI,CAACK,MAA3D,CAAtB,CAAhB;AACAF,cAAAA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACJ,IAAR,CAAaC,IAAI,CAACF,OAAlB,CAAlD;AACAE,cAAAA,IAAI,CAACM,UAAL,CAAgBH,OAAhB;AACD,aAJE,CAAH;AAKA;AACD;;AACH,aAAK,SAAL;AACE7D,UAAAA,GAAG,CAAC,MAAM;AACRD,YAAAA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAAC4B,QAAR,CAAiBsC,OAAjB,CAAyBP,IAAI,CAACQ,GAA9B,CAAlD;AACD,WAFE,CAAH;AAGA;AACF;;AACA;AACE;AACElE,YAAAA,GAAG,CAAC,MAAM;AACR,kBAAImE,iBAAJ;;AACA,oBAAMN,OAAO,GAAG,CAACM,iBAAiB,GAAGpE,OAAO,CAAC4B,QAA7B,EAAuCgC,IAAvC,EAA6C5B,KAA7C,CAAmDoC,iBAAnD,EAAsEjF,kBAAkB,CAACwE,IAAI,CAACU,IAAN,CAAxF,CAAhB;;AACAP,cAAAA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACJ,IAAR,CAAaC,IAAI,CAACF,OAAlB,CAAlD;AACAE,cAAAA,IAAI,CAACM,UAAL,CAAgBH,OAAhB;AACD,aALE,CAAH;AAMD;AAxBL;AA0BD;AACF,GAnCD,EAjCqB,CAqErB;;AACA3D,EAAAA,SAAS,GAAG,EAAZ;AACD,C,CACD;AACA;AACA;;;AACA,SAASmE,sBAAT,CAAgCN,MAAhC,EAAwC;AACtC5D,EAAAA,mBAAmB,GAAGqB,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBtB,mBAAlB,CAAd,EAAsD4D,MAAtD,CAAtB,CADsC,CAEtC;;AACA/D,EAAAA,GAAG,CAAC,MAAM;AACR,QAAIsE,EAAJ;;AACA,KAACA,EAAE,GAAGvE,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACmB,IAAhE,MAA0E,IAA1E,IAAkFoD,EAAE,KAAK,KAAK,CAA9F,GAAkG,KAAK,CAAvG,GAA2GA,EAAE,CAACC,IAAH,CAAQxE,OAAR,CAA3G;AACD,GAHE,CAAH;AAID;;AACD,SAAS+D,IAAT,CAAcC,MAAd,EAAsB;AACpB,QAAMS,MAAM,GAAG1E,aAAa,CAAC0D,OAAO,IAAI;AACtC,QAAIK,OAAJ;AACA,UAAMH,IAAI,GAAG;AACXC,MAAAA,IAAI,EAAE,MADK;AAEXI,MAAAA,MAFW;AAGXP,MAAAA,OAHW;AAIXQ,MAAAA,UAAU,EAAES,EAAE,IAAI;AAChBZ,QAAAA,OAAO,GAAGY,EAAV;AACD;AANU,KAAb;AAQAvE,IAAAA,SAAS,CAACwE,IAAV,CAAehB,IAAf;AACA,WAAO,MAAM;AACX,UAAIG,OAAJ,EAAa;AACX7D,QAAAA,GAAG,CAAC,MAAM;AACR6D,UAAAA,OAAO;AACR,SAFE,CAAH;AAGD,OAJD,MAIO;AACLH,QAAAA,IAAI,CAACE,OAAL,GAAe,IAAf;AACD;AACF,KARD;AASD,GApB2B,CAA5B;AAqBAX,EAAAA,WAAW;AACX,SAAOuB,MAAP;AACD;;AACD,SAASG,QAAT,CAAkBhB,IAAlB,EAAwBS,IAAxB,EAA8B;AAC5B,QAAM9B,MAAM,GAAG7C,YAAY,EAA3B;;AACA,MAAImF,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,CAACxC,MAAM,CAACU,YAArD,EAAmE;AACjEtD,IAAAA,WAAW,CAAC,SAAD,CAAX;AACD;;AACD,QAAM8E,MAAM,GAAG1E,aAAa,CAAC0D,OAAO,IAAI;AACtC,QAAIK,OAAJ;AACA,UAAMH,IAAI,GAAG;AACXC,MAAAA,IADW;AAEXS,MAAAA,IAFW;AAGXZ,MAAAA,OAHW;AAIXQ,MAAAA,UAAU,EAAES,EAAE,IAAI;AAChBZ,QAAAA,OAAO,GAAGY,EAAV;AACD;AANU,KAAb;AAQAvE,IAAAA,SAAS,CAACwE,IAAV,CAAehB,IAAf;AACA,WAAO,MAAM;AACX,UAAIG,OAAJ,EAAa;AACX7D,QAAAA,GAAG,CAAC,MAAM;AACR6D,UAAAA,OAAO;AACR,SAFE,CAAH;AAGD,OAJD,MAIO;AACLH,QAAAA,IAAI,CAACE,OAAL,GAAe,IAAf;AACD;AACF,KARD;AASD,GApB2B,CAA5B;AAqBAX,EAAAA,WAAW;AACX,SAAOuB,MAAP;AACD;;AACD,MAAMP,OAAO,GAAGC,GAAG,IAAI;AACrBhE,EAAAA,SAAS,CAACwE,IAAV,CAAe;AACbf,IAAAA,IAAI,EAAE,SADO;AAEbO,IAAAA;AAFa,GAAf;AAIAjB,EAAAA,WAAW;AACZ,CAND;;AAOA,MAAM8B,OAAO,GAAG,CAAC,SAAD,EAAY,MAAZ,EAAoB,SAApB,EAA+B,OAA/B,EAAwC,SAAxC,CAAhB;AACA,MAAMC,iBAAiB,GAAG;AACxBlB,EAAAA,IADwB;AAExBG,EAAAA,OAFwB;AAGxBF,EAAAA,MAAM,EAAEM,sBAHgB;AAIxBzE,EAAAA,UAJwB;AAKxBqF,EAAAA,sCAAsC,EAAEtF;AALhB,CAA1B;AAOA,MAAMuF,aAAa,GAAGF,iBAAtB;AACAD,OAAO,CAAClD,OAAR,CAAgB8B,IAAI,IAAI;AACtBuB,EAAAA,aAAa,CAACvB,IAAD,CAAb,GAAsB,YAAY;AAChC,SAAK,IAAIwB,IAAI,GAAGnD,SAAS,CAACoD,MAArB,EAA6BhB,IAAI,GAAG,IAAIiB,KAAJ,CAAUF,IAAV,CAApC,EAAqDG,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGH,IAA3E,EAAiFG,IAAI,EAArF,EAAyF;AACvFlB,MAAAA,IAAI,CAACkB,IAAD,CAAJ,GAAatD,SAAS,CAACsD,IAAD,CAAtB;AACD;;AACD,WAAOX,QAAQ,CAAChB,IAAD,EAAOS,IAAP,CAAf;AACD,GALD;AAMD,CAPD,E,CAQA;AACA;AACA;;AACA,MAAMmB,IAAI,GAAG,MAAM,CAAE,CAArB;AACA;AACA;;;AACA,OAAO,IAAIC,UAAU,GAAGD,IAAjB;;AACP,IAAIX,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnCU,EAAAA,UAAU,GAAGC,OAAO,IAAI;AACtBzF,IAAAA,GAAG,GAAGyF,OAAN;AACD,GAFD;AAGD;AACD;AACA;;;AACA,OAAO,IAAIC,UAAU,GAAGH,IAAjB;;AACP,IAAIX,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnCY,EAAAA,UAAU,GAAG,MAAM;AACjB3F,IAAAA,OAAO,GAAG,IAAV;AACD,GAFD;AAGD;;AACD,eAAemF,aAAf","sourcesContent":["\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React, { useContext } from 'react';\nimport { render } from \"rc-util/es/React/render\";\nimport { AppConfigContext } from '../app/context';\nimport ConfigProvider, { ConfigContext, globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useMessage, { useInternalMessage } from './useMessage';\nimport { wrapPromiseFn } from './util';\nlet message = null;\nlet act = callback => callback();\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\nfunction getGlobalContext() {\n  const {\n    getContainer,\n    duration,\n    rtl,\n    maxCount,\n    top\n  } = defaultGlobalConfig;\n  const mergedContainer = (getContainer === null || getContainer === void 0 ? void 0 : getContainer()) || document.body;\n  return {\n    getContainer: () => mergedContainer,\n    duration,\n    rtl,\n    maxCount,\n    top\n  };\n}\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    messageConfig,\n    sync\n  } = props;\n  const {\n    getPrefixCls\n  } = useContext(ConfigContext);\n  const prefixCls = defaultGlobalConfig.prefixCls || getPrefixCls('message');\n  const appConfig = useContext(AppConfigContext);\n  const [api, holder] = useInternalMessage(Object.assign(Object.assign(Object.assign({}, messageConfig), {\n    prefixCls\n  }), appConfig.message));\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return holder;\n});\nconst GlobalHolderWrapper = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const [messageConfig, setMessageConfig] = React.useState(getGlobalContext);\n  const sync = () => {\n    setMessageConfig(getGlobalContext);\n  };\n  React.useEffect(sync, []);\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const theme = global.getTheme();\n  const dom = /*#__PURE__*/React.createElement(GlobalHolder, {\n    ref: ref,\n    sync: sync,\n    messageConfig: messageConfig\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, global.holderRender ? global.holderRender(dom) : dom);\n});\nfunction flushNotice() {\n  if (!message) {\n    const holderFragment = document.createDocumentFragment();\n    const newMessage = {\n      fragment: holderFragment\n    };\n    message = newMessage;\n    // Delay render to avoid sync issue\n    act(() => {\n      render( /*#__PURE__*/React.createElement(GlobalHolderWrapper, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          // React 18 test env will throw if call immediately in ref\n          Promise.resolve().then(() => {\n            if (!newMessage.instance && instance) {\n              newMessage.instance = instance;\n              newMessage.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  }\n  // Notification not ready\n  if (!message.instance) {\n    return;\n  }\n  // >>> Execute task\n  taskQueue.forEach(task => {\n    const {\n      type,\n      skipped\n    } = task;\n    // Only `skipped` when user call notice but cancel it immediately\n    // and instance not ready\n    if (!skipped) {\n      switch (type) {\n        case 'open':\n          {\n            act(() => {\n              const closeFn = message.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n              closeFn === null || closeFn === void 0 ? void 0 : closeFn.then(task.resolve);\n              task.setCloseFn(closeFn);\n            });\n            break;\n          }\n        case 'destroy':\n          act(() => {\n            message === null || message === void 0 ? void 0 : message.instance.destroy(task.key);\n          });\n          break;\n        // Other type open\n        default:\n          {\n            act(() => {\n              var _message$instance;\n              const closeFn = (_message$instance = message.instance)[type].apply(_message$instance, _toConsumableArray(task.args));\n              closeFn === null || closeFn === void 0 ? void 0 : closeFn.then(task.resolve);\n              task.setCloseFn(closeFn);\n            });\n          }\n      }\n    }\n  });\n  // Clean up\n  taskQueue = [];\n}\n// ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\nfunction setMessageGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\n  // Trigger sync for it\n  act(() => {\n    var _a;\n    (_a = message === null || message === void 0 ? void 0 : message.sync) === null || _a === void 0 ? void 0 : _a.call(message);\n  });\n}\nfunction open(config) {\n  const result = wrapPromiseFn(resolve => {\n    let closeFn;\n    const task = {\n      type: 'open',\n      config,\n      resolve,\n      setCloseFn: fn => {\n        closeFn = fn;\n      }\n    };\n    taskQueue.push(task);\n    return () => {\n      if (closeFn) {\n        act(() => {\n          closeFn();\n        });\n      } else {\n        task.skipped = true;\n      }\n    };\n  });\n  flushNotice();\n  return result;\n}\nfunction typeOpen(type, args) {\n  const global = globalConfig();\n  if (process.env.NODE_ENV !== 'production' && !global.holderRender) {\n    warnContext('message');\n  }\n  const result = wrapPromiseFn(resolve => {\n    let closeFn;\n    const task = {\n      type,\n      args,\n      resolve,\n      setCloseFn: fn => {\n        closeFn = fn;\n      }\n    };\n    taskQueue.push(task);\n    return () => {\n      if (closeFn) {\n        act(() => {\n          closeFn();\n        });\n      } else {\n        task.skipped = true;\n      }\n    };\n  });\n  flushNotice();\n  return result;\n}\nconst destroy = key => {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n};\nconst methods = ['success', 'info', 'warning', 'error', 'loading'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setMessageGlobalConfig,\n  useMessage,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return typeOpen(type, args);\n  };\n});\n// ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\nconst noop = () => {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actWrapper = noop;\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actDestroy = noop;\nif (process.env.NODE_ENV === 'test') {\n  actDestroy = () => {\n    message = null;\n  };\n}\nexport default staticMethods;"]},"metadata":{},"sourceType":"module"}