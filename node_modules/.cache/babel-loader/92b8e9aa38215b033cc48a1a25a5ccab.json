{"ast":null,"code":"\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { generateColor, getRoundNumber } from '../util';\nimport ColorSteppers from './ColorSteppers';\n\nconst ColorHsbInput = _ref => {\n  let {\n    prefixCls,\n    value,\n    onChange\n  } = _ref;\n  const colorHsbInputPrefixCls = `${prefixCls}-hsb-input`;\n  const [hsbValue, setHsbValue] = useState(generateColor(value || '#000')); // Update step value\n\n  useEffect(() => {\n    if (value) {\n      setHsbValue(value);\n    }\n  }, [value]);\n\n  const handleHsbChange = (step, type) => {\n    const hsb = hsbValue.toHsb();\n    hsb[type] = type === 'h' ? step : (step || 0) / 100;\n    const genColor = generateColor(hsb);\n\n    if (!value) {\n      setHsbValue(genColor);\n    }\n\n    onChange === null || onChange === void 0 ? void 0 : onChange(genColor);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: colorHsbInputPrefixCls\n  }, /*#__PURE__*/React.createElement(ColorSteppers, {\n    max: 360,\n    min: 0,\n    value: Number(hsbValue.toHsb().h),\n    prefixCls: prefixCls,\n    className: colorHsbInputPrefixCls,\n    formatter: step => getRoundNumber(step || 0).toString(),\n    onChange: step => handleHsbChange(Number(step), 'h')\n  }), /*#__PURE__*/React.createElement(ColorSteppers, {\n    max: 100,\n    min: 0,\n    value: Number(hsbValue.toHsb().s) * 100,\n    prefixCls: prefixCls,\n    className: colorHsbInputPrefixCls,\n    formatter: step => `${getRoundNumber(step || 0)}%`,\n    onChange: step => handleHsbChange(Number(step), 's')\n  }), /*#__PURE__*/React.createElement(ColorSteppers, {\n    max: 100,\n    min: 0,\n    value: Number(hsbValue.toHsb().b) * 100,\n    prefixCls: prefixCls,\n    className: colorHsbInputPrefixCls,\n    formatter: step => `${getRoundNumber(step || 0)}%`,\n    onChange: step => handleHsbChange(Number(step), 'b')\n  }));\n};\n\nexport default ColorHsbInput;","map":{"version":3,"sources":["C:/Users/ASUS/Documents/Music/node_modules/antd/es/color-picker/components/ColorHsbInput.js"],"names":["React","useEffect","useState","generateColor","getRoundNumber","ColorSteppers","ColorHsbInput","_ref","prefixCls","value","onChange","colorHsbInputPrefixCls","hsbValue","setHsbValue","handleHsbChange","step","type","hsb","toHsb","genColor","createElement","className","max","min","Number","h","formatter","toString","s","b"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { generateColor, getRoundNumber } from '../util';\nimport ColorSteppers from './ColorSteppers';\nconst ColorHsbInput = _ref => {\n  let {\n    prefixCls,\n    value,\n    onChange\n  } = _ref;\n  const colorHsbInputPrefixCls = `${prefixCls}-hsb-input`;\n  const [hsbValue, setHsbValue] = useState(generateColor(value || '#000'));\n  // Update step value\n  useEffect(() => {\n    if (value) {\n      setHsbValue(value);\n    }\n  }, [value]);\n  const handleHsbChange = (step, type) => {\n    const hsb = hsbValue.toHsb();\n    hsb[type] = type === 'h' ? step : (step || 0) / 100;\n    const genColor = generateColor(hsb);\n    if (!value) {\n      setHsbValue(genColor);\n    }\n    onChange === null || onChange === void 0 ? void 0 : onChange(genColor);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: colorHsbInputPrefixCls\n  }, /*#__PURE__*/React.createElement(ColorSteppers, {\n    max: 360,\n    min: 0,\n    value: Number(hsbValue.toHsb().h),\n    prefixCls: prefixCls,\n    className: colorHsbInputPrefixCls,\n    formatter: step => getRoundNumber(step || 0).toString(),\n    onChange: step => handleHsbChange(Number(step), 'h')\n  }), /*#__PURE__*/React.createElement(ColorSteppers, {\n    max: 100,\n    min: 0,\n    value: Number(hsbValue.toHsb().s) * 100,\n    prefixCls: prefixCls,\n    className: colorHsbInputPrefixCls,\n    formatter: step => `${getRoundNumber(step || 0)}%`,\n    onChange: step => handleHsbChange(Number(step), 's')\n  }), /*#__PURE__*/React.createElement(ColorSteppers, {\n    max: 100,\n    min: 0,\n    value: Number(hsbValue.toHsb().b) * 100,\n    prefixCls: prefixCls,\n    className: colorHsbInputPrefixCls,\n    formatter: step => `${getRoundNumber(step || 0)}%`,\n    onChange: step => handleHsbChange(Number(step), 'b')\n  }));\n};\nexport default ColorHsbInput;"]},"metadata":{},"sourceType":"module"}